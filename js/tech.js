const tech={totalCount:null,removeCount:0,resetAllTech(){for(let e=0,o=tech.tech.length;e<o;e++)tech.tech[e].isLost=!1,tech.tech[e].isBanished=!1,tech.tech[e].remove(),tech.tech[e].count=0,tech.tech[e].isJunk?tech.tech[e].frequency=0:tech.tech[e].frequencyDefault?tech.tech[e].frequency=tech.tech[e].frequencyDefault:tech.tech[e].frequency=1,"heals"!==tech.tech[e].name&&"ammo"!==tech.tech[e].name&&"research"!==tech.tech[e].name||(tech.tech[e].value=tech.tech[e].defaultValue);m.resetSkin(),tech.removeCount=0,tech.pauseEjectTech=1,lore.techCount=0,tech.duplication=0,m.damageDone=1,m.damageReduction=1,powerUps.difficulty.setDamageAndDefense(),tech.junkChance=0,tech.extraMaxHealth=0,tech.totalCount=0,simulation.updateTechHUD(),simulation.updateGunHUD()},removeTech(e="random"){if("random"===e){const o=[];for(let e=0;e<tech.tech.length;e++)tech.tech[e].count>0&&!tech.tech[e].isInstant&&o.push(e);if(!o.length)return 0;e=o[Math.floor(Math.random()*o.length)]}else if(isNaN(e)){let o=!1;for(let t=0;t<tech.tech.length;t++)if(e===tech.tech[t].name){e=t,o=!0;break}if(!o)return 0}if(0===tech.tech[e].count)return 0;const o=tech.tech[e].count;return simulation.inGameConsole(`<span class='color-var'>tech</span>.removeTech("<span class='color-text'>${tech.tech[e].name}</span>")`,360),tech.tech[e].remove(),tech.removeCount+=o,tech.tech[e].count=0,tech.totalCount-=o,tech.tech[e].isLost=!0,simulation.updateTechHUD(),o},junkChance:0,addJunkTechToPool:e=>(tech.junkChance+=e,(tech.junkChance<.001||void 0===tech.junkChance)&&(tech.junkChance=0),tech.junkChance>1&&(tech.junkChance=1),simulation.inGameConsole(`<strong>+${(100*e).toFixed(0)}%</strong> <span class='color-text'>JUNK</span><span class='color-var'>tech</span> chance (${(100*tech.junkChance).toFixed(0)}% total chance)`),e),removeJunkTechFromPool(e){tech.junkChance-=e,(tech.junkChance<.001||void 0===tech.junkChance)&&(tech.junkChance=0),tech.junkChance>1&&(tech.junkChance=1)},giveTech(e="random"){if("random"===e){let e=[];for(let o=0;o<tech.tech.length;o++)tech.tech[o].count<tech.tech[o].maxCount&&tech.tech[o].allowed()&&!tech.tech[o].isJunk&&!tech.tech[o].isLore&&!tech.tech[o].isBadRandomOption&&e.push(o);if(e.length>0){let o=e[Math.floor(Math.random()*e.length)];simulation.inGameConsole(`<span class='color-var'>tech</span>.giveTech("<strong class='color-text'>${tech.tech[o].name}</strong>")<em> //random tech</em>`),tech.giveTech(o)}}else{if(isNaN(e)){let o=!1;for(let t=0;t<tech.tech.length;t++)if(e===tech.tech[t].name){e=t,o=!0;break}if(!o)return}if(tech.isMetaAnalysis&&tech.tech[e].isJunk){simulation.inGameConsole("//tech: meta-analysis replaced junk tech with random tech"),tech.giveTech("random");for(let e=0;e<2;e++)powerUps.spawn(m.pos.x+40*Math.random(),m.pos.y+40*Math.random(),"research");return}if(tech.tech[e].isLost&&(tech.tech[e].isLost=!1),tech.isBanish&&tech.tech[e].isBanished&&(tech.tech[e].isBanished=!1),tech.isDamageFieldTech&&tech.tech[e].isFieldTech){const e=1.3;m.damageDone*=e,simulation.inGameConsole(`<span class='color-var'>tech</span>.damage *= ${e} //hidden-variable theory`)}if(tech.tech[e].effect(),tech.tech[e].count++,tech.tech[e].isInstant||tech.totalCount++,tech.isWiki){const o=tech.tech[e].name;(async function(e){const o=`https://en.wikipedia.org/w/api.php?action=opensearch&search=${encodeURIComponent(e).replace(/' /g,"%27")}&limit=1&namespace=0&format=json&origin=*`;try{const e=await fetch(o),t=await e.json();if(0===t[1].length)throw new Error("No matching pages found");const n=t[1][0],s=`https://en.wikipedia.org/w/api.php?action=query&prop=extracts&exintro&explaintext&titles=${encodeURIComponent(n)}&format=json&origin=*`,r=await fetch(s),a=(await r.json()).query.pages;return a[Object.keys(a)[0]].extract}catch(e){console.error("Error fetching Wikipedia intro:",e)}})(o).then(e=>{let t=window.open(`https://en.wikipedia.org/w/index.php?search=${encodeURIComponent(o).replace(/' /g,"%27")}&title=Special:Search`,"_blank");if(t){let n=setInterval(()=>{if(t.closed){clearInterval(n);const t=e.split(" "),s=7,r=Math.ceil(Math.random()*s),a=prompt(`On the wikipedia page for ${o} what is word ${r+1}?`);if(console.log(t[r]),t[r]){a&&a.toLowerCase()===t[r].toLowerCase().replace(/[^a-zA-Z]/g,"")?(powerUps.spawnDelay("research",4),simulation.inGameConsole("correct!",360)):simulation.inGameConsole(`<strong>${a}</strong> is wrong, it was <strong>${t[r]}</strong>`,360);let e='"';for(let o=0;o<s+3;o++)e+=o===r?`<strong>${t[o]}</strong> `:`${t[o]} `;simulation.inGameConsole(e+'..."',360)}else simulation.inGameConsole("hmmm  I'm not sure the answer, so I'll say it's correct!",360),powerUps.spawnDelay("research",3)}},1e3);setTimeout(()=>{t.close()},7e3)}})}requestAnimationFrame(()=>{if(e>0&&!build.isExperimentSelection){const[o]=tech.tech.splice(e,1);tech.tech.unshift(o)}simulation.updateTechHUD()})}},setCheating(){if(!simulation.isCheating){simulation.isCheating=!0,document.title="n-gon:"+level.levelAnnounce(),lore.techCount=0;for(let e=0,o=tech.tech.length;e<o;e++)tech.tech[e].isLore&&(tech.tech[e].frequency=0,tech.tech[e].count=0);console.log("cheating"),sound.tone(250),sound.tone(300),sound.tone(375)}},haveGunCheck(e,o=!0){if(null===b.activeGun||void 0===b.activeGun)return!1;if(build.isExperimentSelection||!o){for(i=0,len=b.inventory.length;i<len;i++)if(b.guns[b.inventory[i]].name===e)return!0;return!1}return b.inventory.length>0&&b.guns[b.activeGun].name===e},hasExplosiveDamageCheck:()=>tech.haveGunCheck("missiles")||4===m.fieldMode&&1===simulation.molecularMode||tech.missileBotCount>0||tech.isBoomBotUpgrade||tech.isIncendiary||tech.isPulseLaser||tech.isTokamak||tech.haveGunCheck("grenades")&&!tech.isNeutronBomb||tech.isExplodeContact,damageAdjustments(){let e=m.damageDone*m.fieldDamage*powerUps.difficulty.damageDone;if(level.isNoDamage&&m.cycle-180<level.noDamageCycle&&(e*=.3),tech.isMaxHealthDamage&&(m.health===m.maxHealth||tech.isEnergyHealth&&m.energy>m.maxEnergy-.01)&&(e*=2),tech.isNoDeath&&m.health<0&&(e*=3),tech.noDefenseSettingDamage&&1===m.defense()&&(e*=2.5),tech.isImmunityDamage&&m.immuneCycle>m.cycle&&(e*=3),tech.isPowerUpDamage&&(e*=1+.07*powerUp.length),tech.isDamageCooldown&&(e*=m.lastKillCycle+tech.isDamageCooldownTime>m.cycle?.4:4),tech.isDivisor&&void 0!==b.activeGun&&null!==b.activeGun&&b.guns[b.activeGun].ammo%3==0&&(e*=1.9),tech.isOffGroundDamage&&!m.onGround&&m.cycle-m.lastOnGroundCycle>65&&(e*=2.5),tech.isDilate&&(e*=1.9+1.1*Math.sin(.01*m.cycle)),tech.isGunChoice&&(e*=1+.4*b.inventory.length),powerUps.boost.endCycle>simulation.cycle&&(e*=1+powerUps.boost.damage),!m.coupling||0!==m.fieldMode&&5!==m.fieldMode||(e*=1+.025*m.coupling),tech.isVerlet&&(e*=3),tech.isTechDebt&&(e*=tech.totalCount>20?Math.pow(.85,tech.totalCount-20):4-.15*tech.totalCount),tech.isAnthropicDamage&&tech.isDeathAvoidedThisLevel&&(e*=2.71828),tech.isDupDamage&&(e*=1+Math.min(1,tech.duplicationChance())),tech.isDamageForGuns&&(e*=1+.22*Math.max(0,b.inventory.length-1)),tech.isOneGun&&b.inventory.length<2&&(e*=1.3),(tech.isAcidDmg&&m.health>1||tech.isEnergyHealth&&m.energy>1)&&(e*=1.35),tech.isRerollDamage&&(e*=1+Math.max(0,.05*powerUps.research.count)),tech.isBotDamage&&(e*=1+.04*b.totalBots()),tech.restDamage>1&&player.speed<1&&(e*=tech.restDamage),tech.isLowEnergyDamage&&(e*=1+.7*Math.max(0,m.maxEnergy-m.energy)),tech.energyDamage&&(e*=1+.23*m.energy*tech.energyDamage),tech.isDamageFromBulletCount&&(e*=1+.01*bullet.length),tech.isNoFireDamage&&m.cycle>m.fireCDcycle+120&&(e*=2),tech.isSpeedDamage&&(e*=1+Math.min(2,.033*(tech.speedAdded+player.speed))),tech.isAxion&&tech.isHarmDarkMatter&&(e*=tech.isMoveDarkMatter||tech.isNotDarkMatter?3.2:2),tech.isHarmDamage&&m.lastHarmCycle+240>m.cycle&&(e*=4),tech.lastHitDamage&&m.lastHit&&(e*=1+tech.lastHitDamage*m.lastHit),tech.isLowHealthDmg&&(e*=1+.6*Math.max(0,tech.isEnergyHealth?m.maxEnergy-m.energy:m.maxHealth-m.health)),tech.isJunkDNA&&(e*=1+2*(tech.junkChance+level.junkAdded)),tech.isDemineralize){const o=(simulation.cycle-tech.mineralLastCheck)/60;tech.mineralLastCheck=simulation.cycle,tech.mineralDamage=1+(tech.mineralDamage-1)*Math.pow(.9,o),tech.mineralDamageReduction=1-(1-tech.mineralDamageReduction)*Math.pow(.9,o),e*=tech.mineralDamage}return e},duplicationChance:()=>level.isNoDuplicate?0:Math.min(1,Math.max(0,(tech.isPowerUpsVanish?.13:0)+(tech.isStimulatedEmission?.2:0)+tech.duplication+tech.duplicateChance+.05*tech.isExtraGunField+m.duplicateChance+tech.fieldDuplicate+.08*tech.isDuplicateMobs+.03*tech.isMassProduction+.04*tech.isHealAttract+tech.cloakDuplication+(tech.isAnthropicTech&&tech.isDeathAvoidedThisLevel?.6:0)+.06*tech.isDupEnergy+tech.blockDupCount)),setTechFrequency(e,o){for(let t=0,n=tech.tech.length;t<n;t++)tech.tech[t].name===e&&(tech.tech[t].frequency=o)},setBotTechFrequency(e=0){for(let o=0,t=tech.tech.length;o<t;o++)if(tech.tech[o].isBotTech)switch(tech.tech[o].name){case"dynamo-bot":case"orbital-bot":case"laser-bot":case"boom-bot":case"foam-bot":case"nail-bot":tech.tech[o].frequency=e}},tech:[{name:"tungsten carbide",descriptionFunction:()=>`<strong>+600</strong> maximum <strong class='color-h'>health</strong><br>lose up to <strong>~${(60*m.defense()).toFixed(0)}</strong> <strong class='color-h'>health</strong> after hard <strong>landings</strong>`,maxCount:1,count:0,frequency:1,frequencyDefault:1,isSkin:!0,allowed:()=>!m.isAltSkin,requires:"not skin",effect(){tech.isFallingDamage=!0,m.setMaxHealth(),m.addHealth(6/simulation.healScale),m.skin.tungsten()},remove(){tech.isFallingDamage=!1,m.setMaxHealth(),this.count&&m.resetSkin()}},{name:"nitinol",description:"<strong>1.3x</strong> <strong>movement</strong> and <strong>jumping</strong><br><strong>0.17</strong> seconds of <strong>coyote time</strong> <em style ='float: right;'>(jumping after falling)</em>",maxCount:1,count:0,frequency:1,frequencyDefault:1,isSkin:!0,allowed:()=>!m.isAltSkin,requires:"not skinned",effect(){tech.isNitinol=!0,m.skin.mech(),m.setMovement()},remove(){tech.isNitinol=!1,this.count&&m.resetSkin()}},{name:"acoustic levitation",description:"<strong>0.7x</strong> <strong class='color-defense'>damage taken</strong><br><strong>+2</strong> seconds of <strong>coyote time</strong> <em style ='float: right;'>(jumping after falling)</em>",maxCount:3,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.isNitinol,requires:"nitinol",effect(){tech.isCoyote=!0,m.coyoteCycles+=120,m.damageReduction*=.7},remove(){tech.isCoyote=!1,this.count>0&&(m.damageReduction/=.7,tech.isNitinol&&m.skin.mech())}},{name:"Higgs mechanism",description:"<strong>4x</strong> <em>fire rate</em><br>while <strong>firing</strong> your <strong>position</strong> is fixed",maxCount:1,count:0,frequency:1,frequencyDefault:1,isSkin:!0,allowed:()=>!m.isAltSkin&&!m.isShipMode&&!tech.isAlwaysFire,requires:"not skinned, ship mode, automatic",effect(){tech.isFireMoveLock=!0,b.setFireCD(),b.setFireMethod(),m.skin.strokeGap()},remove(){tech.isFireMoveLock&&(tech.isFireMoveLock=!1,b.setFireCD(),b.setFireMethod(),m.resetSkin()),tech.isFireMoveLock=!1}},{name:"Verlet integration",description:"<strong>3x</strong> <strong class='color-d'>damage</strong><br>after mobs <strong>die</strong> advance time <strong>0.5</strong> seconds",maxCount:1,count:0,frequency:1,frequencyDefault:1,isSkin:!0,allowed:()=>!m.isAltSkin,requires:"not skinned",effect(){tech.isVerlet=!0,m.skin.verlet()},remove(){tech.isVerlet=!1,this.count&&m.resetSkin()}},{name:"Hilbert space",description:"<strong>3x</strong> <strong class='color-d'>damage</strong><br>after a <strong>collision</strong> enter an <strong class='alt'>alternate reality</strong>",maxCount:1,count:0,frequency:1,frequencyDefault:1,isAltRealityTech:!0,isSkin:!0,allowed:()=>!m.isAltSkin&&!tech.isResearchReality&&!tech.isSwitchReality,requires:"not skinned, Ψ(t) collapse, many-worlds",damage:3,effect(){m.skin.anodize(),m.damageDone*=this.damage,tech.isCollisionRealitySwitch=!0},remove(){tech.isCollisionRealitySwitch=!1,this.count&&m.alive&&(m.damageDone/=this.damage,m.resetSkin())}},{name:"aperture",description:"every <strong>4</strong> seconds your <strong class='color-d'>damage</strong> cycles<br>between <strong>0.8x</strong> and <strong>3x</strong> <strong class='color-d'>damage</strong>",maxCount:1,count:0,frequency:1,frequencyDefault:1,isSkin:!0,allowed:()=>!m.isAltSkin,requires:"not skinned",effect(){tech.isDilate=!0,m.skin.dilate()},remove(){tech.isDilate=!1,this.count&&(m.resetSkin(),tech.isDiaphragm&&m.skin.dilate2())}},{name:"diaphragm",description:"every <strong>4</strong> seconds your <strong class='color-defense'>damage taken</strong> cycles<br>between <strong>0.9x</strong> and <strong>0.2x</strong> <strong class='color-defense'>damage taken</strong>",maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.isDilate,requires:"aperture",effect(){tech.isDiaphragm=!0,m.resetSkin(),m.skin.dilate2()},remove(){tech.isDiaphragm=!1,this.count&&(m.resetSkin(),tech.isDilate&&m.skin.dilate())}},{name:"mass-energy equivalence",description:"<strong class='color-f'>energy</strong> protects you instead of <strong class='color-h'>health</strong><br><strong>1.5x</strong> <strong class='color-d'>damage</strong>",maxCount:1,count:0,frequency:1,frequencyDefault:1,isSkin:!0,allowed:()=>!(m.isAltSkin||tech.isPiezo||tech.isRewindAvoidDeath||tech.isAnnihilation||tech.isNoDeath),requires:"not piezoelectricity, CPT, annihilation, quantum Zeno effect",damage:1.5,effect(){m.damageDone*=this.damage,m.health=0,document.getElementById("health").style.display="none",document.getElementById("health-bg").style.display="none",document.getElementById("dmg").style.backgroundColor="#0cf",tech.isEnergyHealth=!0,simulation.mobDmgColor="rgba(0, 255, 255,0.6)",m.displayHealth(),m.lastCalculatedDefense=0,m.skin.energy()},remove(){this.count>0&&(m.damageDone/=this.damage,tech.isEnergyHealth=!1,tech.isEnergyHealth?(document.getElementById("health").style.display="none",document.getElementById("health-bg").style.display="none"):level.isHideHealth||(document.getElementById("health").style.display="inline",document.getElementById("health-bg").style.display="inline"),document.getElementById("dmg").style.backgroundColor="#f67",m.health=Math.max(Math.min(m.maxHealth,m.energy),.1),simulation.mobDmgColor="rgba(255,0,0,0.7)",m.displayHealth(),m.lastCalculatedDefense=0,m.resetSkin()),tech.isEnergyHealth=!1}},{name:"1st ionization energy",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Ionization_energy\' class="link">1st ionization energy</a>',descriptionFunction:()=>`convert current and future <div class="heal-circle"></div> into <div class="heal-circle" style="background-color: #ff0; border: 0.5px #000 solid;"></div><br><div class="heal-circle" style="background-color: #ff0; border: 0.5px #000 solid;"></div> give <strong>+${15*tech.largerHeals*(tech.isHalfHeals?.5:1)}</strong> maximum <strong class='color-f'>energy</strong>`,maxCount:1,count:0,frequency:5,frequencyDefault:5,allowed:()=>tech.isEnergyHealth&&!tech.isOverHeal,requires:"mass-energy equivalence, not quenching",effect(){powerUps.healGiveMaxEnergy=!0,powerUps.heal.color="#ff0";for(let e=0;e<powerUp.length;e++)"heal"===powerUp[e].name&&(powerUp[e].color=powerUps.heal.color)},remove(){powerUps.healGiveMaxEnergy=!1,powerUps.heal.color="#0eb";for(let e=0;e<powerUp.length;e++)"heal"===powerUp[e].name&&(powerUp[e].color=powerUps.heal.color)}},{name:"depolarization",descriptionFunction:()=>`<strong>4x</strong> <strong class='color-d'>damage</strong>, but if a mob <strong>dies</strong><br><strong>0.4x</strong> <strong class='color-d'>damage</strong> for <strong>${(tech.isDamageCooldownTime/60).toFixed(1)}</strong> seconds instead`,maxCount:1,count:0,frequency:1,frequencyDefault:1,isSkin:!0,allowed:()=>!m.isAltSkin,requires:"not skinned",effect(){m.skin.polar(),tech.isDamageCooldown=!0},remove(){tech.isDamageCooldown=!1,this.count&&m.resetSkin()}},{name:"repolarization",descriptionFunction:()=>"the <strong class= 'color-d'> damage</strong> from <strong> depolarization</strong> <br>resets <strong>1.25</strong> seconds sooner after a mob <strong>dies</strong>",maxCount:3,count:0,frequency:4,frequencyDefault:4,allowed:()=>tech.isDamageCooldown,requires:"depolarization",effect(){tech.isDamageCooldownTime-=75},remove(){tech.isDamageCooldownTime=240}},{name:"CPT symmetry",descriptionFunction:()=>`after losing <strong class='color-h'>health</strong>, if you have above <strong>${(85*Math.min(1,m.maxEnergy)).toFixed(0)}</strong> <strong class='color-f'>energy</strong><br><strong>rewind</strong> time for <strong>20</strong> <strong class='color-f'>energy</strong> per second`,maxCount:1,count:0,frequency:1,frequencyDefault:1,isSkin:!0,allowed:()=>!m.isAltSkin&&"standing wave"!==m.fieldUpgrades[m.fieldMode].name&&!tech.isEnergyHealth,requires:"not skinned, standing wave, max energy reduction, retrocausality, mass-energy",effect(){tech.isRewindAvoidDeath=!0,m.skin.CPT()},remove(){tech.isRewindAvoidDeath=!1,this.count&&m.resetSkin()}},{name:"causality bots",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Causality\' class="link">causality bots</a>',description:"when CPT <strong>rewinds</strong> build scrap <strong class='color-bot'>bots</strong><br>that protect you for about <strong>9</strong> seconds",maxCount:3,count:0,frequency:2,frequencyDefault:2,isBotTech:!0,allowed:()=>tech.isRewindAvoidDeath,requires:"CPT",effect(){tech.isRewindBot++},remove(){tech.isRewindBot=0}},{name:"causality bombs",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Causality\' class="link">causality bombs</a>',description:"when CPT <strong>rewinds</strong> drop several <strong>grenades</strong>",maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.isRewindAvoidDeath,requires:"CPT",effect(){tech.isRewindGrenade=!0},remove(){tech.isRewindGrenade=!1}},{name:"ternary",descriptionFunction:()=>`<strong>1.9x</strong> <strong class='color-d'>damage</strong> while your <strong class='color-ammo'>ammo</strong><br>is evenly <strong>divisible</strong> by <strong>3</strong><em style ="float: right;">(${void 0!==b.activeGun&&null!==b.activeGun&&b.guns[b.activeGun].ammo%3==0?"1.9":"1"}x)</em>`,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!0,requires:"",effect(){tech.isDivisor=!0},remove(){tech.isDivisor=!1}},{name:"integrated armament",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Weapon\' class="link">integrated armament</a>',description:`<span style='font-size:95%;'><strong>1.3x</strong> <strong class='color-d'>damage</strong>, but new ${powerUps.orb.gun()} replace<br>current ${powerUps.orb.gun()} and convert your ${powerUps.orb.gunTech()}</span>`,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>1===b.inventory.length,requires:"only 1 gun",effect(){tech.isOneGun=!0},remove(){tech.isOneGun=!1}},{name:"ordnance",description:`spawn ${powerUps.orb.gun()} and get <strong>2x</strong> <em class='flicker'>frequency</em> for ${powerUps.orb.gunTech()}<br><strong>+6%</strong> chance for <strong class='color-junk'>JUNK</strong> <strong class='color-choice'><span>ch</span><span>oi</span><span>ces</span></strong>`,maxCount:1,count:0,frequency:1,frequencyDefault:1,isInstant:!0,isBadRandomOption:!0,allowed:()=>tech.junkChance<1,requires:"",effect(){powerUps.spawn(m.pos.x,m.pos.y,"gun");for(let e=0,o=tech.tech.length;e<o;e++)tech.tech[e].isGunTech&&(tech.tech[e].frequency*=2);this.refundAmount+=tech.addJunkTechToPool(.06)},refundAmount:0,remove(){this.count>0&&this.refundAmount>0&&(tech.removeJunkTechFromPool(this.refundAmount),this.refundAmount=0)}},{name:"arsenal",descriptionFunction:()=>`for each unused ${powerUps.orb.gun()} in your inventory<br><strong>1.25x</strong> <strong class='color-d'>damage</strong> <em style ="float: right;">(${(1+.25*Math.max(0,b.inventory.length-1)).toFixed(2)}x)</em>`,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>b.inventory.length>1,requires:"at least 2 guns",effect(){tech.isDamageForGuns=!0},remove(){tech.isDamageForGuns=!1}},{name:"active cooling",descriptionFunction:()=>`for each unused ${powerUps.orb.gun()} in your inventory<br><strong>1.25x</strong> <em>fire rate</em> <em style ="float: right;">(${(1/Math.pow(.8,Math.max(0,b.inventory.length-1))).toFixed(2)}x)</em>`,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>b.inventory.length>1,requires:"at least 2 guns",effect(){tech.isFireRateForGuns=!0,b.setFireCD()},remove(){tech.isFireRateForGuns=!1,b.setFireCD()}},{name:"pigeonhole principle",descriptionFunction:()=>`<strong>1.4x</strong> <strong class='color-d'>damage</strong> per ${powerUps.orb.gun()}, but your active ${powerUps.orb.gun()}<br>cycles each level and you can't <strong>switch</strong>`,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>b.inventory.length>1,requires:"at least 2 guns",effect(){tech.isGunChoice=!0},remove(){tech.isGunChoice=!1}},{name:"generalist",description:`spawn <strong>7</strong> ${powerUps.orb.gun()}, but your equipped ${powerUps.orb.gun()}<br>cycles each level and you can't <strong>switch</strong>`,maxCount:1,count:0,frequency:1,frequencyDefault:1,isInstant:!0,isBadRandomOption:!0,allowed:()=>b.inventory.length<b.guns.length-5&&b.inventory.length>1,requires:"you have at least 2 guns and 5 unclaimed guns",effect(){tech.isGunCycle=!0;for(let e=0;e<7;e++)powerUps.spawn(m.pos.x+10*Math.random(),m.pos.y+10*Math.random(),"gun")},remove(){tech.isGunCycle=!1}},{name:"ad hoc",descriptionFunction:()=>`spawn a ${powerUps.orb.heal()}, ${powerUps.orb.research()}, ${powerUps.orb.ammo()}, ${powerUps.orb.tech()}, ${powerUps.orb.gun()}, or ${powerUps.orb.field()}<br>for each ${powerUps.orb.gun()} in your inventory`,maxCount:1,count:0,frequency:1,frequencyDefault:1,isInstant:!0,allowed:()=>b.inventory.length>1,requires:"at least 2 guns",effect(){for(let e=0;e<b.inventory.length;e++)Math.random()<1/6?powerUps.spawn(m.pos.x+10*Math.random(),m.pos.y+10*Math.random(),"gun"):Math.random()<.2?powerUps.spawn(m.pos.x+10*Math.random(),m.pos.y+10*Math.random(),"tech"):Math.random()<1/4?powerUps.spawn(m.pos.x+10*Math.random(),m.pos.y+10*Math.random(),"field"):Math.random()<1/3?powerUps.spawn(m.pos.x+10*Math.random(),m.pos.y+10*Math.random(),"heal"):Math.random()<.5?powerUps.spawn(m.pos.x+10*Math.random(),m.pos.y+10*Math.random(),"ammo"):powerUps.spawn(m.pos.x+10*Math.random(),m.pos.y+10*Math.random(),"research")},remove(){}},{name:"applied science",description:`get a random ${powerUps.orb.gunTech()}<br>for each ${powerUps.orb.gun()} in your inventory`,maxCount:1,count:0,isInstant:!0,frequency:2,frequencyDefault:2,allowed:()=>b.inventory.length>1,requires:"at least 2 guns",effect(){let e=30*b.inventory.length,o=-1,t=()=>{if(e>0&&(m.alive&&requestAnimationFrame(t),!(simulation.paused||simulation.isChoosing||(e--,e%30)))){o++;const e=[];for(let t=0,n=tech.tech.length;t<n;t++){const n=b.activeGun;if(b.activeGun=b.inventory[o],tech.tech[t].isGunTech&&tech.tech[t].allowed()&&!tech.tech[t].isJunk&&!tech.tech[t].isBadRandomOption&&tech.tech[t].count<tech.tech[t].maxCount){const n=tech.tech[t].requires.search(b.guns[b.inventory[o]].name),s=tech.tech[t].requires.search(" not ");-1!==n&&(-1===s||s>n)&&e.push(t)}b.activeGun=n,b.guns[b.activeGun].have||(0===b.inventory.length?b.activeGun=null:b.activeGun=b.inventory[0],b.inventoryGun=0)}if(e.length){const o=Math.floor(Math.random()*e.length);simulation.inGameConsole(`<span class='color-var'>tech</span>.giveTech("<strong class='color-text'>${tech.tech[e[o]].name}</strong>")`,360),tech.giveTech(e[o]),simulation.boldActiveGunHUD()}}};requestAnimationFrame(t)},remove(){}},{name:"supply chain",descriptionFunction:()=>`spawn ${powerUps.orb.gun()} ${powerUps.orb.ammo(10)}`,maxCount:9,count:0,isInstant:!0,frequency:1,frequencyDefault:1,allowed:()=>!0,requires:"",effect(){powerUps.spawnDelay("ammo",10),powerUps.spawn(m.pos.x,m.pos.y,"gun")},remove(){}},{name:"marginal utility",descriptionFunction(){return 0===this.count&&(this.gun=Math.floor(Math.random()*(b.guns.length-1))),`<strong>2x</strong> <strong class='color-ammo'>ammo</strong> per ${powerUps.orb.ammo(1)} for <strong class='color-g'>${b.guns[this.gun].name}</strong>`},maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!0,requires:"",gun:void 0,effect(){void 0===this.gun&&(this.gun=Math.floor(Math.random()*(b.guns.length-1))),simulation.inGameConsole(`${b.guns[this.gun].ammoPack} → ${2*b.guns[this.gun].ammoPack} average <strong class='color-ammo'>ammo</strong> per ${powerUps.orb.ammo(1)} for <strong class='color-g'>${b.guns[this.gun].name}</strong>`),b.guns[this.gun].ammoPack*=2},remove(){this.count&&(b.guns[this.gun].ammoPack/=2)}},{name:"Pareto efficiency",descriptionFunction:()=>`all your ${powerUps.orb.gun()} randomly get<br><strong>5x</strong> or <strong>0.2x</strong> <strong class='color-ammo'>ammo</strong> per ${powerUps.orb.ammo(1)}`,maxCount:1,count:0,frequency:1,frequencyDefault:1,isBadRandomOption:!0,allowed:()=>b.inventory.length>2,requires:"at least 3 guns",effect(){let e=[];for(let o=0;o<b.inventory.length;o++)e.push(b.inventory[o]);e.sort(()=>Math.random()-.5);for(let o=0;o<e.length;o++){const t=e[o],n=o<e.length/2?4:.25;simulation.inGameConsole(`${b.guns[t].ammoPack.toFixed(1)} <span ${n<1?'style="color: #f00;"':""}>→</span> ${(b.guns[t].ammoPack*n).toFixed(1)} average <strong class='color-ammo'>ammo</strong> per ${powerUps.orb.ammo(1)} for <strong class='color-g'>${b.guns[t].name}</strong>`,1/0),b.guns[t].ammoPack*=n}},remove(){}},{name:"logistics",description:`<strong>2x</strong> <strong class='color-ammo'>ammo</strong> per ${powerUps.orb.ammo()}, but<br><strong class='color-ammo'>ammo</strong> is only added to your current ${powerUps.orb.gun()}`,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!tech.isEnergyNoAmmo,requires:"not non-renewables",effect(){tech.isAmmoForGun=!0},remove(){tech.isAmmoForGun=!1}},{name:"cache",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Cache_(computing)\' class="link">cache</a>',description:`<strong>15x</strong> <strong class='color-ammo'>ammo</strong> per ${powerUps.orb.ammo()}, but<br>you can't <strong>store</strong> additional <strong class='color-ammo'>ammo</strong>`,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!tech.isEnergyNoAmmo,requires:"not non-renewables",effect(){tech.ammoCap=15,powerUps.ammo.effect()},remove(){tech.ammoCap=0}},{name:"catabolism",descriptionFunction:()=>`if you fire while <strong>out</strong> of <strong class='color-ammo'>ammo</strong><br>spawn ${powerUps.orb.ammo(4)} and ${tech.isEnergyHealth?"<strong>–4</strong> maximum <strong class='color-f'>energy</strong>":"<strong>–2</strong> maximum <strong class='color-h'>health</strong>"}`,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!tech.isEnergyNoAmmo,requires:"not non-renewables",effect(){tech.isAmmoFromHealth=!0},remove(){tech.isAmmoFromHealth=!1}},{name:"non-renewables",description:`<strong>2.5x</strong> <strong class='color-d'>damage</strong>, but you can't pickup ${powerUps.orb.ammo()}<br><span class='color-remove'>eject</span> this if <strong class='color-h'>health</strong> <strong>></strong> <strong>33</strong>`,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!tech.isAmmoFromHealth&&!tech.isBoostReplaceAmmo&&m.health>.33,requires:"health > 33, not catabolism, quasiparticles",damage:2.5,effect(){m.damageDone*=this.damage,tech.isEnergyNoAmmo=!0,powerUps.ammo.color="#c1c6c9";for(let e=0;e<powerUp.length;e++)"ammo"===powerUp[e].name&&(powerUp[e].color=powerUps.ammo.color)},remove(){this.count&&m.alive&&(m.damageDone/=this.damage),tech.isEnergyNoAmmo=!1,powerUps.ammo.color="#467";for(let e=0;e<powerUp.length;e++)"ammo"===powerUp[e].name&&(powerUp[e].color=powerUps.ammo.color)}},{name:"desublimated ammunition",description:"alternating shots cost <strong>0</strong> <strong class='color-ammo'>ammo</strong> while <strong>crouched</strong><br><span class='color-remove'>eject</span> this if <strong class='color-h'>health</strong> <strong>></strong> <strong>33</strong>",maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!0,requires:"",effect(){tech.crouchAmmoCount=!0},remove(){tech.crouchAmmoCount=!1}},{name:"gun turret",description:"if <strong>crouching</strong><br><strong>0.3x</strong> <strong class='color-defense'>damage taken</strong>",maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!0,requires:"",effect(){tech.isTurret=!0},remove(){tech.isTurret=!1}},{name:"dead reckoning",description:"if your <strong class=\"color-speed\">speed</strong> is 0<br><strong>1.5x</strong> <strong class='color-d'>damage</strong>",maxCount:9,count:0,frequency:1,frequencyDefault:1,allowed:()=>!0,requires:"",effect(){tech.restDamage+=.5},remove(){tech.restDamage=1}},{name:"aerostat",descriptionFunction(){const e=tech.isOffGroundDamage&&!m.onGround&&m.cycle-m.lastOnGroundCycle>65?2.5:1;return`<strong>2.5x</strong> <strong class='color-d'>damage</strong> while <strong>off</strong> the <strong>ground</strong><br><em>for <strong>></strong> <strong>1</strong> second</em>${this.count?`<em style ="float: right;">(${e.toFixed(0)}x)</em>`:""}`},maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!0,requires:"",effect(){tech.isOffGroundDamage=!0},remove(){tech.isOffGroundDamage=!1}},{name:"kinetic bombardment",description:"far away mobs take more <strong class='color-d'>damage</strong><br>up to <strong>1.3x</strong> <strong class='color-d'>damage</strong> at <strong>3000</strong> displacement",maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!0,requires:"",effect(){tech.isFarAwayDmg=!0},remove(){tech.isFarAwayDmg=!1}},{name:"microstates",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Microstate_(statistical_mechanics)\' class="link">microstates</a>',descriptionFunction:()=>`<strong>1.01x</strong> <strong class='color-d'>damage</strong><span style ="float: right;"><span class="underline">expend</span> ${powerUps.orb.research(3)}</span><br>per <strong>bullet</strong> or <strong class='color-bot'>bot</strong> <em style ="float: right;">(${(1+.01*bullet.length).toFixed(2)}x)</em>`,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>powerUps.research.count>2||build.isExperimentSelection,requires:"",effect(){tech.isDamageFromBulletCount=!0,powerUps.research.expend(3)},remove(){tech.isDamageFromBulletCount=!1,this.count>0&&powerUps.research.changeRerolls(3)}},{name:"regression",description:"bullet <strong>collisions</strong> increase <strong>vulnerability</strong> to<br><strong class='color-d'>damage</strong> by <strong>1.05x</strong> for mobs and <strong>+1.025x</strong> for bosses",maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!0,requires:"",effect(){tech.isLessDamageReduction=!0},remove(){tech.isLessDamageReduction=!1}},{name:"simulated annealing",description:"<strong>1.2x</strong> <strong class='color-d'>damage</strong><br><strong>0.8x</strong> <em>fire rate</em>",maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!0,requires:"",damage:1.2,effect(){m.damageDone*=this.damage,tech.slowFire=1.25,b.setFireCD()},remove(){this.count&&m.alive&&(m.damageDone/=this.damage),tech.slowFire=1,b.setFireCD()}},{name:"combinatorial optimization",description:`<strong>1.4x</strong> <strong class='color-d'>damage</strong><span style="float:right;"><span class="underline">expend</span> ${powerUps.orb.research(2)}</span><br><strong>0.7x</strong> <em>fire rate</em>`,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>powerUps.research.count>1||build.isExperimentSelection,requires:"",damage:1.4,effect(){m.damageDone*=this.damage,tech.slowFireDamage=1.42,b.setFireCD(),powerUps.research.expend(2)},remove(){this.count&&m.alive&&(m.damageDone/=this.damage,powerUps.research.changeRerolls(2)),tech.slowFireDamage=1,b.setFireCD()}},{name:"heuristics",descriptionFunction(){let e=1;for(let o=0;o<this.totalRate.length;o++)e*=this.totalRate[o];let o="";return this.count&&(o=`<em style ="float: right;">(${e.toFixed(2)}x)</em>`),"randomly gain between <strong>1x</strong> and <strong>2x</strong> <em>fire rate</em><br><strong>+5%</strong> chance for <strong class='color-junk'>JUNK</strong> <strong class='color-choice'><span>ch</span><span>oi</span><span>ces</span></strong>"+o},maxCount:9,count:0,frequency:1,frequencyDefault:1,allowed:()=>tech.junkChance<1,requires:"",totalRate:[],effect(){const e=Math.floor(100*(Math.random()+1))/100;tech.fireRate/=e,this.totalRate.push(e),b.setFireCD(),simulation.inGameConsole(`<span class='color-var'>tech</span>.fireRate *= ${e} //heuristics`),this.refundAmount+=tech.addJunkTechToPool(.05)},refundAmount:0,remove(){this.count&&this.refundAmount>0&&(tech.removeJunkTechFromPool(this.refundAmount),this.refundAmount=0),tech.fireRate=1,this.totalRate.length=0,b.setFireCD()}},{name:"mechatronics",descriptionFunction(){let e=1;for(let o=0;o<this.damageSoFar.length;o++)e*=this.damageSoFar[o];let o="";return this.count&&(o=`<br><em style ="float: right;">(${e.toFixed(2)}x)</em>`),"randomly gain between <strong>1x</strong> and <strong>1.3x</strong> <strong class='color-d'>damage</strong>"+o},maxCount:9,count:0,frequency:1,frequencyDefault:1,allowed:()=>!0,requires:"",damageSoFar:[],effect(){const e=Math.floor(100*(.3*Math.random()+1))/100;m.damageDone*=e,this.damageSoFar.push(e),simulation.inGameConsole(`<span class='color-var'>tech</span>.damage *= ${e} //mechatronics`)},remove(){if(this.count&&m.alive)for(let e=0;e<this.damageSoFar.length;e++)m.damageDone/=this.damageSoFar[e];this.damageSoFar.length=0}},{name:"dynamical systems",description:`<strong>1.3x</strong> <strong class='color-d'>damage</strong> <span style ="float: right;"><span class="underline">expend</span> ${powerUps.orb.research(2)}</span>`,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>powerUps.research.count>1||build.isExperimentSelection,requires:"",damage:1.3,effect(){m.damageDone*=this.damage,tech.isCloakingDamage=!0,powerUps.research.expend(2)},remove(){tech.isCloakingDamage=!1,this.count&&m.alive&&(m.damageDone/=this.damage,powerUps.research.changeRerolls(2))}},{name:"anti-shear topology",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Topology\' class="link">anti-shear topology</a>',description:"your bullets last <strong>1.3x</strong> <strong>longer</strong>",maxCount:3,count:0,frequency:1,frequencyDefault:1,allowed:()=>!0,requires:"",effect(){tech.bulletsLastLonger+=.3},remove(){tech.bulletsLastLonger=1}},{name:"fracture analysis",description:"if a mob is <strong>stunned</strong> it takes<br><strong>5x</strong> <strong class='color-d'>damage</strong> from bullet impacts",maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.isStunField||tech.oneSuperBall||tech.isCloakStun||tech.isOrbitBotUpgrade||tech.isStun,requires:"a stun effect",effect(){tech.isCrit=!0},remove(){tech.isCrit=!1}},{name:"remineralization",descriptionFunction(){const e=(simulation.cycle-tech.mineralLastCheck)/60;return tech.mineralLastCheck=simulation.cycle,tech.mineralDamage=1+(tech.mineralDamage-1)*Math.pow(.9,e),tech.mineralDamageReduction=1-(1-tech.mineralDamageReduction)*Math.pow(.9,e),`after <strong>mobs</strong> <strong>die</strong> gain <strong>0.85x</strong> <strong class='color-defense'>damage taken</strong><br>effects stack, but fade <strong>10%</strong> every second<em style ="float: right;">(${tech.mineralDamageReduction.toFixed(2)}x)</em>`},maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!0,requires:"",effect(){tech.isRemineralize=!0,tech.mineralDamageReduction=1,tech.mineralLastCheck=simulation.cycle},remove(){tech.isRemineralize=!1,tech.mineralDamageReduction=1,tech.mineralLastCheck=simulation.cycle}},{name:"demineralization",descriptionFunction(){const e=(simulation.cycle-tech.mineralLastCheck)/60;return tech.mineralLastCheck=simulation.cycle,tech.mineralDamage=1+(tech.mineralDamage-1)*Math.pow(.9,e),tech.mineralDamageReduction=1-(1-tech.mineralDamageReduction)*Math.pow(.9,e),`after <strong>mobs</strong> <strong>die</strong> gain <strong>1.08x</strong> <strong class='color-d'>damage</strong><br>effects stack, but fade <strong>10%</strong> every second<em style ="float: right;">(${tech.mineralDamage.toFixed(2)}x)</em>`},maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>!0,requires:"",effect(){tech.isDemineralize=!0,tech.mineralDamage=1,tech.mineralLastCheck=simulation.cycle},remove(){tech.isDemineralize=!1,tech.mineralDamage=1,tech.mineralLastCheck=simulation.cycle}},{name:"shear stress",description:"after mobs <strong>die</strong><br>they fire a <strong>nail</strong> at nearby mobs",maxCount:9,count:0,frequency:1,frequencyDefault:1,allowed:()=>!0,requires:"",effect(){tech.nailsDeathMob++},remove(){tech.nailsDeathMob=0}},{name:"thermal runaway",description:"after mobs <strong>die</strong> they <strong class='color-e'>explode</strong>",maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!0,requires:"",effect(){tech.isExplodeMob=!0},remove(){tech.isExplodeMob=!1}},{name:"zoospore vector",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Disease_vector\' class="link">zoospore vector</a>',descriptionFunction:()=>`after mobs <strong>die</strong> there is a <strong>13%</strong> chance<br>they grow ${b.guns[6].nameString("s")}`,maxCount:9,count:0,frequency:1,frequencyDefault:1,allowed:()=>!0,requires:"",effect(){tech.sporesOnDeath+=.13},remove(){tech.sporesOnDeath=0}},{name:"exciton",descriptionFunction:()=>`<span style = 'font-size:94%;'>after mobs <strong>die</strong> they have a <strong>+14%</strong> chance to<br>spawn ${powerUps.orb.boost(1)} that give <strong>${(1+powerUps.boost.damage).toFixed(2)}x</strong> <strong class='color-d'>damage</strong> for <strong>${(powerUps.boost.duration/60).toFixed(0)}</strong> seconds</span>`,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!0,requires:"",effect(){tech.isBoostPowerUps=!0},remove(){tech.isBoostPowerUps=!1}},{name:"band gap",descriptionFunction:()=>`${powerUps.orb.boost(1)} give an additional <strong>${1.75.toFixed(2)}x</strong> <strong class='color-d'>damage</strong><br>but their <strong>duration</strong> is reduced by <strong>1</strong> second`,maxCount:9,count:1,frequency:2,frequencyDefault:2,allowed:()=>tech.isBoostPowerUps||tech.isBoostReplaceAmmo||tech.isPlasmaBoost,requires:"exciton, quasiparticles, dielectric",effect(){powerUps.boost.duration-=60,powerUps.boost.damage+=.75},remove(){powerUps.boost.duration=600,powerUps.boost.damage=1.25}},{name:"polariton",descriptionFunction:()=>`${powerUps.orb.boost(1)} also give <strong>0.3x</strong> <strong class='color-defense'>damage taken</strong><br>for <strong>${(powerUps.boost.duration/60).toFixed(0)}</strong> seconds</span>`,maxCount:1,count:1,frequency:2,frequencyDefault:2,allowed:()=>tech.isBoostPowerUps||tech.isBoostReplaceAmmo||tech.isPlasmaBoost,requires:"exciton, quasiparticles, dielectric",effect(){powerUps.boost.isDefense=!0},remove(){powerUps.boost.isDefense=!1}},{name:"collider",descriptionFunction:()=>"after mobs <strong>die</strong> existing <strong>power ups</strong><br><strong>collide</strong> to form new <strong>power ups</strong>",maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!0,requires:"",effect(){tech.collidePowerUps=!0},remove(){tech.collidePowerUps=!1}},{name:"bubble fusion",descriptionFunction:()=>`after destroying a mob's <strong>shield</strong><br>spawn <strong>1-2</strong> ${powerUps.orb.heal()}, ${powerUps.orb.ammo()}, or ${powerUps.orb.research(1)} <em style ="float: right;">(once per mob)</em>`,maxCount:1,count:0,frequency:1,frequencyDefault:1,isHealTech:!0,allowed:()=>!0,requires:"",effect(){tech.isShieldAmmo=!0},remove(){tech.isShieldAmmo=!1}},{name:"enthalpy",descriptionFunction:()=>`<strong>8%</strong> chance to spawn ${powerUps.orb.heal(1)} after mobs <strong>die</strong>`,maxCount:9,count:0,frequency:1,frequencyDefault:1,isHealTech:!0,allowed:()=>!0,requires:"",effect(){tech.healSpawn+=.08},remove(){tech.healSpawn=0}},{name:"cascading failure",description:"<strong>3x</strong> <strong class='color-d'>damage</strong> to <strong>mobs</strong> below <strong>25%</strong> <strong>durability</strong>",maxCount:1,count:0,frequency:3,frequencyDefault:3,allowed:()=>tech.mobSpawnWithHealth>0,requires:"reaction inhibitor",effect(){tech.isMobLowHealth=!0},remove(){tech.isMobLowHealth=!1}},{name:"reaction inhibitor",description:"<strong>mobs</strong> spawn with <strong>0.88x</strong> initial <strong>durability</strong>",maxCount:3,count:0,frequency:1,frequencyDefault:1,allowed:()=>!tech.isMobFullHealthCloak,requires:"not topological defect",effect(){tech.mobSpawnWithHealth++,mobs.setMobSpawnHealth();for(let e=0;e<mob.length;e++)mob.health>mobs.mobSpawnWithHealth&&(mob.health=mobs.mobSpawnWithHealth)},remove(){tech.mobSpawnWithHealth=0,mobs.setMobSpawnHealth()}},{name:"scrap bots",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Scrap\' class="link">scrap bots</a>',description:"after mobs <strong>die</strong> you have a <strong>33%</strong> chance to<br>construct scrap <strong class='color-bot'>bots</strong> that operate for <strong>15</strong> seconds",maxCount:3,count:0,frequency:1,frequencyDefault:1,isBotTech:!0,allowed:()=>!(tech.sporesOnDeath||tech.nailsDeathMob||tech.isExplodeMob||tech.isMobBlockFling||tech.iceIXOnDeath),requires:"no other mob death tech",effect(){tech.botSpawner+=.33},remove(){tech.botSpawner=0}},{name:"scrap refit",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Scrap\' class="link">scrap refit</a>',description:"after mobs <strong>die</strong> reset scrap <strong class='color-bot'>bots</strong><br>to <strong>15</strong> seconds of operation",maxCount:1,count:0,frequency:3,frequencyDefault:3,isBotTech:!0,allowed:()=>tech.botSpawner,requires:"scrap bots",effect(){tech.isBotSpawnerReset=!0},remove(){tech.isBotSpawnerReset=!1}},{name:"nail-bot",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Robot\' class="link">nail-bot</a>',description:"construct a <strong class='color-bot'>bot</strong> that fires <strong>nails</strong> at mobs",maxCount:9,count:0,frequency:1,frequencyDefault:1,isBot:!0,isBotTech:!0,allowed:()=>!0,requires:"",effect(){tech.nailBotCount++,b.nailBot()},remove(){this.count&&(tech.nailBotCount-=this.count,b.clearPermanentBots(),b.respawnBots())}},{name:"nail-bot upgrade",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Robot\' class="link">nail-bot upgrade</a>',description:"<strong>convert</strong> your <strong class='color-bot'>bots</strong> to <strong class='color-bot'>nail-bots</strong><br><strong>4x</strong> <em>fire rate</em> and <strong>1.4x</strong> nail <strong>velocity</strong>",maxCount:1,count:0,frequency:3,frequencyDefault:3,isBotTech:!0,allowed:()=>tech.nailBotCount>1&&!b.hasBotUpgrade(),requires:"2 or more nail bots and no other bot upgrade",effect(){tech.isNailBotUpgrade=!0,b.convertBotsTo("nail-bot");for(let e=0;e<bullet.length;e++)"nail"===bullet[e].botType&&(bullet[e].isUpgraded=!0);tech.setBotTechFrequency(),tech.setTechFrequency("nail-bot",5)},remove(){if(this.count){for(let e=0;e<bullet.length;e++)"nail"===bullet[e].botType&&(bullet[e].isUpgraded=!1);tech.setBotTechFrequency(1)}tech.isNailBotUpgrade=!1}},{name:"foam-bot",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Robot\' class="link">foam-bot</a>',description:"construct a <strong class='color-bot'>bot</strong> that sprays sticky <strong>foam</strong> at mobs",maxCount:9,count:0,frequency:1,frequencyDefault:1,isBot:!0,isBotTech:!0,allowed:()=>!0,requires:"",effect(){tech.foamBotCount++,b.foamBot()},remove(){this.count&&(tech.foamBotCount-=this.count,b.clearPermanentBots(),b.respawnBots())}},{name:"foam-bot upgrade",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Robot\' class="link">foam-bot upgrade</a>',description:"<strong>convert</strong> your <strong class='color-bot'>bots</strong> to <strong class='color-bot'>foam-bots</strong><br><strong>2.5x</strong> foam <strong>size</strong> and <em>fire rate</em>",maxCount:1,count:0,frequency:3,frequencyDefault:3,isBotTech:!0,allowed:()=>tech.foamBotCount>1&&!b.hasBotUpgrade(),requires:"2 or more foam bots and no other bot upgrade",effect(){tech.isFoamBotUpgrade=!0,b.convertBotsTo("foam-bot");for(let e=0;e<bullet.length;e++)"foam"===bullet[e].botType&&(bullet[e].isUpgraded=!0);tech.setBotTechFrequency(),tech.setTechFrequency("foam-bot",5)},remove(){if(this.count){for(let e=0;e<bullet.length;e++)"foam"===bullet[e].botType&&(bullet[e].isUpgraded=!1);tech.setBotTechFrequency(1)}tech.isFoamBotUpgrade=!1}},{name:"sound-bot",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Robot\' class="link">sound-bot</a>',description:"construct a <strong class='color-bot'>bot</strong> that emits expanding<br>arcs of <strong>sound</strong> aimed towards nearby mobs",maxCount:9,count:0,frequency:1,frequencyDefault:1,isBot:!0,isBotTech:!0,allowed:()=>!0,requires:"",effect(){tech.soundBotCount++,b.soundBot()},remove(){this.count&&(tech.soundBotCount-=this.count,b.clearPermanentBots(),b.respawnBots())}},{name:"sound-bot upgrade",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Robot\' class="link">sound-bot upgrade</a>',description:"<strong>convert</strong> your <strong class='color-bot'>bots</strong> to <strong class='color-bot'>sound-bots</strong><br><strong>6x</strong> wave <strong class='color-d'>damage</strong>",maxCount:1,count:0,frequency:3,frequencyDefault:3,isBotTech:!0,allowed:()=>tech.soundBotCount>1&&!b.hasBotUpgrade(),requires:"2 or more sound bots and no other bot upgrade",effect(){tech.isSoundBotUpgrade=!0,b.convertBotsTo("sound-bot");for(let e=0;e<bullet.length;e++)"sound"===bullet[e].botType&&(bullet[e].isUpgraded=!0);tech.setBotTechFrequency(),tech.setTechFrequency("sound-bot",5)},remove(){if(this.count){for(let e=0;e<bullet.length;e++)"sound"===bullet[e].botType&&(bullet[e].isUpgraded=!1);tech.setBotTechFrequency(1)}tech.isSoundBotUpgrade=!1}},{name:"boom-bot",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Robot\' class="link">boom-bot</a>',description:"construct a <strong class='color-bot'>bot</strong> that <strong class='color-e'>explodes</strong> nearby mobs",maxCount:9,count:0,frequency:1,frequencyDefault:1,isBot:!0,isBotTech:!0,allowed:()=>!0,requires:"",effect(){tech.boomBotCount++,b.boomBot()},remove(){this.count&&(tech.boomBotCount-=this.count,b.clearPermanentBots(),b.respawnBots())}},{name:"boom-bot upgrade",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Robot\' class="link">boom-bot upgrade</a>',description:"<strong>convert</strong> your <strong class='color-bot'>bots</strong> to <strong class='color-bot'>boom-bots</strong><br><strong>4x</strong> <strong class='color-e'>explosion</strong> <strong class='color-d'>damage</strong> and size",maxCount:1,count:0,frequency:3,frequencyDefault:3,isBotTech:!0,allowed:()=>tech.boomBotCount>1&&!b.hasBotUpgrade(),requires:"2 or more boom bots and no other bot upgrade",effect(){tech.isBoomBotUpgrade=!0,b.convertBotsTo("boom-bot");for(let e=0;e<bullet.length;e++)"boom"===bullet[e].botType&&(bullet[e].isUpgraded=!0);tech.setBotTechFrequency(),tech.setTechFrequency("boom-bot",5)},remove(){if(this.count){for(let e=0;e<bullet.length;e++)"boom"===bullet[e].botType&&(bullet[e].isUpgraded=!1);tech.setBotTechFrequency(1)}tech.isBoomBotUpgrade=!1}},{name:"laser-bot",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Robot\' class="link">laser-bot</a>',description:"construct a <strong class='color-bot'>bot</strong> that uses <strong class='color-f'>energy</strong> to emit<br>a <strong class='color-laser'>laser</strong> that targets mobs",maxCount:9,count:0,frequency:1,frequencyDefault:1,isBot:!0,isBotTech:!0,allowed:()=>m.maxEnergy>.5,requires:"maximum energy above 50",effect(){tech.laserBotCount++,b.laserBot()},remove(){this.count&&(tech.laserBotCount-=this.count,b.clearPermanentBots(),b.respawnBots())}},{name:"laser-bot upgrade",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Robot\' class="link">laser-bot upgrade</a>',description:"<strong>convert</strong> your <strong class='color-bot'>bots</strong> to <strong class='color-bot'>laser-bots</strong><br><strong>2x</strong> <strong class='color-d'>damage</strong>, efficiency, and range",maxCount:1,count:0,frequency:3,frequencyDefault:3,isBotTech:!0,allowed:()=>tech.laserBotCount>1&&!b.hasBotUpgrade(),requires:"2 or more laser bots and no other bot upgrade",effect(){tech.isLaserBotUpgrade=!0,b.convertBotsTo("laser-bot");for(let e=0;e<bullet.length;e++)"laser"===bullet[e].botType&&(bullet[e].isUpgraded=!0);tech.setBotTechFrequency(),tech.setTechFrequency("laser-bot",5)},remove(){if(this.count){for(let e=0;e<bullet.length;e++)"laser"===bullet[e].botType&&(bullet[e].isUpgraded=!1);tech.setBotTechFrequency(1)}tech.isLaserBotUpgrade=!1}},{name:"orbital-bot",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Robot\' class="link">orbital-bot</a>',description:"construct a <strong class='color-bot'>bot</strong> locked in <strong>orbit</strong> around you<br>that <strong>stuns</strong> and <strong class='color-d'>damages</strong> mobs",maxCount:9,count:0,frequency:1,frequencyDefault:1,isBot:!0,isBotTech:!0,allowed:()=>!0,requires:"",effect(){b.orbitBot(),tech.orbitBotCount++},remove(){this.count&&(tech.orbitBotCount-=this.count,b.clearPermanentBots(),b.respawnBots())}},{name:"orbital-bot upgrade",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Robot\' class="link">orbital-bot upgrade</a>',description:"<strong>convert</strong> your <strong class='color-bot'>bots</strong> to <strong class='color-bot'>orbital-bots</strong><br><strong>4x</strong> orbital <strong class='color-d'>damage</strong> and <strong>2x</strong> <strong>radius</strong>",maxCount:1,count:0,frequency:3,frequencyDefault:3,isBotTech:!0,allowed:()=>tech.orbitBotCount>1&&!b.hasBotUpgrade(),requires:"2 or more orbital bots and no other bot upgrade",effect(){tech.isOrbitBotUpgrade=!0,b.convertBotsTo("orbital-bot");const e=190+120*tech.isOrbitBotUpgrade;for(let o=0;o<bullet.length;o++)"orbit"===bullet[o].botType&&(bullet[o].isUpgraded=!0,bullet[o].range=e,bullet[o].orbitalSpeed=Math.sqrt(.25/e));tech.setBotTechFrequency(),tech.setTechFrequency("orbital-bot",5)},remove(){if(this.count){const e=190+100*tech.isOrbitBotUpgrade;for(let o=0;o<bullet.length;o++)"orbit"===bullet[o].botType&&(bullet[o].range=e,bullet[o].orbitalSpeed=Math.sqrt(.25/e));tech.setBotTechFrequency(1)}tech.isOrbitBotUpgrade=!1}},{name:"dynamo-bot",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Robot\' class="link">dynamo-bot</a>',description:"construct a <strong class='color-bot'>bot</strong> that <strong class='color-d'>damages</strong> mobs and<br>generates <strong>+8</strong> <strong class='color-f'>energy</strong> per second when nearby",maxCount:9,count:0,frequency:1,frequencyDefault:1,isBot:!0,isBotTech:!0,allowed:()=>!0,requires:"",effect(){tech.dynamoBotCount++,b.dynamoBot()},remove(){this.count&&(tech.dynamoBotCount-=this.count,b.clearPermanentBots(),b.respawnBots())}},{name:"dynamo-bot upgrade",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Robot\' class="link">dynamo-bot upgrade</a>',description:"<strong>convert</strong> your <strong class='color-bot'>bots</strong> to <strong class='color-bot'>dynamo-bots</strong><br><strong>+24</strong> <strong class='color-f'>energy</strong> per second when nearby",maxCount:1,count:0,frequency:3,frequencyDefault:3,isBotTech:!0,allowed:()=>tech.dynamoBotCount>1&&!b.hasBotUpgrade(),requires:"2 or more dynamo bots and no other bot upgrade",effect(){tech.isDynamoBotUpgrade=!0,b.convertBotsTo("dynamo-bot");for(let e=0;e<bullet.length;e++)"dynamo"===bullet[e].botType&&(bullet[e].isUpgraded=!0);tech.setBotTechFrequency(),tech.setTechFrequency("dynamo-bot",5)},remove(){if(this.count){for(let e=0;e<bullet.length;e++)"dynamo"===bullet[e].botType&&(bullet[e].isUpgraded=!1);tech.setBotTechFrequency(1)}tech.isDynamoBotUpgrade=!1}},{name:"perimeter defense",descriptionFunction:()=>`for each permanent <strong class='color-bot'>bot</strong><br><strong>0.96x</strong> <strong class='color-defense'>damage taken</strong><em style ="float: right;">(${(.96**b.totalBots()).toFixed(2)}x)</em>`,maxCount:1,count:0,frequency:2,frequencyDefault:2,isBotTech:!0,allowed:()=>b.totalBots()>1,requires:"at least 2 bots",effect(){tech.isBotArmor=!0},remove(){tech.isBotArmor=!1}},{name:"network effect",descriptionFunction:()=>`for each permanent <strong class='color-bot'>bot</strong><br><strong>1.04x</strong> <strong class='color-d'>damage</strong><em style ="float: right;">(${(1+.04*b.totalBots()).toFixed(2)}x)</em>`,maxCount:1,count:0,frequency:2,frequencyDefault:2,isBotTech:!0,allowed:()=>b.totalBots()>1,requires:"at least 2 bots",effect(){tech.isBotDamage=!0},remove(){tech.isBotDamage=!1}},{name:"bot fabrication",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Robot\' class="link">bot fabrication</a>',descriptionFunction(){const e=2+Math.floor(2*b.totalBots()/5);return`after you collect ${powerUps.orb.research(e)}<span class="underline">expend</span> them<br>to construct a random <strong class='color-bot'>bot</strong> <em style ="float: right;">(+2 cost every 5 bots)</em>`},maxCount:1,count:0,frequency:1,frequencyDefault:1,isBotTech:!0,allowed:()=>!0,requires:"",effect(){tech.isRerollBots=!0,powerUps.research.changeRerolls(0),simulation.inGameConsole("<span class='color-var'>m</span>.<span class='color-r'>research</span> <span class='color-symbol'>=</span> 0")},remove(){tech.isRerollBots=!1}},{name:"open-source",description:`${powerUps.orb.tech()}, ${powerUps.orb.field()}, and ${powerUps.orb.gun()} have <strong>+1</strong> <strong class='color-bot'>bot</strong> <strong class='color-choice'><span>ch</span><span>oi</span><span>ce</span></strong><br><strong>3x</strong> <em class='flicker'>frequency</em> for ${powerUps.orb.tech()} with <strong class='color-bot'>bots</strong>`,maxCount:1,count:0,frequency:1,frequencyDefault:1,isBotTech:!0,allowed:()=>b.totalBots()>1&&!tech.isDeterminism,requires:"at least 2 bots",effect(){tech.isExtraBotOption=!0;for(let e=0,o=tech.tech.length;e<o;e++)tech.tech[e].isBotTech&&(tech.tech[e].frequency*=3)},remove(){if(this.count>0)for(let e=0,o=tech.tech.length;e<o;e++)tech.tech[e].isBotTech&&(tech.tech[e].frequency=Math.ceil(tech.tech[e].frequency/3));tech.isExtraBotOption=!1}},{name:"ersatz bots",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Ersatz_good\' class="link">ersatz bots</a>',description:`<strong>double</strong> your <strong class='color-bot'>bots</strong><br>remove <strong>all</strong> ${powerUps.orb.gun()} in your inventory`,maxCount:1,count:0,frequency:2,frequencyDefault:2,isBotTech:!0,isInstant:!0,isBadRandomOption:!0,numberOfGunsLost:0,allowed:()=>b.totalBots()>3&&!build.isExperimentSelection,requires:"NOT EXPERIMENT MODE, at least 4 bots",effect(){this.numberOfGunsLost=b.inventory.length,b.inventory=[];for(let e=0,o=b.guns.length;e<o;++e)b.guns[e].count=0,b.guns[e].have=!1,b.guns[e].ammo!=1/0&&(b.guns[e].ammo=0);tech.buffedGun=0,b.activeGun=null,b.inventoryGun=0,simulation.drawCursor=simulation.drawCursorBasic,simulation.makeGunHUD();for(let e=0;e<tech.nailBotCount;e++)b.nailBot();tech.nailBotCount*=2;for(let e=0;e<tech.laserBotCount;e++)b.laserBot();tech.laserBotCount*=2;for(let e=0;e<tech.foamBotCount;e++)b.foamBot();tech.foamBotCount*=2;for(let e=0;e<tech.boomBotCount;e++)b.boomBot();tech.boomBotCount*=2;for(let e=0;e<tech.orbitBotCount;e++)b.orbitBot();tech.orbitBotCount*=2;for(let e=0;e<tech.dynamoBotCount;e++)b.dynamoBot();tech.dynamoBotCount*=2;for(let e=0;e<tech.soundBotCount;e++)b.soundBot();tech.soundBotCount*=2;for(let e=0;e<tech.plasmaBotCount;e++)b.plasmaBot();tech.plasmaBotCount*=2;for(let e=0;e<tech.missileBotCount;e++)b.missileBot();tech.missileBotCount*=2},remove(){}},{name:"robotics",description:"construct <strong>2</strong> random <strong class='color-bot'>bots</strong>",maxCount:1,count:0,frequency:1,frequencyDefault:1,isBotTech:!0,isInstant:!0,allowed:()=>b.totalBots()>2,requires:"at least 3 bots",effect(){for(let e=0;e<2;e++)b.randomBot()},remove(){}},{name:"bot manufacturing",description:`construct <strong>3</strong> random <strong class='color-bot'>bots</strong> <span style ="float: right;"><span class="underline">expend</span> ${powerUps.orb.research(2)}</span>`,maxCount:1,count:0,frequency:1,frequencyDefault:1,isBotTech:!0,isInstant:!0,allowed:()=>b.totalBots()>3&&powerUps.research.count>1,requires:"at least 4 bots",effect(){powerUps.research.expend(2),b.randomBot(),b.randomBot(),b.randomBot()},remove(){}},{name:"bot prototypes",description:`build <strong>2</strong> random <strong class='color-bot'>bots</strong><span style ="float: right;"><span class="underline">expend</span> ${powerUps.orb.research(3)}</span><br>and <strong>upgrade</strong> all <strong class='color-bot'>bots</strong> to a random type`,maxCount:1,count:0,frequency:1,frequencyDefault:1,isBotTech:!0,isInstant:!0,allowed:()=>b.totalBots()>5&&powerUps.research.count>2,requires:"at least 6 bots",effect(){requestAnimationFrame(()=>{powerUps.research.expend(3);const e=[];e.push(()=>{tech.giveTech("nail-bot upgrade");for(let e=0;e<2;e++)b.nailBot(),tech.nailBotCount++;simulation.inGameConsole("tech.isNailBotUpgrade = true")}),e.push(()=>{tech.giveTech("foam-bot upgrade");for(let e=0;e<2;e++)b.foamBot(),tech.foamBotCount++;simulation.inGameConsole("tech.isFoamBotUpgrade = true")}),e.push(()=>{tech.giveTech("sound-bot upgrade");for(let e=0;e<2;e++)b.soundBot(),tech.soundBotCount++;simulation.inGameConsole("tech.isSoundBotUpgrade = true")}),e.push(()=>{tech.giveTech("boom-bot upgrade");for(let e=0;e<2;e++)b.boomBot(),tech.boomBotCount++;simulation.inGameConsole("tech.isBoomBotUpgrade = true")}),e.push(()=>{tech.giveTech("laser-bot upgrade");for(let e=0;e<2;e++)b.laserBot(),tech.laserBotCount++;simulation.inGameConsole("tech.isLaserBotUpgrade = true")}),e.push(()=>{tech.giveTech("orbital-bot upgrade");for(let e=0;e<2;e++)b.orbitBot(),tech.orbitBotCount++;simulation.inGameConsole("tech.isOrbitalBotUpgrade = true")}),e.push(()=>{tech.giveTech("dynamo-bot upgrade");for(let e=0;e<2;e++)b.dynamoBot(),tech.dynamoBotCount++;simulation.inGameConsole("tech.isDynamoBotUpgrade = true")}),e[Math.floor(Math.random()*e.length)]()})},remove(){}},{name:"decorrelation",description:`if your ${powerUps.orb.gun()} and ${powerUps.orb.field()} keys are <strong>unused</strong> for <strong>2</strong> seconds<br><strong>0.3x</strong> <strong class='color-defense'>damage taken</strong>`,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!0,requires:"",effect(){tech.isNoFireDefense=!0},remove(){tech.isNoFireDefense=!1}},{name:"anticorrelation",description:`if your ${powerUps.orb.gun()} and ${powerUps.orb.field()} keys are <strong>unused</strong> for <strong>2</strong> seconds<br><strong>2x</strong> <strong class='color-d'>damage</strong>`,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!0,requires:"",effect(){tech.isNoFireDamage=!0},remove(){tech.isNoFireDamage=!1}},{name:"mass driver",description:"<strong>4x</strong> <strong class='color-block'>block</strong> collision <strong class='color-d'>damage</strong>",maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>9!==m.fieldMode&&!tech.isTokamak&&!tech.isReel,requires:"not wormhole, reel, tokamak",effect(){tech.blockDamage=.3},remove(){tech.blockDamage=.075}},{name:"Halbach array",description:"throwing a <strong class='color-block'>block</strong> will<br>also throw other nearby <strong class='color-block'>blocks</strong>",maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>(tech.blockDamage>.075||tech.isPrinter)&&8!==m.fieldMode&&9!==m.fieldMode&&!tech.isTokamak,requires:"mass driver, printer, not wormhole, pilot wave, tokamak",effect(){tech.isGroupThrow=!0},remove(){tech.isGroupThrow=!1}},{name:"inflation",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Inflation_(cosmology)\' class="link">inflation</a>',description:"if <strong>holding</strong> a <strong class='color-block'>block</strong> <strong>0.1x</strong> <strong class='color-defense'>damage taken</strong><br>after <strong>throwing</strong> a <strong class='color-block'>block</strong> it expands <strong>3x</strong>",maxCount:1,count:0,frequency:3,frequencyDefault:3,allowed:()=>(tech.blockDamage>.075||tech.isPrinter)&&8!==m.fieldMode&&9!==m.fieldMode&&!tech.isTokamak,requires:"mass driver, printer, not pilot wave, tokamak, wormhole",effect(){tech.isAddBlockMass=!0},remove(){tech.isAddBlockMass=!1}},{name:"restitution",description:"<strong>2.5x</strong> <strong class='color-block'>block</strong> collision <strong class='color-d'>damage</strong><br>after <strong>throwing</strong> a <strong class='color-block'>block</strong> it becomes very <strong>bouncy</strong>",maxCount:1,count:0,frequency:3,frequencyDefault:3,allowed:()=>(tech.blockDamage>.075||tech.isPrinter)&&"pilot wave"!==m.fieldUpgrades[m.fieldMode].name&&"wormhole"!==m.fieldUpgrades[m.fieldMode].name&&!tech.isTokamak,requires:"mass driver, printer, not pilot wave, tokamak, wormhole",effect(){tech.isBlockRestitution=!0},remove(){tech.isBlockRestitution=!1}},{name:"flywheel",description:"<strong>2.5x</strong> <strong class='color-block'>block</strong> collision <strong class='color-d'>damage</strong><br>after a mob <strong>dies</strong> its <strong class='color-block'>block</strong> is <strong>flung</strong> at mobs",maxCount:1,count:0,frequency:3,frequencyDefault:3,allowed:()=>tech.blockDamage>.075||tech.isPrinter,requires:"mass driver, printer",effect(){tech.isMobBlockFling=!0},remove(){tech.isMobBlockFling=!1}},{name:"buckling",descriptionFunction:()=>`if a <strong class='color-block'>block</strong> kills a mob there's a <strong>50%</strong> chance<br>to spawn either ${powerUps.orb.coupling(1)}, ${powerUps.orb.boost(1)}, ${powerUps.orb.heal()}, ${powerUps.orb.ammo()}, or ${powerUps.orb.research(1)}`,maxCount:1,count:0,frequency:3,frequencyDefault:3,allowed:()=>(tech.blockDamage>.075||tech.isPrinter)&&!tech.isTokamak,requires:"mass driver, printer, not pilot wave, tokamak",effect(){tech.isBlockPowerUps=!0},remove(){tech.isBlockPowerUps=!1}},{name:"first derivative",descriptionFunction:()=>`<strong>0.85x</strong> <strong class='color-defense'>damage taken</strong> per ${powerUps.orb.gun()} in your inventory<br>while the <strong>1st</strong> ${powerUps.orb.gun()} in your inventory is equipped<em style ="float: right;">(${(.85**b.inventory.length).toFixed(2)}x)</em>`,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!0,requires:"",effect(){tech.isFirstDer=!0},remove(){tech.isFirstDer=!1}},{name:"tessellation",description:`<strong>0.6x</strong> <strong class='color-defense'>damage taken</strong><span style ="float: right;"><span class="underline">expend</span> ${powerUps.orb.research(2)}</span>`,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>powerUps.research.count>1||build.isExperimentSelection,requires:"",effect(){tech.isFieldHarmReduction=!0,m.damageReduction*=.6,powerUps.research.expend(2)},remove(){tech.isFieldHarmReduction=!1,this.count>0&&(m.damageReduction/=.6,powerUps.research.changeRerolls(2))}},{name:"dark matter",descriptionFunction:()=>`<strong class='color-dark-matter'>dark matter</strong> slowly gravitates <strong>towards</strong> you<br><strong>0.4x</strong> <strong class='color-defense'>damage taken</strong> <strong>${tech.isNotDarkMatter?"outside":"inside"}</strong> <strong class='color-dark-matter'>dark matter</strong>`,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!0,requires:"",effect(){tech.isDarkMatter=!0,spawn.darkMatter()},remove(){tech.isDarkMatter=!1,tech.isHarmDarkMatter=!1;for(let e=0,o=mob.length;e<o;e++)mob[e].isDarkMatter&&(mob[e].alive=!1)}},{name:"axion",descriptionFunction:()=>`while <strong>${tech.isNotDarkMatter?"outside":"inside"}</strong> <strong class='color-dark-matter'>dark matter</strong><br> <strong>2x</strong> <strong class='color-d'>damage</strong>`,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.isDarkMatter,requires:"dark matter",effect(){tech.isAxion=!0},remove(){tech.isAxion=!1}},{name:"dark energy",descriptionFunction:()=>`while <strong>${tech.isNotDarkMatter?"outside":"inside"}</strong> <strong class='color-dark-matter'>dark matter</strong><br>generate <strong>10</strong> <strong class='color-f'>energy</strong> per second`,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.isDarkMatter,requires:"dark matter",effect(){tech.isDarkEnergy=!0},remove(){tech.isDarkEnergy=!1}},{name:"MACHO",description:"<span style = 'font-size:93%;'><strong class='color-dark-matter'>dark matter's</strong> effects are only active <strong>outside</strong> it's range<br><strong>1.6x</strong> to all <strong class='color-dark-matter'>dark matter</strong> effects</span>",maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.isDarkMatter&&!tech.isMoveDarkMatter&&!tech.isDarkStar,requires:"dark matter, not entropic gravity, dark star",effect(){tech.isNotDarkMatter=!0},remove(){tech.isNotDarkMatter=!1}},{name:"entropic gravity",description:"<strong>crouching</strong> pulls <strong class='color-dark-matter'>dark matter</strong> towards you<br><strong>1.6x</strong> to all <strong class='color-dark-matter'>dark matter</strong> effects",maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.isDarkMatter&&!tech.isNotDarkMatter,requires:"dark matter, not MACHO",effect(){tech.isMoveDarkMatter=!0},remove(){tech.isMoveDarkMatter=!1}},{name:"dark star",description:"mobs <strong>inside</strong> <strong class='color-dark-matter'>dark matter</strong> are <strong class='color-d'>damaged</strong><br><strong>1.3x</strong> <strong class='color-dark-matter'>dark matter</strong> radius",maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.isDarkMatter&&!tech.isNotDarkMatter,requires:"dark matter, not MACHO",effect(){tech.isDarkStar=!0},remove(){tech.isDarkStar=!1}},{name:"non-Newtonian",description:"after mob <strong>collisions</strong><br><strong>0.4x</strong> <strong class='color-defense'>damage taken</strong> for <strong>10</strong> seconds",maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!0,requires:"",effect(){tech.isHarmArmor=!0},remove(){tech.isHarmArmor=!1}},{name:"contact explosive",description:"<strong class='color-e'>explode</strong> after mob <strong>collisions</strong><br><em>while you're still <strong class=\"color-invulnerable\">invulnerabile</strong></em>",maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!0,requires:"",effect(){tech.isExplodeContact=!0},remove(){tech.isExplodeContact=!1}},{name:"Pauli exclusion",description:'for <strong>7</strong> seconds after mob <strong>collisions</strong><br>gain <strong class="color-invulnerable">invulnerability</strong> and <em style="opacity: 0.3;">blocked <strong class=\'color-f\'>energy</strong> regen</em>',maxCount:9,count:0,frequency:1,frequencyDefault:1,allowed:()=>!0,requires:"",effect(){m.collisionImmuneCycles+=420,m.immuneCycle<m.cycle+m.collisionImmuneCycles&&(m.immuneCycle=m.cycle+m.collisionImmuneCycles)},remove(){m.collisionImmuneCycles=30}},{name:"spin-statistics theorem",description:'for <strong>1.9</strong> seconds out of every <strong>7</strong> seconds<br>gain <strong class="color-invulnerable">invulnerability</strong> and <em style="opacity: 0.3;">blocked <strong class=\'color-f\'>energy</strong> regen</em>',maxCount:3,count:0,frequency:1,frequencyDefault:1,allowed:()=>!0,requires:"",effect(){tech.cyclicImmunity+=114},remove(){tech.cyclicImmunity=0}},{name:"fermion",description:'if a mob has <strong>died</strong> in the last <strong>5</strong> seconds<br>gain <strong class="color-invulnerable">invulnerability</strong> and <em style="opacity: 0.3;">blocked <strong class=\'color-f\'>energy</strong> regen</em>',maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!0,requires:"",effect(){tech.isMobDeathImmunity=!0},remove(){tech.isMobDeathImmunity=!1}},{name:"abelian group",description:"<strong>3x</strong> <strong class='color-d'>damage</strong> while <strong class=\"color-invulnerable\">invulnerable</strong>",maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.isMobDeathImmunity||tech.cyclicImmunity||m.collisionImmuneCycles>30||tech.isShotgunImmune,requires:"invincibility tech",effect(){tech.isImmunityDamage=!0},remove(){tech.isImmunityDamage=!1}},{name:"refrigerant",descriptionFunction:()=>`after losing at least <strong>5</strong> ${tech.isEnergyHealth?"<strong class='color-f'>energy</strong>":"<strong class='color-h'>health</strong>"}<br><strong class='color-s'>freeze</strong> all mobs for <strong>7</strong> seconds`,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!0,requires:"",effect(){tech.isHarmFreeze=!0},remove(){tech.isHarmFreeze=!1}},{name:"piezoelectricity",description:"if you <strong>collide</strong> with a mob<br>generate <strong>+2048</strong> <strong class='color-f'>energy</strong>",maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!tech.isEnergyHealth,requires:"not mass-energy",effect(){tech.isPiezo=!0},remove(){tech.isPiezo=!1}},{name:"ground state",description:"<strong>+300</strong> maximum <strong class='color-f'>energy</strong><br><strong>0.66x</strong> passive <strong class='color-f'>energy</strong> generation",maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!tech.isTimeCrystals,requires:"not time crystals",effect(){tech.isGroundState=!0,m.setFieldRegen(),m.setMaxEnergy()},remove(){tech.isGroundState=!1,m.setFieldRegen(),m.setMaxEnergy()}},{name:"heat engine",description:"<strong>1.4x</strong> <strong class='color-d'>damage</strong><br><strong>–50</strong> maximum <strong class='color-f'>energy</strong>",maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!0,requires:"not CPT",damage:1.4,effect(){m.damageDone*=this.damage,tech.isMaxEnergyTech=!0,m.setMaxEnergy()},remove(){this.count&&m.alive&&(m.damageDone/=this.damage),tech.isMaxEnergyTech=!1,m.setMaxEnergy()}},{name:"exothermic process",description:"<strong>1.6x</strong> <strong class='color-d'>damage</strong><br><strong>–5</strong> <strong class='color-f'>energy</strong> after mobs <strong>die</strong>",maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!0,requires:"",damage:1.6,effect(){m.damageDone*=this.damage,tech.isEnergyLoss=!0},remove(){this.count&&m.alive&&(m.damageDone/=this.damage),tech.isEnergyLoss=!1}},{name:"Gibbs free energy",descriptionFunction:()=>`<strong>1.007x</strong> <strong class='color-d'>damage</strong> for each missing <strong class='color-f'>energy</strong><br><strong>+6%</strong> chance for <strong class='color-junk'>JUNK</strong> <strong class='color-choice'><span>ch</span><span>oi</span><span>ces</span></strong><em style ="float: right;">(${(1+.5*Math.max(0,m.maxEnergy-m.energy)).toFixed(2)}x)</em>`,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!0,requires:"",effect(){tech.isLowEnergyDamage=!0,this.refundAmount+=tech.addJunkTechToPool(.06)},remove(){tech.isLowEnergyDamage=!1,this.count>0&&this.refundAmount>0&&(tech.removeJunkTechFromPool(this.refundAmount),this.refundAmount=0)}},{name:"overcharge",description:"<strong>+100</strong> maximum <strong class='color-f'>energy</strong><br><strong>+5%</strong> chance for <strong class='color-junk'>JUNK</strong> <strong class='color-choice'><span>ch</span><span>oi</span><span>ces</span></strong>",maxCount:9,count:0,frequency:1,frequencyDefault:1,allowed:()=>tech.junkChance<1,requires:"",effect(){tech.bonusEnergy+=1,m.setMaxEnergy(),this.refundAmount+=tech.addJunkTechToPool(.05)},refundAmount:0,remove(){tech.bonusEnergy=0,m.setMaxEnergy(),this.count>0&&this.refundAmount>0&&(tech.removeJunkTechFromPool(this.refundAmount),this.refundAmount=0)}},{name:"Maxwells demon",description:"<strong class='color-f'>energy</strong> above maximum decays <strong>30x</strong> slower<br><strong>+5%</strong> chance for <strong class='color-junk'>JUNK</strong> <strong class='color-choice'><span>ch</span><span>oi</span><span>ces</span></strong>",maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>(m.energy>m.maxEnergy||build.isExperimentSelection)&&tech.junkChance<1,requires:"energy above your max",effect(){tech.overfillDrain=.99,this.refundAmount+=tech.addJunkTechToPool(.05)},refundAmount:0,remove(){tech.overfillDrain=.7,this.count>0&&this.refundAmount>0&&(tech.removeJunkTechFromPool(this.refundAmount),this.refundAmount=0)}},{name:"inductive charging",description:"if <strong>crouched</strong> <strong>7x</strong> passive <strong class='color-f'>energy</strong> generation<br>otherwise <strong>0x</strong> passive <strong class='color-f'>energy</strong> generation",maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!0,requires:"",effect(){tech.isCrouchRegen=!0,m.regenEnergy=function(){m.immuneCycle<m.cycle&&m.crouch&&m.fieldCDcycle<m.cycle&&(m.energy+=7*m.fieldRegen*level.isReducedRegen),m.energy<0&&(m.energy=0)}},remove(){tech.isCrouchRegen=!1,m.regenEnergy=m.regenEnergyDefault}},{name:"energy conservation",description:"doing <strong class='color-d'>damage</strong> to mobs generates <strong class='color-f'>energy</strong>",maxCount:9,count:0,frequency:1,frequencyDefault:1,allowed:()=>!0,requires:"",effect(){tech.energySiphon+=.04},remove(){tech.energySiphon=0}},{name:"waste heat recovery",description:"if a mob has <strong>died</strong> in the last <strong>5</strong> seconds<br>generate <strong>0.05x</strong> maximum <strong class='color-f'>energy</strong> every second",maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!0,requires:"",effect(){tech.isEnergyRecovery=!0},remove(){tech.isEnergyRecovery=!1}},{name:"recycling",descriptionFunction:()=>`if a mob has <strong>died</strong> in the last <strong>5</strong> seconds<br>recover <strong>0.005x</strong> maximum ${tech.isEnergyHealth?"<strong class='color-f'>energy</strong>":"<strong class='color-h'>health</strong>"} every second`,description:"",maxCount:1,count:0,frequency:1,frequencyDefault:1,isHealTech:!0,allowed:()=>!0,requires:"",effect(){tech.isHealthRecovery=!0},remove(){tech.isHealthRecovery=!1}},{name:"fluoroantimonic acid",descriptionFunction:()=>`if your ${tech.isEnergyHealth?"<strong class='color-f'>energy</strong>":"<strong class='color-h'>health</strong>"} is above <strong>100</strong><br><strong>1.35x</strong> <strong class='color-d'>damage</strong>`,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>m.maxHealth>1||tech.isEnergyHealth,requires:"maximum health above 100",effect(){tech.isAcidDmg=!0},remove(){tech.isAcidDmg=!1}},{name:"control theory",descriptionFunction:()=>`<strong>2x</strong> <strong class='color-d'>damage</strong><br>while your ${tech.isEnergyHealth?"<strong class='color-f'>energy</strong>":"<strong class='color-h'>health</strong>"} is at maximum`,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!0,requires:"",effect(){tech.isMaxHealthDamage=!0},remove(){tech.isMaxHealthDamage=!1}},{name:"stability",descriptionFunction:()=>`<strong>0.1x</strong> <strong class='color-defense'>damage taken</strong><br>while your ${tech.isEnergyHealth?"<strong class='color-f'>energy</strong>":"<strong class='color-h'>health</strong>"} is full`,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!0,requires:"",effect(){tech.isMaxHealthDefense=!0},remove(){tech.isMaxHealthDefense=!1}},{name:"instability",descriptionFunction:()=>`<strong>2.5x</strong> <strong class='color-d'>damage</strong> while your <strong class='color-defense'>damage taken</strong> is <strong>1.00x</strong><br><em style ="float: right;">(current damage taken = ${m.defense().toFixed(2)}x)</em>`,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!0,requires:"",effect(){tech.noDefenseSettingDamage=!0},remove(){tech.noDefenseSettingDamage=!1}},{name:"torpor",description:"if a mob has <strong>not died</strong> in the last <strong>5</strong> seconds<br><strong>0.3x</strong> <strong class='color-defense'>damage taken</strong>",maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!0,requires:"",effect(){tech.isHarmReduceNoKill=!0},remove(){tech.isHarmReduceNoKill=!1}},{name:"homeostasis",descriptionFunction:()=>`missing ${tech.isEnergyHealth?"<strong class='color-f'>energy</strong>":"<strong class='color-h'>health</strong>"} reduces <strong class='color-defense'>damage taken</strong><br>down to <strong>0.2x</strong> at <strong>0</strong> ${tech.isEnergyHealth?"<strong class='color-f'>energy</strong>":"<strong class='color-h'>health</strong>"}<em style ="float: right;">(${Math.pow(.2,Math.max(0,1-(tech.isEnergyHealth?m.energy/m.maxEnergy:m.health/m.maxHealth))).toFixed(2)}x)</em>`,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>m.health<.9||build.isExperimentSelection,requires:"health below 60",effect(){tech.isLowHealthDefense=!0},remove(){tech.isLowHealthDefense=!1}},{name:"negative feedback",descriptionFunction:()=>`<strong>1.006x</strong> <strong class='color-d'>damage</strong> for each missing ${tech.isEnergyHealth?"<strong class='color-f'>energy</strong>":"<strong class='color-h'>health</strong>"}<br><em style ="float: right;">(${(1+.6*Math.max(0,tech.isEnergyHealth?m.maxEnergy-m.energy:m.maxHealth-m.health)).toFixed(2)}x)</em>`,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>m.health<.9||build.isExperimentSelection,requires:"health below 90",effect(){tech.isLowHealthDmg=!0},remove(){tech.isLowHealthDmg=!1}},{name:"Zenos paradox",descriptionFunction:()=>`<strong>0.3x</strong> <strong class='color-defense'>damage taken</strong><br><strong>–5%</strong> of current ${tech.isEnergyHealth?"<strong class='color-f'>energy</strong>":"<strong class='color-h'>health</strong>"} every <strong>5</strong> seconds`,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!0,requires:"",effect(){tech.isZeno=!0,m.damageReduction*=.3},remove(){tech.isZeno=!1,this.count>0&&(m.damageReduction/=.3)}},{name:"quantum Zeno effect",descriptionFunction:()=>"you can only <strong>die</strong> if you <strong>end</strong> a level with <strong class='color-h'>health</strong> < <strong>0</strong><br><strong>3x</strong> <strong class='color-d'>damage</strong> while <strong class='color-h'>health</strong> < <strong>0</strong>",maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!tech.isEnergyHealth,requires:"not mass-energy",effect(){tech.isNoDeath=!0},remove(){tech.isNoDeath=!1}},{name:"quantum Darwinism",descriptionFunction:()=>`once per level if <strong class='color-h'>health</strong> < <strong>0</strong><br>spawn ${powerUps.orb.tech()} and <strong>+2%</strong> chance for <strong class='color-junk'>JUNK</strong>`,maxCount:1,count:0,frequency:3,frequencyDefault:3,allowed:()=>tech.isNoDeath,requires:"quantum Zeno effect",effect(){tech.isDeathTech=!0,tech.isDeathTechTriggered=!1},remove(){tech.isDeathTech=!1,tech.isDeathTechTriggered=!1}},{name:"antiscience",descriptionFunction:()=>`<strong>–10</strong> ${tech.isEnergyHealth?"<strong class='color-f'>energy</strong>":"<strong class='color-h'>health</strong>"} after picking up ${powerUps.orb.tech()}<br><strong>1.7x</strong> <strong class='color-d'>damage</strong>`,maxCount:1,count:0,frequency:1,frequencyDefault:1,isBadRandomOption:!0,allowed:()=>!0,requires:"",damage:1.7,effect(){m.damageDone*=this.damage,tech.isTechDamage=!0},remove(){this.count&&m.alive&&(m.damageDone/=this.damage),tech.isTechDamage=!1}},{name:"ergodicity",descriptionFunction:()=>`<strong>0.5x</strong> <strong class='color-h'>healing</strong> from ${powerUps.orb.heal()}<br><strong>1.7x</strong> <strong class='color-d'>damage</strong>`,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!0,requires:"",damage:1.7,effect(){m.damageDone*=this.damage,tech.isHalfHeals=!0;for(let e=0;e<powerUp.length;e++)if("heal"===powerUp[e].name){const o=Math.sqrt(.5);powerUp[e].size*=o,Matter.Body.scale(powerUp[e],o,o)}},remove(){if(this.count&&m.alive){m.damageDone/=this.damage;for(let e=0;e<powerUp.length;e++)if("heal"===powerUp[e].name){const o=1/Math.sqrt(.5);powerUp[e].size*=o,Matter.Body.scale(powerUp[e],o,o)}}tech.isHalfHeals=!1}},{name:"induction brake",descriptionFunction:()=>`after using ${powerUps.orb.heal()}<br><strong class='color-s'>slow</strong> nearby mobs for <strong>17</strong> seconds`,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!tech.isPerfectBrake,requires:"not eddy current brake",effect(){tech.isHealBrake=!0},remove(){tech.isHealBrake=!1}},{name:"adiabatic healing",descriptionFunction:()=>`<strong>2x</strong> <strong class='color-h'>healing</strong> from ${powerUps.orb.heal()}<br><strong>+4%</strong> chance for <strong class='color-junk'>JUNK</strong> <strong class='color-choice'><span>ch</span><span>oi</span><span>ces</span></strong>`,maxCount:3,count:0,frequency:1,frequencyDefault:1,isHealTech:!0,allowed:()=>(m.health/m.maxHealth<.7||build.isExperimentSelection)&&tech.junkChance<1,requires:"under 70% health",effect(){tech.largerHeals++;for(let e=0;e<powerUp.length;e++)if("heal"===powerUp[e].name){const o=powerUp[e].size;powerUp[e].size=powerUps.heal.size();const t=powerUp[e].size/o;Matter.Body.scale(powerUp[e],t,t)}this.refundAmount+=tech.addJunkTechToPool(.04)},refundAmount:0,remove(){tech.largerHeals=1;for(let e=0;e<powerUp.length;e++)if("heal"===powerUp[e].name){const o=powerUp[e].size;powerUp[e].size=powerUps.heal.size();const t=powerUp[e].size/o;Matter.Body.scale(powerUp[e],t,t)}this.count>0&&this.refundAmount>0&&(tech.removeJunkTechFromPool(this.refundAmount),this.refundAmount=0)}},{name:"quenching",descriptionFunction:()=>`<strong>0.5x</strong> of ${powerUps.orb.heal()} over<strong class='color-h'>healing</strong><br>is added to <strong>maximum</strong> <strong class='color-h'>health</strong>`,maxCount:1,count:0,frequency:1,frequencyDefault:1,isHealTech:!0,allowed:()=>!tech.isEnergyHealth,requires:"not mass-energy",effect(){tech.isOverHeal=!0},remove(){tech.isOverHeal=!1}},{name:"accretion",descriptionFunction:()=>`${powerUps.orb.heal(1)} follow you, even between levels<br><strong>+4%</strong> chance to <strong class='color-dup'>duplicate</strong> spawned <strong>power ups</strong>`,maxCount:1,count:0,frequency:1,frequencyDefault:1,isHealTech:!0,allowed:()=>9!==m.fieldMode,requires:"not wormhole",effect(){tech.isHealAttract=!0,powerUps.setPowerUpMode(),build.isExperimentSelection||simulation.isTextLogOpen||simulation.circleFlare(.04)},remove(){tech.isHealAttract=!1,powerUps.setPowerUpMode()}},{name:"accretion disk",descriptionFunction:()=>`<strong>1.07x</strong> <strong class='color-d'>damage</strong> for each <strong>power up</strong> on this <strong>level</strong><br><strong>+5%</strong> chance for <strong class='color-junk'>JUNK</strong> <strong class='color-choice'><span>ch</span><span>oi</span><span>ces</span></strong> <em style ="float: right;">(${(1+.07*powerUp.length).toFixed(2)}x)</em>`,maxCount:1,count:0,frequency:3,frequencyDefault:3,isHealTech:!0,allowed:()=>tech.isHealAttract,requires:"accretion",effect(){tech.isPowerUpDamage=!0,this.refundAmount+=tech.addJunkTechToPool(.05)},refundAmount:0,remove(){tech.isPowerUpDamage=!1,this.count>0&&this.refundAmount>0&&(tech.removeJunkTechFromPool(this.refundAmount),this.refundAmount=0)}},{name:"maintenance",descriptionFunction:()=>`<strong>2x</strong> <em class='flicker'>frequency</em> for ${powerUps.orb.tech()} with <strong class='color-h'>healing</strong><br>spawn ${powerUps.orb.heal(13)}`,maxCount:1,count:0,frequency:1,frequencyDefault:1,isInstant:!0,isBadRandomOption:!0,allowed:()=>!0,requires:"",effect(){for(let e=0;e<13;e++)powerUps.spawn(m.pos.x+60*(Math.random()-.5),m.pos.y+60*(Math.random()-.5),"heal");for(let e=0,o=tech.tech.length;e<o;e++)tech.tech[e].isHealTech&&(tech.tech[e].frequency*=2)},remove(){}},{name:"self-assembly",descriptionFunction:()=>`at the start of each <strong>level</strong><br>for every <strong>20</strong> missing ${tech.isEnergyHealth?"<strong class='color-f'>energy</strong>":"<strong class='color-h'>health</strong>"} spawn ${powerUps.orb.heal()}`,maxCount:1,count:0,frequency:1,frequencyDefault:1,isHealTech:!0,allowed:()=>!0,requires:"",effect(){tech.isHealLowHealth=!0},remove(){tech.isHealLowHealth=!1}},{name:"interest",descriptionFunction(){const e=Math.ceil(this.rate*powerUps.research.count),o=Math.ceil(this.rate*m.coupling);return`at the start of each <strong>level</strong> <em style ="float: right;">(get ${e} ${powerUps.orb.research(1)}, ${o} ${powerUps.orb.coupling(1)})</em><br>spawn <strong>${(100*this.rate).toFixed(0)}%</strong> of your ${powerUps.orb.research(1)} and <strong>${(100*this.rate/3).toFixed(0)}%</strong> of your ${powerUps.orb.coupling(1)}`},maxCount:9,count:0,frequency:1,frequencyDefault:1,allowed:()=>!0,requires:"",rate:.18,effect(){tech.interestRate+=this.rate},remove(){tech.interestRate=0}},{name:"anthropic principle",descriptionFunction:()=>`if <strong class='color-h'>health</strong> < <strong>0</strong> <span class="underline">expend</span> ${powerUps.orb.research(1)} to heal <span style ="float: right;">(once per level)</span><br>and spawn ${powerUps.orb.heal(22)}<em style ="float: right;">(${!tech.isDeathAvoidedThisLevel&&powerUps.research.count>0?"on":"off"})</em>`,maxCount:1,count:0,frequency:1,frequencyDefault:1,isHealTech:!0,allowed:()=>powerUps.research.count>0||build.isExperimentSelection,requires:"at least 1 research",effect(){tech.isDeathAvoid=!0,tech.isDeathAvoidedThisLevel=!1,setTimeout(function(){powerUps.research.changeRerolls(0)},1e3)},remove(){tech.isDeathAvoid=!1}},{name:"weak anthropic principle",description:"after <strong>anthropic principle</strong> prevents your <strong>death</strong><br><strong>+60%</strong> <strong class='color-dup'>duplication</strong> chance for that level",maxCount:1,count:0,frequency:3,frequencyDefault:3,allowed:()=>tech.isDeathAvoid,requires:"anthropic principle",effect(){tech.isAnthropicTech=!0,powerUps.setPowerUpMode()},remove(){tech.isAnthropicTech=!1,powerUps.setPowerUpMode()}},{name:"strong anthropic principle",description:"after <strong>anthropic principle</strong> prevents your <strong>death</strong><br><strong>2.71828x</strong> <strong class='color-d'>damage</strong> for that level",maxCount:1,count:0,frequency:3,frequencyDefault:3,allowed:()=>tech.isDeathAvoid,requires:"anthropic principle",effect(){tech.isAnthropicDamage=!0},remove(){tech.isAnthropicDamage=!1}},{name:"quantum immortality",description:"<strong>0.7x</strong> <strong class='color-defense'>damage taken</strong><br>after <strong>dying</strong>, continue in an <strong class='alt'>alternate reality</strong>",maxCount:1,count:0,frequency:1,frequencyDefault:1,isAltRealityTech:!0,allowed:()=>!0,requires:"",effect(){tech.isImmortal=!0,m.damageReduction*=.7},remove(){tech.isImmortal=!1,this.count>0&&(m.damageReduction/=.7)}},{name:"many-worlds",description:`at the start of each <strong>level</strong> spawn ${powerUps.orb.tech()}<br>and enter an <strong class='alt'>alternate reality</strong>`,maxCount:1,count:0,frequency:1,frequencyDefault:1,isAltRealityTech:!0,allowed:()=>!tech.isResearchReality&&!tech.isCollisionRealitySwitch,requires:"not Ψ(t) collapse, Hilbert space",effect(){tech.isSwitchReality=!0},remove(){tech.isSwitchReality=!1}},{name:"Ψ(t) collapse",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Wave_function_collapse\' class="link">Ψ(t) collapse</a>',description:`after a <strong>boss</strong> <strong>dies</strong> spawn ${powerUps.orb.research(4)}<br>if you <strong class='color-r'>research</strong> enter an <strong class='alt'>alternate reality</strong>`,maxCount:1,count:0,frequency:1,frequencyDefault:1,isAltRealityTech:!0,allowed:()=>!tech.isSwitchReality&&!tech.isCollisionRealitySwitch&&!tech.isJunkResearch,requires:"not many-worlds, Hilbert space, pseudoscience",bonusResearch:21,effect(){tech.isResearchReality=!0},remove(){tech.isResearchReality=!1}},{name:"decoherence",description:`after a <strong>boss</strong> <strong>dies</strong> spawn ${powerUps.orb.research(3)}<br>${powerUps.orb.tech()} options you don't <strong class='color-choice'><span>ch</span><span>oo</span><span>se</span></strong> won't <strong>reoccur</strong>`,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!tech.isSuperDeterminism,requires:"not, superdeterminism",effect(){tech.isBanish=!0},remove(){if(tech.isBanish){tech.isBanish=!1;for(let e=0;e<tech.tech.length;e++)tech.tech[e].isBanished&&(tech.tech[e].isBanished=!1)}tech.isBanish=!1}},{name:"coherence",description:`after observing a ${powerUps.orb.tech()} <strong class='color-choice'><span>ch</span><span>oi</span><span>ce</span></strong><br>that <strong class='color-choice'><span>ch</span><span>oi</span><span>ce</span></strong> is available for all <strong>all</strong> future ${powerUps.orb.tech()}`,maxCount:1,count:0,frequency:3,frequencyDefault:3,allowed:()=>tech.isBanish,requires:"decoherence",effect(){tech.isRetain=!0},remove(){tech.isRetain=!1}},{name:"counterfactual conditional",description:`add a <strong>30x</strong> <em class='flicker'>frequency</em> ${powerUps.orb.tech()} to the possible <strong class='color-choice'><span>ch</span><span>oi</span><span>ces</span></strong><br>when chosen it <strong>randomizes</strong> current ${powerUps.orb.tech()} <strong class='color-choice'><span>ch</span><span>oi</span><span>ces</span></strong>`,maxCount:1,count:0,frequency:1,frequencyDefault:1,isInstant:!0,allowed:()=>!0,requires:"",effect(){for(let e=0,o=tech.tech.length;e<o;e++)"counterfactual"===tech.tech[e].name&&(tech.tech[e].frequency=40)},remove(){}},{name:"counterfactual",description:`<strong>randomize</strong> ${powerUps.orb.tech()} <strong class='color-choice'><span>ch</span><span>oi</span><span>ces</span></strong><br><strong>10%</strong> chance to <span class='color-remove'>eject</span> this as a ${powerUps.orb.tech()}`,maxCount:9,count:0,frequency:0,frequencyDefault:0,isInstant:!0,allowed:()=>!build.isExperimentSelection,requires:"not experiment mode",effect(){Math.random()<.1?(this.frequency=0,powerUps.spawnDelay("tech",1),simulation.inGameConsole("<span class='color-var'>this</span>.frequency = 0  <em>//counterfactual removed</em>",360)):requestAnimationFrame(()=>{requestAnimationFrame(()=>{this.count--,powerUps.tech.effect()})})},remove(){requestAnimationFrame(()=>{this.frequency=0})}},{name:"peer review",description:`after <strong class='color-r'>researching</strong> or <span class="underline">expending</span> ${powerUps.orb.research(1)}<br>gain <strong>1.03x</strong> <strong class='color-d'>damage</strong>`,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>(powerUps.research.count>0||build.isExperimentSelection)&&!tech.isSuperDeterminism,requires:"at least 1 research, not superdeterminism",effect(){tech.isResearchDamage=!0},remove(){tech.isResearchDamage=!1}},{name:"clinical peer review",descriptionFunction:()=>`after <strong class='color-r'>researching</strong> or <span class="underline">expending</span> ${powerUps.orb.research(1)}<br>spawn ${powerUps.orb.heal()}`,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>(powerUps.research.count>0||build.isExperimentSelection)&&!tech.isSuperDeterminism,requires:"at least 1 research, not superdeterminism",effect(){tech.isResearchHeal=!0},remove(){tech.isResearchHeal=!1}},{name:"pseudoscience",description:"<strong class='color-r'>research</strong> <strong>2</strong> times</span> for <strong>free</strong>, but<br><strong>+1%</strong> chance for <strong class='color-junk'>JUNK</strong> <strong class='color-choice'><span>ch</span><span>oi</span><span>ces</span></strong> each time",maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!tech.isResearchReality&&!tech.isSuperDeterminism,requires:"not Ψ(t) collapse, superdeterminism",effect(){tech.isJunkResearch=!0},remove(){tech.isJunkResearch=!1}},{name:"renormalization",description:`<strong>47%</strong> chance to spawn ${powerUps.orb.research(1)} after <span class="underline">expending</span> ${powerUps.orb.research(1)}<br><strong>+5%</strong> chance for <strong class='color-junk'>JUNK</strong> <strong class='color-choice'><span>ch</span><span>oi</span><span>ces</span></strong>`,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>(powerUps.research.count>3||build.isExperimentSelection)&&!tech.isSuperDeterminism&&tech.junkChance<1,requires:"at least 4 research, not superdeterminism",effect(){tech.renormalization=!0,this.refundAmount+=tech.addJunkTechToPool(.05)},refundAmount:0,remove(){tech.renormalization=!1,this.count>0&&this.refundAmount>0&&(tech.removeJunkTechFromPool(this.refundAmount),this.refundAmount=0)}},{name:"perturbation theory",description:`if you have no ${powerUps.orb.research(1)} in your inventory<br><strong>2x</strong> <em>fire rate</em>`,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>0===powerUps.research.count,requires:"no research",effect(){tech.isRerollHaste=!0,powerUps.research.changeRerolls(0),b.setFireCD()},remove(){tech.isRerollHaste=!1,tech.researchHaste=1,b.setFireCD()}},{name:"Bayesian statistics",descriptionFunction:()=>`<strong>1.05x</strong> <strong class='color-d'>damage</strong> per ${powerUps.orb.research(1)} in your inventory<br><em style ="float: right;">(${(1+Math.max(0,.05*powerUps.research.count)).toFixed(2)}x)</em>`,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>powerUps.research.count>1||build.isExperimentSelection,requires:"at least 2 research",effect(){tech.isRerollDamage=!0},remove(){tech.isRerollDamage=!1}},{name:"ansatz",description:`after <strong class='color-choice'><span>ch</span><span>oos</span><span>ing</span></strong> ${powerUps.orb.field()}, ${powerUps.orb.tech()}, or ${powerUps.orb.gun()}<br>if you have no ${powerUps.orb.research(1)} in your inventory spawn ${powerUps.orb.research(3)}`,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>powerUps.research.count<1&&!tech.isSuperDeterminism&&!tech.isRerollHaste,requires:"no research, not superdeterminism, Ψ(t) collapse, perturbation theory",effect(){tech.isAnsatz=!0},remove(){tech.isAnsatz=!1}},{name:"unified field theory",description:`when <strong>paused</strong> you can click to <strong>change</strong> your ${powerUps.orb.field()}<br><strong>2x</strong> frequency for <em class='flicker'>${powerUps.orb.fieldTech()}</em>`,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!tech.isSuperDeterminism,requires:"not superdeterminism",effect(){tech.isPauseSwitchField=!0;for(let e=0,o=tech.tech.length;e<o;e++)tech.tech[e].isFieldTech&&(tech.tech[e].frequency*=2)},remove(){if(tech.isPauseSwitchField=!1,this.count>1)for(let e=0,o=tech.tech.length;e<o;e++)tech.tech[e].isFieldTech&&(tech.tech[e].frequency/=2)}},{name:"brainstorming",description:`<strong>randomize</strong> ${powerUps.orb.tech()} <strong class='color-choice'><span>ch</span><span>oi</span><span>ces</span></strong><br>every <strong>1.5</strong> seconds for <strong>10</strong> seconds`,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!tech.isSuperDeterminism,requires:"not superdeterminism",effect(){tech.isBrainstorm=!0,tech.isBrainstormActive=!1,tech.brainStormDelay=2e3-100*simulation.difficultyMode},remove(){tech.isBrainstorm=!1,tech.isBrainstormActive=!1}},{name:"cross-disciplinary",description:`${powerUps.orb.tech()} have an extra ${powerUps.orb.field()} or ${powerUps.orb.gun()} <strong class='color-choice'><span>ch</span><span>oi</span><span>ce</span></strong><br><strong>+5%</strong> chance to <strong class='color-dup'>duplicate</strong> spawned <strong>power ups</strong>`,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!tech.isDeterminism,requires:"not determinism",effect(){tech.isExtraGunField=!0,powerUps.setPowerUpMode(),build.isExperimentSelection||simulation.isTextLogOpen||simulation.circleFlare(.05)},remove(){tech.isExtraGunField=!1,this.count&&powerUps.setPowerUpMode()}},{name:"a priori",description:`after <strong class='color-choice'><span>ch</span><span>oos</span><span>ing</span></strong> a ${powerUps.orb.field()} or ${powerUps.orb.gun()}<br>get a compatable ${powerUps.orb.fieldTech()} or ${powerUps.orb.gunTech()}`,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!0,requires:"",effect(){tech.isExtraGunTech=!0},remove(){tech.isExtraGunTech=!1}},{name:"emergence",description:`${powerUps.orb.field()}, ${powerUps.orb.tech()}, and ${powerUps.orb.gun()} have <strong>+1</strong> <strong class='color-choice'><span>ch</span><span>oi</span><span>ce</span></strong><br><strong>1.1x</strong> <strong class='color-d'>damage</strong>`,maxCount:9,count:0,frequency:1,frequencyDefault:1,allowed:()=>!tech.isDeterminism,requires:"not determinism",damage:1.1,effect(){tech.extraChoices+=1,m.damageDone*=this.damage},refundAmount:0,remove(){tech.extraChoices=0,this.count&&m.alive&&(m.damageDone/=this.damage)}},{name:"path integral",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Path_integral_formulation\' class="link">path integral</a>',description:`your next ${powerUps.orb.tech()} has all possible <strong class='color-choice'><span>ch</span><span>oi</span><span>ces</span></strong><br><strong>+4%</strong> chance for <strong class='color-junk'>JUNK</strong> <strong class='color-choice'><span>ch</span><span>oi</span><span>ces</span></strong>`,maxCount:1,count:0,frequency:1,frequencyDefault:1,isInstant:!0,allowed:()=>!tech.isDeterminism&&!tech.isBrainstorm&&tech.junkChance<1,requires:"not determinism, brainstorm",effect(){tech.tooManyTechChoices=1,this.refundAmount+=tech.addJunkTechToPool(.04)},refundAmount:0,remove(){tech.tooManyTechChoices=0,this.count>0&&this.refundAmount>0&&(tech.removeJunkTechFromPool(this.refundAmount),this.refundAmount=0)}},{name:"determinism",description:`spawn ${powerUps.orb.tech()}${powerUps.orb.tech()}${powerUps.orb.tech()}${powerUps.orb.tech()}<br>${powerUps.orb.field()}, ${powerUps.orb.tech()}, and ${powerUps.orb.gun()} have only <strong>1</strong> <strong class='color-choice'><span>ch</span><span>oi</span><span>ce</span></strong>`,maxCount:1,count:0,frequency:1,frequencyDefault:1,isBadRandomOption:!0,isInstant:!0,allowed:()=>!tech.extraChoices&&!tech.isExtraGunField&&!tech.isExtraBotOption,requires:"not emergence, cross-disciplinary, integrated circuit",effect(){tech.isDeterminism=!0;for(let e=0;e<4;e++)powerUps.spawn(m.pos.x+60*(Math.random()-.5),m.pos.y+60*(Math.random()-.5),"tech")},remove(){tech.isDeterminism=!1}},{name:"superdeterminism",description:`spawn ${powerUps.orb.tech()}${powerUps.orb.tech()}${powerUps.orb.tech()}${powerUps.orb.tech()}<br>you can't <strong class='color-cancel'>cancel</strong> and ${powerUps.orb.research(1)} no longer <strong>spawn</strong>`,maxCount:1,count:0,frequency:3,frequencyDefault:3,isBadRandomOption:!0,isInstant:!0,allowed:()=>tech.isDeterminism&&!tech.isAnsatz&&!tech.isJunkResearch&&!tech.isBrainstorm,requires:"determinism, not ansatz, pseudoscience, brainstorming",effect(){tech.isSuperDeterminism=!0;for(let e=0;e<4;e++)powerUps.spawn(m.pos.x+60*(Math.random()-.5),m.pos.y+60*(Math.random()-.5),"tech")},remove(){tech.isSuperDeterminism=!1}},{name:"technical debt",descriptionFunction:()=>`increase <strong class='color-d'>damage</strong> by <strong>4x</strong>, but reduce <strong class='color-d'>damage</strong><br>by <strong>0.15x</strong> for each ${powerUps.orb.tech()} you have<em style ="float: right;">(${(tech.totalCount>20?Math.pow(.85,tech.totalCount-20):4-.15*tech.totalCount).toFixed(2)}x)</em>`,maxCount:1,count:0,frequency:1,frequencyDefault:1,isBadRandomOption:!0,allowed:()=>!0,requires:"",effect(){tech.isTechDebt=!0},remove(){tech.isTechDebt=!1}},{name:"meta-analysis",description:`if you <strong class='color-choice'><span>ch</span><span>oo</span><span>se</span></strong> <strong class='color-junk'>JUNK</strong><br>you get a random <strong class='color-choice'><span>ch</span><span>oi</span><span>ce</span></strong> and ${powerUps.orb.research(2)} instead`,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>tech.junkChance>.1,requires:"some JUNK tech",effect(){tech.isMetaAnalysis=!0},remove(){tech.isMetaAnalysis=!1}},{name:"dark patterns",description:"<strong>1.3x</strong> <strong class='color-d'>damage</strong><br><strong>+15%</strong> chance for <strong class='color-junk'>JUNK</strong> <strong class='color-choice'><span>ch</span><span>oi</span><span>ces</span></strong>",maxCount:3,count:0,frequency:1,frequencyDefault:1,allowed:()=>tech.junkChance<1,requires:"",damage:1.3,effect(){m.damageDone*=this.damage,this.refundAmount+=tech.addJunkTechToPool(.15)},refundAmount:0,remove(){this.count&&m.alive&&(m.damageDone/=this.damage,this.refundAmount>0&&tech.removeJunkTechFromPool(this.refundAmount))}},{name:"junk DNA",descriptionFunction:()=>`increase <strong class='color-d'>damage</strong> by twice your<br><strong class='color-junk'>JUNK</strong> chance <em style ="float: right;">(${(1+2*(tech.junkChance+level.junkAdded)).toFixed(2)}x)</em>`,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>tech.junkChance>0,requires:"JUNK in tech pool",effect(){tech.isJunkDNA=!0},remove(){tech.isJunkDNA=!1}},{name:"mass production",descriptionFunction:()=>`${powerUps.orb.tech()} have extra <strong class='color-choice'><span>ch</span><span>oi</span><span>ces</span></strong> to spawn ${powerUps.orb.ammo(1)},&nbsp; ${powerUps.orb.heal(1)}, &nbsp;or&nbsp; ${powerUps.orb.research(1)}<br><strong>+3%</strong> chance to <strong class='color-dup'>duplicate</strong> spawned <strong>power ups</strong>`,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!0,requires:"",effect(){tech.isMassProduction=!0,powerUps.setPowerUpMode(),build.isExperimentSelection||simulation.isTextLogOpen||simulation.circleFlare(.03)},remove(){tech.isMassProduction=!1,this.count&&powerUps.setPowerUpMode()}},{name:"research",descriptionFunction(){return`spawn ${this.value>36?this.value+powerUps.orb.research(1):powerUps.orb.research(this.value)} <br>next time increase amount spawned by +4${powerUps.orb.research(1)}`},maxCount:9,count:0,frequency:1,frequencyDefault:1,isInstant:!0,isMassProduction:!0,allowed:()=>!0,requires:"",value:8,defaultValue:8,effect(){powerUps.spawnDelay("research",this.value),this.value+=4},remove(){}},{name:"ammo",descriptionFunction(){return`spawn ${this.value>33?this.value+powerUps.orb.ammo(1):powerUps.orb.ammo(this.value)}<br>next time increase amount spawned by +7${powerUps.orb.ammo(1)}`},maxCount:9,count:0,frequency:1,frequencyDefault:1,isInstant:!0,isMassProduction:!0,allowed:()=>!0,requires:"",value:10,defaultValue:10,effect(){powerUps.spawnDelay("ammo",this.value),this.value+=7},remove(){}},{name:"heals",descriptionFunction(){return`spawn ${this.value>30?this.value+powerUps.orb.heal(1):powerUps.orb.heal(this.value)}<br>next time increase amount spawned by +7${powerUps.orb.heal(1)}`},maxCount:9,count:0,frequency:1,frequencyDefault:1,isInstant:!0,isMassProduction:!0,allowed:()=>!0,requires:"",value:10,defaultValue:10,effect(){powerUps.spawnDelay("heal",this.value),this.value+=7},remove(){}},{name:"field coupling",descriptionFunction:()=>`spawn ${powerUps.orb.coupling(10)}<br><em>${m.couplingDescription(1)} per ${powerUps.orb.coupling(1)}</em>`,maxCount:9,count:0,frequency:1,frequencyDefault:1,isInstant:!0,allowed:()=>!0,requires:"",effect(){powerUps.spawnDelay("coupling",10)},remove(){}},{name:"quintessence",descriptionFunction(){if(this.count){let e;return converted=this.researchUsed*this.couplingToResearch,e=converted>15?`${converted} ${powerUps.orb.coupling()}`:powerUps.orb.coupling(converted),`convert ${this.researchUsed} ${powerUps.orb.research(1)} into <strong>${e}</strong><br><em>${m.couplingDescription(1)} per ${powerUps.orb.coupling(1)}</em>`}{let e,o=powerUps.research.count*this.couplingToResearch;return e=o>15?`${o} ${powerUps.orb.coupling()}`:powerUps.orb.coupling(o),`convert ${powerUps.research.count} ${powerUps.orb.research(1)} into <strong>${e}</strong><br><em>${m.couplingDescription(1)} per ${powerUps.orb.coupling(1)}</em>`}},maxCount:1,count:0,frequency:1,frequencyDefault:1,isInstant:!0,allowed:()=>powerUps.research.count>3,requires:"",researchUsed:0,couplingToResearch:3,effect(){let e=()=>{powerUps.research.count>0&&powerUps.research.count!==1/0&&(m.alive&&requestAnimationFrame(e),simulation.paused||simulation.isChoosing||(powerUps.research.changeRerolls(-1),this.researchUsed++,powerUps.spawnDelay("coupling",this.couplingToResearch)))};requestAnimationFrame(e)},remove(){this.count&&(m.couplingChange(-this.researchUsed*this.couplingToResearch),powerUps.research.changeRerolls(this.researchUsed),this.researchUsed=0)}},{name:"virtual particles",descriptionFunction:()=>`<strong>17%</strong> chance after mobs <strong>die</strong> to spawn ${powerUps.orb.coupling(1)}<br><em>${m.couplingDescription(1)} per ${powerUps.orb.coupling(1)}</em>`,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!0,requires:"",effect(){tech.isCouplingPowerUps=!0},remove(){tech.isCouplingPowerUps=!1}},{name:"fine-structure constant",descriptionFunction:()=>`after a <strong>boss</strong> <strong>dies</strong> spawn ${powerUps.orb.coupling(9)}<br><strong>lose</strong> ${powerUps.orb.coupling(3)} after mob <strong>collisions</strong>`,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!0,requires:"",value:60,effect(){tech.isCouplingNoHit=!0},remove(){tech.isCouplingNoHit=!1}},{name:"residual dipolar coupling",descriptionFunction:()=>`clicking <strong class='color-cancel'>cancel</strong> spawns ${powerUps.orb.coupling(12)}<br><em>${m.couplingDescription(1)} per ${powerUps.orb.coupling(1)}</em>`,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!tech.isSuperDeterminism,requires:"not superdeterminism",effect(){tech.isCancelCouple=!0},remove(){tech.isCancelCouple=!1}},{name:"commodities exchange",descriptionFunction:()=>`clicking <strong class='color-cancel'>cancel</strong> for ${powerUps.orb.field()}, ${powerUps.orb.tech()}, or ${powerUps.orb.gun()}<br>spawns <strong>12-21</strong> ${powerUps.orb.heal()}, ${powerUps.orb.ammo()}, or ${powerUps.orb.research(1)}`,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!tech.isSuperDeterminism,requires:"not superdeterminism",effect(){tech.isCancelRerolls=!0},remove(){tech.isCancelRerolls=!1}},{name:"options exchange",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Option_(finance)\' class="link">options exchange</a>',description:`clicking <strong class='color-cancel'>cancel</strong> for ${powerUps.orb.field()}, ${powerUps.orb.tech()}, or ${powerUps.orb.gun()}<br>\n        <strong>randomizes</strong> and <strong>3x</strong> <strong class='color-choice'><span>ch</span><span>oi</span><span>ces</span></strong>, once a level`,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!tech.isSuperDeterminism,requires:"not superdeterminism",effect(){tech.isCancelTech=!0,tech.cancelTechCount=0},remove(){tech.isCancelTech=!1,tech.cancelTechCount=0}},{name:"futures exchange",description:`clicking <strong class='color-cancel'>cancel</strong> for ${powerUps.orb.field()}, ${powerUps.orb.tech()}, or ${powerUps.orb.gun()}<br>gives <strong>+8%</strong> power up <strong class='color-dup'>duplication</strong> chance`,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>tech.duplicationChance()<1&&!tech.isSuperDeterminism,requires:"below 100% duplication chance, not superdeterminism",effect(){tech.isCancelDuplication=!0,powerUps.setPowerUpMode()},remove(){tech.isCancelDuplication=!1,this.count&&powerUps.setPowerUpMode()}},{name:"replication",description:"<strong>+10%</strong> chance to <strong class='color-dup'>duplicate</strong> spawned <strong>power ups</strong><br><strong>+10%</strong> chance for <strong class='color-junk'>JUNK</strong> <strong class='color-choice'><span>ch</span><span>oi</span><span>ces</span></strong>",maxCount:9,count:0,frequency:1,frequencyDefault:1,allowed:()=>tech.duplicationChance()<1&&tech.junkChance<1,requires:"below 100% duplication chance",effect(){tech.duplicateChance+=.1,powerUps.setPowerUpMode(),build.isExperimentSelection||simulation.isTextLogOpen||simulation.circleFlare(.1),this.refundAmount+=tech.addJunkTechToPool(.1)},refundAmount:0,remove(){tech.duplicateChance=0,powerUps.setPowerUpMode(),this.count>0&&this.refundAmount>0&&(tech.removeJunkTechFromPool(this.refundAmount),this.refundAmount=0)}},{name:"metastability",description:"<strong>+13%</strong> chance to <strong class='color-dup'>duplicate</strong> spawned <strong>power ups</strong><br><strong class='color-dup'>duplicates</strong> <strong class='color-e'>explode</strong> with a <strong>4</strong> second <strong>half-life</strong>",maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>tech.duplicationChance()<1,requires:"below 100% duplication chance",effect(){tech.isPowerUpsVanish=!0,powerUps.setPowerUpMode(),build.isExperimentSelection||simulation.isTextLogOpen||simulation.circleFlare(.11)},remove(){tech.isPowerUpsVanish=!1,this.count&&powerUps.setPowerUpMode()}},{name:"correlated damage",descriptionFunction:()=>`<strong class='color-dup'>duplication</strong> increases <strong class='color-d'>damage</strong><br><em style ="float: right;">(${(1+Math.min(1,tech.duplicationChance())).toFixed(2)}x)</em>`,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>tech.duplicationChance()>.03,requires:"duplication chance > 3%",effect(){tech.isDupDamage=!0},remove(){tech.isDupDamage=!1}},{name:"parthenogenesis",description:"<strong>+8%</strong> chance to <strong class='color-dup'>duplicate</strong> spawned <strong>power ups</strong><br><strong class='color-dup'>duplication</strong> also <strong class='color-dup'>duplicates</strong> <strong>mobs</strong>",maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>tech.duplicationChance()>0,requires:"some duplication chance",effect(){tech.isDuplicateMobs=!0,powerUps.setPowerUpMode(),build.isExperimentSelection||simulation.isTextLogOpen||simulation.circleFlare(.08)},remove(){tech.isDuplicateMobs=!1,this.count&&powerUps.setPowerUpMode()}},{name:"stimulated emission",description:`<strong>+20%</strong> chance to <strong class='color-dup'>duplicate</strong> spawned <strong>power ups</strong>,<br><strong>collisions</strong> <span class='color-remove'>eject</span> a random ${powerUps.orb.tech()}`,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>tech.duplicationChance()<1,requires:"below 1% duplication chance",effect(){tech.isStimulatedEmission=!0,powerUps.setPowerUpMode(),build.isExperimentSelection||simulation.isTextLogOpen||simulation.circleFlare(.2)},remove(){tech.isStimulatedEmission=!1,this.count&&powerUps.setPowerUpMode()}},{name:"strange attractor",descriptionFunction:()=>"<strong>1.1x</strong> <strong class='color-d'>damage</strong><br><span class='color-remove'>removing</span> this increases <strong class='color-dup'>duplication</strong> by <strong>+11%</strong>",maxCount:1,count:0,frequency:1,frequencyDefault:1,isBadRandomOption:!0,allowed:()=>!0,requires:"",damage:1.1,effect(){m.damageDone*=this.damage},isRemoveBenefit:!0,remove(){this.count>0&&m.alive&&(tech.duplication+=.11,powerUps.setPowerUpMode(),build.isExperimentSelection||simulation.isTextLogOpen||simulation.circleFlare(.11),m.damageDone/=this.damage,this.frequency=0)}},{name:"strange loop",description:`<strong>1.1x</strong> <strong class='color-d'>damage</strong><br><span class='color-remove'>removing</span> this gives a random ${powerUps.orb.tech()} with <span class='color-remove'>remove</span>`,maxCount:1,count:0,frequency:1,frequencyDefault:1,isBadRandomOption:!0,allowed:()=>!0,requires:"",damage:1.1,effect(){m.damageDone*=this.damage},isRemoveBenefit:!0,remove(){this.count>0&&m.alive&&(m.damageDone/=this.damage,this.frequency=0,requestAnimationFrame(()=>{const e=[];for(let o=0,t=tech.tech.length;o<t;o++)tech.tech[o].isRemoveBenefit&&0===tech.tech[o].count&&e.push(o);const o=e[Math.floor(Math.random()*e.length)];tech.giveTech(tech.tech[o].name)}))}},{name:"null hypothesis",description:`<strong>1.1x</strong> <strong class='color-d'>damage</strong><br><span class='color-remove'>removing</span> this spawns ${powerUps.orb.research(15)}`,maxCount:1,count:0,frequency:1,frequencyDefault:1,isBadRandomOption:!0,allowed:()=>!0,requires:"",damage:1.1,effect(){m.damageDone*=this.damage},isRemoveBenefit:!0,remove(){this.count>0&&m.alive&&(m.damageDone/=this.damage,requestAnimationFrame(()=>{powerUps.spawnDelay("research",15)}),this.frequency=0)}},{name:"martingale",descriptionFunction(){return`<span style = 'font-size:95%;'><strong>${(1+this.damage).toFixed(1)}x</strong> <strong class='color-d'>damage</strong>. <span class='color-remove'>removing</span> this has a <strong>50%</strong><br>chance return with <strong>2x</strong> its <strong class='color-d'>damage</strong> <em style ="float: right;">(${(1+this.damage).toFixed(1)}x→${(1+2*this.damage).toFixed(1)}x)</em></span>`},maxCount:1,count:0,frequency:1,frequencyDefault:1,isBadRandomOption:!0,allowed:()=>!0,requires:"",damage:.1,effect(){m.damageDone*=1+this.damage},isRemoveBenefit:!0,remove(){this.count>0&&m.alive&&(m.damageDone/=1+this.damage,Math.random()<.5&&(this.damage*=2,requestAnimationFrame(()=>{tech.giveTech("martingale")})),this.frequency=0)}},{name:"arms trade",descriptionFunction:()=>`<strong>1.1x</strong> <strong class='color-d'>damage</strong><br><span class='color-remove'>removing</span> this spawns ${powerUps.orb.gun()}${powerUps.orb.gun()}`,maxCount:1,count:0,frequency:1,frequencyDefault:1,isBadRandomOption:!0,allowed:()=>!0,requires:"",damage:1.1,ammo:50,effect(){m.damageDone*=this.damage},isRemoveBenefit:!0,remove(){this.count>0&&m.alive&&(m.damageDone/=this.damage,this.frequency=0,requestAnimationFrame(()=>{powerUps.spawnDelay("ammo",this.ammo)}))}},{name:"externality",descriptionFunction(){return`<strong>1.1x</strong> <strong class='color-d'>damage</strong><br><span class='color-remove'>removing</span> this spawns <strong>${this.ammo}</strong> ${powerUps.orb.ammo()}`},maxCount:1,count:0,frequency:1,frequencyDefault:1,isBadRandomOption:!0,allowed:()=>!0,requires:"",damage:1.1,ammo:50,effect(){m.damageDone*=this.damage},isRemoveBenefit:!0,remove(){this.count>0&&m.alive&&(m.damageDone/=this.damage,this.frequency=0,requestAnimationFrame(()=>{powerUps.spawnDelay("ammo",this.ammo)}))}},{name:"deprecated",scale:.08,descriptionFunction(){return`after <span class='color-remove'>removing</span> this gain <strong>${1+this.scale}x</strong> <strong class='color-d'>damage</strong><br>per ${powerUps.orb.tech()} <span class='color-remove'>removed</span> this game<em style ="float: right;">(${(1+this.scale*((0===this.frequency?0:1)+tech.removeCount)).toFixed(2)}x)</em>`},maxCount:1,count:0,frequency:1,frequencyDefault:1,isBadRandomOption:!0,allowed:()=>!0,requires:"",damage:1.1,effect(){},isRemoveBenefit:!0,remove(){this.count>0&&m.alive&&(m.damageDone*=1+this.scale*(1+tech.removeCount),this.frequency=0)}},{name:"planned obsolescence",descriptionFunction:()=>`at the start of each <strong>level</strong> <span class='color-remove'>eject</span> your oldest ${powerUps.orb.tech()}<br>and gain <strong>1.1x</strong> <strong class='color-d'>damage</strong> each time`,maxCount:1,count:0,frequency:1,frequencyDefault:1,isBadRandomOption:!0,allowed:()=>!0,requires:"",effect(){tech.isEjectOld=!0},remove(){tech.isEjectOld=!1}},{name:"paradigm shift",descriptionFunction:()=>`when <strong>paused</strong> clicking your ${powerUps.orb.tech()} <span class='color-remove'>ejects</span> them<br>costs <strong>${(tech.pauseEjectTech*m.defense()).toFixed(1)}</strong> ${tech.isEnergyHealth?"<strong class='color-f'>energy</strong>":"<strong class='color-h'>health</strong>"} <em style ="float: right;">(1.3x cost each use)</em>`,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!tech.isSuperDeterminism,requires:"not superdeterminism",effect(){tech.isPauseEjectTech=!0},remove(){tech.isPauseEjectTech=!1}},{name:"Born rule",description:`<span class='color-remove'>eject</span> all your ${powerUps.orb.tech()}`,maxCount:1,count:0,frequency:1,frequencyDefault:1,isInstant:!0,isBadRandomOption:!0,allowed:()=>tech.totalCount>6,requires:"more than 6 tech",effect(){let e=0;for(let o=0,t=tech.tech.length;o<t;o++)!tech.tech[o].isInstant&&tech.tech[o].count&&(e+=tech.tech[o].count,tech.removeTech(o));powerUps.spawnDelay("tech",e)},remove(){}},{name:"Occams razor",descriptionFunction(){return`randomly <span class='color-remove'>remove</span> <strong>half</strong> your ${powerUps.orb.tech()}<br>for each removed <strong>${(1+this.damagePerRemoved).toFixed(2)}x</strong> <strong class='color-d'>damage</strong> <em style ="float: right;">(~${(0===this.count?1+.5*this.damagePerRemoved*tech.totalCount:this.damage).toFixed(2)}x)</em>`},maxCount:1,count:0,frequency:1,frequencyDefault:1,isInstant:!0,isBadRandomOption:!0,allowed:()=>tech.totalCount>6,requires:"more than 6 tech",damagePerRemoved:.5,damage:null,effect(){let e=[];for(let o=0,t=tech.tech.length;o<t;o++)tech.tech[o].count&&!tech.tech[o].isInstant&&e.push(o);e.sort(()=>Math.random()-.5);let o=0;for(let t=0,n=.5*e.length;t<n;t++)o+=tech.removeTech(e[t]);this.damage=this.damagePerRemoved*o,m.damageDone*=1+this.damage,simulation.inGameConsole(`<span class='color-var'>tech</span>.damage *= ${(1+this.damage).toFixed(2)} <em>//from Occam's razor</em>`)},remove(){this.count&&m.alive&&(m.damageDone/=1+this.damage)}},{name:"exchange symmetry",description:`<span class='color-remove'>remove</span> a random ${powerUps.orb.tech()}<br>spawn ${powerUps.orb.gun()}${powerUps.orb.gun()}${powerUps.orb.gun()}`,maxCount:1,count:0,frequency:1,frequencyDefault:1,isInstant:!0,isBadRandomOption:!0,allowed:()=>tech.totalCount>3&&!tech.isSuperDeterminism,requires:"at least 4 tech, not superdeterminism",effect(){const e=[];for(let o=0;o<tech.tech.length;o++)tech.tech[o].count>0&&!tech.tech[o].isInstant&&e.push(o);const o=e[Math.floor(Math.random()*e.length)];for(let e=0;e<tech.tech[o].count;e++)powerUps.spawn(m.pos.x,m.pos.y-20,"gun");powerUps.spawn(m.pos.x+20,m.pos.y-1,"gun"),powerUps.spawn(m.pos.x-20,m.pos.y+1,"gun"),tech.removeTech(o)},remove(){}},{name:"indistinguishable particles",description:`<span class='color-remove'>remove</span> a random ${powerUps.orb.tech()}<br>spawn ${powerUps.orb.field()}${powerUps.orb.field()}${powerUps.orb.field()}`,maxCount:1,count:0,frequency:1,frequencyDefault:1,isInstant:!0,isBadRandomOption:!0,allowed:()=>tech.totalCount>3&&!tech.isSuperDeterminism,requires:"at least 4 tech, not superdeterminism",effect(){const e=[];for(let o=0;o<tech.tech.length;o++)tech.tech[o].count>0&&!tech.tech[o].isInstant&&e.push(o);const o=e[Math.floor(Math.random()*e.length)];for(let e=0;e<tech.tech[o].count;e++)powerUps.spawn(m.pos.x,m.pos.y-20,"field");powerUps.spawn(m.pos.x+20,m.pos.y-1,"field"),powerUps.spawn(m.pos.x-20,m.pos.y+1,"field"),tech.removeTech(o)},remove(){}},{name:"Monte Carlo method",description:`<span class='color-remove'>remove</span> a random ${powerUps.orb.tech()}<br>spawn ${powerUps.orb.tech()}${powerUps.orb.tech()}`,maxCount:1,count:0,frequency:1,frequencyDefault:1,isInstant:!0,isBadRandomOption:!0,allowed:()=>tech.totalCount>3&&tech.duplicationChance()>0&&!tech.isSuperDeterminism,requires:"some duplication, at least 4 tech, not superdeterminism",effect(){const e=tech.removeTech();for(let o=0;o<e+1;o++)powerUps.spawn(m.pos.x+60*(Math.random()-.5),m.pos.y+60*(Math.random()-.5),"tech")},remove(){}},{name:"needle ice",description:"after <strong>needles</strong> impact walls<br>they chip off <strong>1-2</strong> freezing <strong class='color-s'>ice IX</strong> crystals",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>(tech.isNeedles||tech.isNeedles)&&!tech.needleTunnel,requires:"nail gun, needle gun, not nanowires",effect(){tech.isNeedleIce=!0},remove(){tech.isNeedleIce=!1}},{name:"nanowires",description:"<strong>needles</strong> tunnel through <strong class='color-block'>blocks</strong> and <strong>map</strong><br><strong>1.2x</strong> needle <strong class='color-d'>damage</strong>",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>(tech.haveGunCheck("nail gun")&&tech.isNeedles||tech.isNeedles&&tech.haveGunCheck("shotgun"))&&!tech.isNeedleIce,requires:"nail gun, needle gun, not needle ice",effect(){tech.needleTunnel=!0},remove(){tech.needleTunnel=!1}},{name:"ceramics",descriptionFunction:()=>`<strong>needles</strong> and ${b.guns[9].harpoonName()} pierce <strong>shields</strong><br>directly <strong class='color-d'>damaging</strong> shielded mobs`,isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>!tech.isLargeHarpoon&&tech.haveGunCheck("harpoon")||tech.isNeedles||tech.isHookDefense,requires:"needle gun, harpoon, not Bessemer process",effect(){tech.isShieldPierce=!0},remove(){tech.isShieldPierce=!1}},{name:"needle gun",description:"<strong>nail gun</strong> and <strong>shotgun</strong> fire mob piercing <strong>needles</strong>",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>(tech.haveGunCheck("nail gun")&&!tech.nailInstantFireRate&&!tech.nailRecoil&&!tech.isRicochet||tech.haveGunCheck("shotgun")&&!tech.isNailShot&&!tech.isFoamShot&&!tech.isSporeWorm&&!tech.isSporeFlea)&&!tech.isRivets&&!tech.isIncendiary&&!tech.isIceCrystals&&!tech.isIceShot,requires:"nail gun, shotgun, not ice crystal, rivets, rotary cannon, pneumatic, incendiary, nail-shot, foam-shot, worm-shot, ice-shot",effect(){for(tech.isNeedles=!0,i=0,len=b.guns.length;i<len;i++)if("nail gun"===b.guns[i].name){b.guns[i].ammo=Math.ceil(b.guns[i].ammo/this.ammoScale),b.guns[i].ammoPack=b.guns[i].defaultAmmoPack/this.ammoScale,b.guns[i].chooseFireMethod(),simulation.updateGunHUD();break}},ammoScale:3,remove(){if(this.count>0)for(tech.isNeedles=!1,i=0,len=b.guns.length;i<len;i++)if("nail gun"===b.guns[i].name){b.guns[i].ammo=Math.ceil(b.guns[i].ammo*this.ammoScale),b.guns[i].ammoPack=b.guns[i].ammoPack*this.ammoScale,b.guns[i].chooseFireMethod(),simulation.updateGunHUD();break}tech.isNeedles=!1}},{name:"stress concentration",description:"mobs below <strong>half</strong> durability <strong>die</strong> after you shoot<br>them near their <strong>center</strong> with <strong>needles</strong> or <strong>rivets</strong>",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>(tech.isNeedles||tech.isRivets)&&!tech.isNailCrit&&!tech.isIncendiary,requires:"needles, rivets, not incendiary, supercritical fission",effect(){tech.isCritKill=!0},remove(){tech.isCritKill=!1}},{name:"rivet gun",description:"<strong>nail gun</strong> and <strong>shotgun</strong> slowly lob a heavy <strong>rivet</strong>",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>(tech.haveGunCheck("nail gun")&&!tech.nailInstantFireRate&&!tech.isRicochet||tech.haveGunCheck("shotgun")&&!tech.isNailShot&&!tech.isFoamShot&&!tech.isSporeWorm&&!tech.isSporeFlea)&&!tech.isNeedles&&!tech.isIceCrystals&&!tech.isIceShot,requires:"nail gun, shotgun, not ice crystal, needles, or pneumatic actuator",effect(){for(tech.isRivets=!0,i=0,len=b.guns.length;i<len;i++)if("nail gun"===b.guns[i].name){b.guns[i].chooseFireMethod();break}},remove(){if(tech.isRivets)for(tech.isRivets=!1,i=0,len=b.guns.length;i<len;i++)if("nail gun"===b.guns[i].name){b.guns[i].chooseFireMethod();break}tech.isRivets=!1}},{name:"pneumatic actuator",description:"<strong>nail gun</strong> takes <strong>no</strong> time to ramp up<br>to its fastest <em>fire rate</em>",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("nail gun")&&!tech.isRivets&&!tech.isNeedles&&!tech.nailRecoil,requires:"nail gun, not rotary cannon, rivets, or needles",effect(){for(tech.nailInstantFireRate=!0,i=0,len=b.guns.length;i<len;i++)"nail gun"===b.guns[i].name&&b.guns[i].chooseFireMethod()},remove(){if(tech.nailInstantFireRate)for(tech.nailInstantFireRate=!1,i=0,len=b.guns.length;i<len;i++)"nail gun"===b.guns[i].name&&b.guns[i].chooseFireMethod()}},{name:"ice crystal nucleation",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Nucleation\' class="link">ice crystal nucleation</a>',description:"<strong>nail gun</strong> uses <strong class='color-f'>energy</strong> instead of <strong class='color-ammo'>ammo</strong><br>to condense <strong class='color-s'>freezing</strong> <strong>ice nails</strong>",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("nail gun")&&!tech.isRivets&&!tech.isNeedles,requires:"nail gun, not rivets, needles",effect(){tech.isIceCrystals=!0,b.guns[0].ammoPack=1/0,b.guns[0].recordedAmmo=b.guns[0].ammo,b.guns[0].ammo=1/0,simulation.updateGunHUD()},remove(){tech.isIceCrystals&&(tech.isIceCrystals=!1,b.guns[0].ammoPack=b.guns[0].defaultAmmoPack,b.guns[0].recordedAmmo&&(b.guns[0].ammo=b.guns[0].recordedAmmo),simulation.updateGunHUD(),this.count&&requestAnimationFrame(()=>{simulation.updateGunHUD()})),tech.isIceCrystals=!1,b.guns[0].ammo===1/0&&(b.guns[0].ammo=0)}},{name:"rotary cannon",description:'<strong>nail gun</strong> has increased muzzle <strong class="color-speed">speed</strong>,<br>maximum <em>fire rate</em>, <strong>accuracy</strong>, and <strong>recoil</strong>',isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("nail gun")&&!tech.nailInstantFireRate&&!tech.isNeedles,requires:"nail gun, not pneumatic actuator, needle gun",effect(){for(tech.nailRecoil=!0,i=0,len=b.guns.length;i<len;i++)"nail gun"===b.guns[i].name&&b.guns[i].chooseFireMethod()},remove(){if(tech.nailRecoil)for(tech.nailRecoil=!1,i=0,len=b.guns.length;i<len;i++)"nail gun"===b.guns[i].name&&b.guns[i].chooseFireMethod()}},{name:"gauge",description:"<strong>rivets</strong>, <strong>needles</strong>, <strong>super balls</strong>, and <strong>nails</strong><br>have <strong>1.3x</strong> mass and physical <strong class='color-d'>damage</strong>",isGunTech:!0,maxCount:9,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.hookNails+tech.isMineDrop+tech.isNailBotUpgrade+tech.fragments+tech.nailsDeathMob+2*(tech.haveGunCheck("super balls")+(tech.haveGunCheck("mine")&&!tech.isFoamMine)+tech.haveGunCheck("nail gun")+tech.isNeedles+tech.isNailShot+tech.isRivets)>1,requires:"nails, nail gun, rivets, shotgun, super balls, mine",effect(){tech.bulletSize=1+.25*Math.pow(this.count+1,.5)},remove(){tech.bulletSize=1}},{name:"supercritical fission",description:"if <strong>nails</strong>, <strong>needles</strong>, or <strong>rivets</strong> strike mobs<br>near their <strong>center</strong> they trigger an <strong class='color-e'>explosion</strong>",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>(tech.isNailShot||tech.isNeedles||tech.isNailBotUpgrade||tech.haveGunCheck("nail gun")||tech.isRivets||(tech.isMineDrop||tech.haveGunCheck("mine"))&&!(tech.isFoamMine||tech.isSuperMine))&&!tech.isIncendiary&&!tech.isCritKill,requires:"nail gun, mine, needles, nails, rivets, not incendiary, stress concentration",effect(){tech.isNailCrit=!0},remove(){tech.isNailCrit=!1}},{name:"irradiated nails",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Irradiation\' class="link">irradiated nails</a>',description:"<strong>nails</strong>, <strong>needles</strong>, and <strong>rivets</strong> are <strong class='color-p'>radioactive</strong><br><strong>2x</strong> <strong class='color-p'>radioactive</strong> <strong class='color-d'>damage</strong> over <strong>3</strong> seconds",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.isNailBotUpgrade||tech.hookNails||tech.fragments||tech.nailsDeathMob||(tech.isMineDrop||tech.haveGunCheck("mine"))&&!(tech.isFoamMine||tech.isSuperMine)||tech.haveGunCheck("nail gun")&&!tech.isShieldPierce||tech.haveGunCheck("shotgun")&&(tech.isNeedles||tech.isNailShot),requires:"nail gun, nails, rivets, mine, not ceramic needles",effect(){tech.isNailRadiation=!0},remove(){tech.isNailRadiation=!1}},{name:"6s half-life",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Half-life\' class="link">6s half-life</a>',description:"<span style = 'font-size:90%;'><strong>nails</strong>, <strong>needles</strong>, <strong>rivets</strong> are made of <strong class='color-p'>plutonium-238</strong></span><br><strong class='color-p'>radioactive</strong> <strong class='color-d'>damage</strong> lasts <strong>+3</strong> seconds",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.isNailRadiation&&!tech.isFastRadiation,requires:"nail gun, mine, irradiated nails, not 1s half-life",effect(){tech.isSlowRadiation=!0},remove(){tech.isSlowRadiation=!1}},{name:"1s half-life",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Half-life\' class="link">1s half-life</a>',description:"<span style = 'font-size:95%;'><strong>nails</strong>, <strong>needles</strong>, <strong>rivets</strong> are made of <strong class='color-p'>lithium-8</strong><br><strong>4x</strong> <strong class='color-p'>radioactive</strong> <strong class='color-d'>damage</strong> for <strong>1</strong> second</span>",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.isNailRadiation&&!tech.isSlowRadiation,requires:"nail gun, mine, irradiated nails, not 6s half-life",effect(){tech.isFastRadiation=!0},remove(){tech.isFastRadiation=!1}},{name:"spin-statistics",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Spin%E2%80%93statistics_theorem\' class="link">spin-statistics</a>',description:`after firing the <strong>shotgun</strong> you are <strong class="color-invulnerable">invulnerable</strong><br>shotgun has <strong>0.6x</strong> bullets per ${powerUps.orb.ammo(1)}`,isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("shotgun"),requires:"shotgun",effect(){for(tech.isShotgunImmune=!0,i=0,len=b.guns.length;i<len;i++)if("shotgun"===b.guns[i].name){b.guns[i].ammo=Math.ceil(.6*b.guns[i].ammo),b.guns[i].ammoPack*=.6;break}simulation.updateGunHUD()},remove(){if(tech.isShotgunImmune=!1,this.count>0)for(i=0,len=b.guns.length;i<len;i++)if("shotgun"===b.guns[i].name){b.guns[i].ammoPack/=.6,b.guns[i].ammo=Math.ceil(b.guns[i].ammo/.6),simulation.updateGunHUD();break}}},{name:"Newtons 3rd law",description:"<strong>1.7x</strong> <strong>shotgun</strong> <em>fire rate</em> and <strong>recoil</strong>",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("shotgun")&&!tech.isShotgunReversed,requires:"shotgun, not Noether violation",effect(){tech.isShotgunRecoil=!0},remove(){tech.isShotgunRecoil=!1}},{name:"Noether violation",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Noether%27s_theorem\' class="link">Noether violation</a>',description:"<strong>1.5x</strong> <strong>shotgun</strong> <strong class='color-d'>damage</strong><br><strong>shotgun</strong> <strong>recoil</strong> is reversed",isGunTech:!0,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>tech.haveGunCheck("shotgun")&&!tech.isShotgunRecoil,requires:"shotgun, not Newtons 3rd law",effect(){tech.isShotgunReversed=!0},remove(){tech.isShotgunReversed=!1}},{name:"repeater",description:"<strong>shotgun</strong> immediately fires again for no <strong class='color-ammo'>ammo</strong><br>reduced <strong>0.5x</strong> <strong>shotgun</strong> <em>fire rate</em>",isGunTech:!0,maxCount:9,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("shotgun"),requires:"shotgun, not Newtons 3rd law",effect(){tech.shotgunExtraShots++},remove(){tech.shotgunExtraShots=0}},{name:"nail-shot",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Nail_(fastener)\' class="link">nail-shot</a>',description:"<strong>shotgun</strong> drives a long clip of <strong>nails</strong>",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("shotgun")&&!tech.isIncendiary&&!tech.isRivets&&!tech.isIceShot&&!tech.isFoamShot&&!tech.isSporeWorm&&!tech.isSporeFlea&&!tech.isNeedles,requires:"shotgun, not incendiary, rivets, foam-shot, worm-shot, ice-shot, needles",effect(){tech.isNailShot=!0},remove(){tech.isNailShot=!1}},{name:"foam-shot",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Foam\' class="link">foam-shot</a>',description:"<strong>shotgun</strong> sprays sticky <strong>foam</strong> bubbles",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("shotgun")&&!tech.isNailShot&&!tech.isIncendiary&&!tech.isRivets&&!tech.isIceShot&&!tech.isSporeWorm&&!tech.isSporeFlea&&!tech.isNeedles,requires:"shotgun, not incendiary, nail-shot, rivet, worm-shot, ice-shot, needle",effect(){tech.isFoamShot=!0},remove(){tech.isFoamShot=!1}},{name:"ice-shot",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Ice-nine_(disambiguation)\' class="link">ice-shot</a>',description:"<strong>shotgun</strong> condenses <strong class='color-s'>ice IX</strong> crystals<br>that <strong class='color-s'>freeze</strong> mobs",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("shotgun")&&!tech.isNailShot&&!tech.isIncendiary&&!tech.isRivets&&!tech.isFoamShot&&!tech.isSporeWorm&&!tech.isSporeFlea&&!tech.isNeedles,requires:"shotgun, not incendiary, nail-shot, rivet, foam-shot, worm-shot",effect(){tech.isIceShot=!0},remove(){tech.isIceShot=!1}},{name:"freezer burn",description:"mobs <strong class='color-s'>frozen</strong> while below <strong>33%</strong> durability <strong>die</strong>",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.isIceCrystals||tech.isSporeFreeze||4===m.fieldMode&&2===simulation.molecularMode||tech.isIceShot||tech.isNeedleIce||m.coupling&&(2===m.fieldMode||0===m.fieldMode),requires:"a freeze effect",effect(){tech.isIceKill=!0},remove(){tech.isIceKill=!1}},{name:"flash freeze",description:"mobs <strong class='color-s'>frozen</strong> while above <strong>66%</strong> durability<br>have their durability reduced to <strong>66%</strong>",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.isIceCrystals||tech.isSporeFreeze||4===m.fieldMode&&2===simulation.molecularMode||tech.isIceShot||tech.isNeedleIce||m.coupling&&(2===m.fieldMode||0===m.fieldMode),requires:"a freeze effect",effect(){tech.isIceMaxHealthLoss=!0},remove(){tech.isIceMaxHealthLoss=!1}},{name:"crystallizer",description:"after <strong class='color-s'>frozen</strong> mobs <strong>die</strong> they<br>shatter into <strong class='color-s'>ice IX</strong> crystals",isGunTech:!0,maxCount:9,count:0,frequency:2,frequencyDefault:2,allowed:()=>(tech.isIceCrystals||tech.isSporeFreeze||4===m.fieldMode&&2===simulation.molecularMode||tech.isIceShot||tech.isNeedleIce||m.coupling&&(2===m.fieldMode||0===m.fieldMode))&&!tech.sporesOnDeath&&!tech.isExplodeMob&&!tech.botSpawner&&!tech.isMobBlockFling&&!tech.nailsDeathMob,requires:"a localized freeze effect, no other mob death tech",effect(){tech.iceIXOnDeath++},remove(){tech.iceIXOnDeath=0}},{name:"thermoelectric effect",description:"after <strong>killing</strong> mobs with <strong class='color-s'>ice IX</strong><br><strong>+100</strong> <strong class='color-f'>energy</strong>",isGunTech:!0,maxCount:9,count:0,frequency:2,frequencyDefault:2,allowed:()=>4===m.fieldMode&&2===simulation.molecularMode||tech.isNeedleIce||m.coupling&&(2===m.fieldMode||0===m.fieldMode)||tech.iceIXOnDeath||tech.isIceShot,requires:"ice IX",effect(){tech.iceEnergy++},remove(){tech.iceEnergy=0}},{name:"superfluidity",description:"<strong class='color-s'>freeze</strong> effects are applied<br>to a small <strong>area</strong> around the target",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.isIceCrystals||tech.isSporeFreeze||4===m.fieldMode&&2===simulation.molecularMode||tech.isNeedleIce||m.coupling&&(2===m.fieldMode||0===m.fieldMode)||tech.iceIXOnDeath||tech.isIceShot,requires:"a localized freeze effect",effect(){tech.isAoESlow=!0},remove(){tech.isAoESlow=!1}},{name:"triple point",descriptionFunction:()=>"<strong>+5</strong> second <strong class='color-s'>freeze</strong> duration",isGunTech:!0,maxCount:3,count:0,frequency:1,frequencyDefault:1,allowed:()=>tech.isIceCrystals||tech.isSporeFreeze||4===m.fieldMode&&2===simulation.molecularMode||tech.isIceShot||tech.isNeedleIce||m.coupling&&(2===m.fieldMode||0===m.fieldMode),requires:"a localized freeze effect",effect(){tech.iceIXFreezeTime+=300},remove(){tech.iceIXFreezeTime=150}},{name:"incendiary ammunition",description:"<strong>shotgun</strong>, <strong>rivets</strong>, <strong>super balls</strong>, and <strong>drones</strong><br>are loaded with <strong class='color-e'>explosives</strong>",isGunTech:!0,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>tech.haveGunCheck("shotgun")&&!tech.isNailShot&&!tech.isIceShot&&!tech.isRivets&&!tech.isFoamShot&&!tech.isSporeWorm&&!tech.isSporeFlea&&!tech.isNeedles||(tech.haveGunCheck("super balls")||tech.isSuperMine)&&!tech.isSuperBounce&&!tech.isFoamBall&&!tech.isSuperHarm||tech.isRivets&&!tech.isNailCrit||4===m.fieldMode&&3===simulation.molecularMode||tech.haveGunCheck("drones")&&!tech.isForeverDrones&&!tech.isDroneRadioactive&&!tech.isDroneTeleport,requires:"shotgun, super balls, rivets, drones, not irradiated drones, burst drones, polyurethane, Zectron",effect(){tech.isIncendiary=!0},remove(){tech.isIncendiary=!1}},{name:"rebound",description:"after they collide with a mob, <strong>super balls</strong><br>gain <strong class=\"color-speed\">speed</strong>, <strong>duration</strong>, and <strong>1.3x</strong> <strong class='color-d'>damage</strong>",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>(tech.haveGunCheck("super balls")||tech.isSuperMine)&&!tech.isIncendiary&&!tech.isFoamBall,requires:"super balls, not incendiary",effect(){tech.isSuperBounce=!0},remove(){tech.isSuperBounce=!1}},{name:"Zectron",description:"<strong>2x</strong> <strong>super ball</strong> <strong class='color-d'>damage</strong>, but<br>after you collide with <strong>super balls</strong> they stop",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>(tech.haveGunCheck("super balls")||tech.isSuperMine)&&!tech.isIncendiary&&!tech.isBulletTeleport,requires:"super balls not incendiary ammunition, uncertainty principle",effect(){tech.isSuperHarm=!0},remove(){tech.isSuperHarm=!1}},{name:"polyurethane foam",descriptionFunction:()=>`<strong>super balls</strong> and ${b.guns[9].harpoonName()} colliding with <strong>mobs</strong><br>catalyzes a reaction that yields <strong>foam</strong> bubbles`,isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>(tech.haveGunCheck("super balls")||tech.isSuperMine)&&!tech.isSuperBounce||tech.haveGunCheck("harpoon")&&!tech.fragments||tech.isHookDefense,requires:"super balls, harpoon, not fragmentation",effect(){tech.isFoamBall=!0},remove(){tech.isFoamBall=!1}},{name:"autocannon",description:"fire <strong>+2</strong> <strong>super balls</strong> in a line<br><strong>1.4x</strong> <strong>super ball</strong> velocity and gravity",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("super balls")&&!tech.oneSuperBall,requires:"super balls, but not the tech super ball",effect(){for(tech.superBallDelay=!0,i=0,len=b.guns.length;i<len;i++)"super balls"===b.guns[i].name&&b.guns[i].chooseFireMethod()},remove(){if(tech.superBallDelay)for(tech.superBallDelay=!1,i=0,len=b.guns.length;i<len;i++)"super balls"===b.guns[i].name&&b.guns[i].chooseFireMethod()}},{name:"super duper",description:"randomly fire <strong>+0</strong>, <strong>+1</strong>, <strong>+2</strong>, or <strong>+3</strong> extra <strong>super balls</strong>",isGunTech:!0,maxCount:9,count:0,frequency:2,frequencyDefault:2,allowed:()=>(tech.haveGunCheck("super balls")||tech.isSuperMine)&&!tech.oneSuperBall,requires:"super balls, not super ball",effect(){tech.extraSuperBalls+=4},remove(){tech.extraSuperBalls=0}},{name:"super ball",description:"fire just <strong>1 large</strong> super <strong>ball</strong><br>that <strong>stuns</strong> mobs for <strong>2</strong> seconds",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>(tech.haveGunCheck("super balls")||tech.isSuperMine)&&!tech.extraSuperBalls&&!tech.superBallDelay,requires:"super balls, not super duper or autocannon",effect(){for(tech.oneSuperBall=!0,i=0,len=b.guns.length;i<len;i++)"super balls"===b.guns[i].name&&b.guns[i].chooseFireMethod()},remove(){if(tech.oneSuperBall)for(tech.oneSuperBall=!1,i=0,len=b.guns.length;i<len;i++)"super balls"===b.guns[i].name&&b.guns[i].chooseFireMethod()}},{name:"phase velocity",description:"wave particles <strong>propagate</strong> faster as <strong>solids</strong><br><strong>1.5x</strong> wave <strong class='color-d'>damage</strong>",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("wave")&&!tech.isLongitudinal,requires:"wave, not phonon",effect(){tech.isPhaseVelocity=!0},remove(){tech.isPhaseVelocity=!1}},{name:"amplitude",description:"<strong>1.4x</strong> wave <strong class='color-d'>damage</strong><br><strong>1.4x</strong> wave bullet <strong>amplitude</strong>",isGunTech:!0,maxCount:3,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("wave")||tech.isSoundBotUpgrade,requires:"wave",effect(){tech.waveFrequency*=.66,tech.wavePacketDamage*=1.4},remove(){tech.waveFrequency=.2,tech.wavePacketDamage=1}},{name:"propagation",description:"<strong>0.75x</strong> wave propagation <strong class=\"color-speed\">speed</strong><br><strong>1.4x</strong> wave <strong class='color-d'>damage</strong>",isGunTech:!0,maxCount:9,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("wave")||tech.isSoundBotUpgrade,requires:"wave",effect(){tech.waveBeamSpeed*=.75,tech.waveBeamDamage*=1.4},remove(){tech.waveBeamSpeed=11,tech.waveBeamDamage=.4}},{name:"bound state",description:"wave packets <strong>reflect</strong> backwards <strong>2</strong> times<br><strong>0.7x</strong> wave <strong>range</strong>",isGunTech:!0,maxCount:9,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("wave")&&!tech.isLongitudinal,requires:"wave, not phonon",effect(){tech.waveReflections+=2},remove(){tech.waveReflections=1}},{name:"frequency",description:"<strong>wave</strong> has unlimited <strong class='color-ammo'>ammo</strong><br><strong>0.75x</strong> wave <strong class='color-d'>damage</strong>",isGunTech:!0,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>tech.haveGunCheck("wave"),requires:"wave",effect(){tech.isInfiniteWaveAmmo=!0,b.guns[3].savedAmmo=b.guns[3].ammo,b.guns[3].ammo=1/0,simulation.updateGunHUD()},remove(){tech.isInfiniteWaveAmmo=!1,this.count>0&&void 0!==b.guns[3].savedAmmo?(b.guns[3].ammo=b.guns[3].savedAmmo,simulation.updateGunHUD(),requestAnimationFrame(()=>{simulation.updateGunHUD()})):b.guns[3].ammo===1/0&&(b.guns[3].ammo=0)}},{name:"phonon",description:"waves are low <strong>frequency</strong>, high <strong class='color-d'>damage</strong><br><strong>expanding arcs</strong> that propagate through <strong>solids</strong>",isGunTech:!0,maxCount:1,count:0,frequency:3,frequencyDefault:3,allowed:()=>tech.haveGunCheck("wave")&&!tech.isPhaseVelocity&&1===tech.waveReflections,requires:"wave, not phase velocity, bound state",ammoScale:6,effect(){tech.isLongitudinal=!0,b.guns[3].chooseFireMethod(),b.guns[3].ammoPack/=this.ammoScale,tech.isInfiniteWaveAmmo?b.guns[3].savedAmmo=Math.ceil(b.guns[3].savedAmmo/this.ammoScale):b.guns[3].ammo=Math.ceil(b.guns[3].ammo/this.ammoScale),simulation.updateGunHUD()},remove(){tech.isLongitudinal=!1,this.count>0&&(b.guns[3].chooseFireMethod(),b.guns[3].ammoPack*=this.ammoScale,tech.isInfiniteWaveAmmo?b.guns[3].savedAmmo=Math.ceil(b.guns[3].savedAmmo*this.ammoScale):b.guns[3].ammo=Math.ceil(b.guns[3].ammo*this.ammoScale),simulation.updateGunHUD())}},{name:"isotropic",description:"<strong>waves</strong> expand in <strong>all</strong> directions<br><strong>0.6x</strong> <strong>range</strong> and <strong>1.5x</strong> <strong class='color-d'>damage</strong>",isGunTech:!0,maxCount:1,count:0,frequency:3,frequencyDefault:3,allowed:()=>tech.isLongitudinal&&tech.haveGunCheck("wave")&&!tech.isBulletTeleport,requires:"wave, phonon, not uncertainty principle",effect(){tech.is360Longitudinal=!0,b.guns[3].chooseFireMethod()},remove(){tech.is360Longitudinal=!1,b.guns[3].chooseFireMethod()}},{name:"mechanical resonance",description:"after a <strong class='color-block'>block</strong> gets vibrated by a <strong>phonon</strong><br>there is a chance it's <strong>flung</strong> at nearby mobs",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.isLongitudinal&&tech.haveGunCheck("wave")||tech.isSoundBotUpgrade,requires:"wave, phonon",effect(){tech.isPhononBlock=!0},remove(){tech.isPhononBlock=!1}},{name:"sympathetic resonance",description:"after a <strong>mob</strong> gets vibrated by a <strong>phonon</strong><br>a new <strong>resonance wave</strong> expands",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.isLongitudinal&&tech.haveGunCheck("wave")||tech.isSoundBotUpgrade,requires:"wave, phonon",effect(){tech.isPhononWave=!0},remove(){tech.isPhononWave=!1}},{name:"missile-bot",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Robot\' class="link">missile-bot</a>',description:`trade your <strong>missile</strong> ${powerUps.orb.gun()}<span style ="float: right;"><span class="underline">expend</span> ${powerUps.orb.research(1)}</span><br>for a <strong class='color-bot'>bot</strong> that fires <strong>missiles</strong>`,isRemoveGun:!0,maxCount:1,count:0,frequency:1,frequencyDefault:1,isBot:!0,isBotTech:!0,isInstant:!0,allowed:()=>tech.haveGunCheck("missiles",!1)&&45===tech.missileFireCD&&(build.isExperimentSelection||powerUps.research.count>0),requires:"missiles, not launch system",effect(){tech.missileBotCount++,b.missileBot(),tech.haveGunCheck("missiles",!1)&&b.removeGun("missiles"),powerUps.research.expend(1)},remove(){}},{name:"liquid-propellant",description:"after <strong>1</strong> second, <strong>missiles</strong> rapidly accelerate<br><strong>missiles</strong> <strong class='color-e'>explode</strong> again at <strong>0.8x</strong> radius and <strong class='color-d'>damage</strong>",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>(tech.haveGunCheck("missiles")||4===m.fieldMode&&1===simulation.molecularMode||tech.missileBotCount)&&!tech.isMissileBig,requires:"missiles, not cruise missile",effect(){tech.isMissileFast=!0},remove(){tech.isMissileFast=!1}},{name:"hypergolic propellant",description:"the 2nd <strong class='color-e'>explosion</strong> from <strong>liquid-propellant</strong><br>is increased from <strong style=\"text-decoration: line-through;\">0.8x</strong> to <strong>1.7x</strong> radius and <strong class='color-d'>damage</strong>",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>(tech.haveGunCheck("missiles")||4===m.fieldMode&&1===simulation.molecularMode||tech.missileBotCount)&&tech.isMissileFast,requires:"missiles, liquid-propellant",effect(){tech.isMissile2ndExplode=!0},remove(){tech.isMissile2ndExplode=!1}},{name:"cruise missile",description:"<strong>1.75x</strong> <strong>missile</strong> <strong class='color-e'>explosive</strong> <strong class='color-d'>damage</strong>, radius<br><strong>0.5x</strong> <strong>missile</strong> speed",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>(tech.haveGunCheck("missiles")||4===m.fieldMode&&1===simulation.molecularMode||tech.missileBotCount)&&!tech.isMissileFast,requires:"missiles, not liquid-propellant",effect(){tech.isMissileBig=!0},remove(){tech.isMissileBig=!1}},{name:"ICBM",description:"<strong>1.75x</strong> <strong>missile</strong> <strong class='color-e'>explosive</strong> <strong class='color-d'>damage</strong>, radius<br><strong>0.5x</strong> <strong>missile</strong> speed",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>(tech.haveGunCheck("missiles")||4===m.fieldMode&&1===simulation.molecularMode)&&tech.isMissileBig,requires:"missiles, cruise missile",effect(){tech.isMissileBiggest=!0},remove(){tech.isMissileBiggest=!1}},{name:"launch system",description:`<strong>5x</strong> <strong>missile</strong> <em>fire rate</em><br><strong>1.3x</strong> missile <strong class='color-ammo'>ammo</strong> per ${powerUps.orb.ammo(1)}`,isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("missiles"),requires:"missiles",ammoBonus:1.3,effect(){for(tech.missileFireCD=10,i=0,len=b.guns.length;i<len;i++)if("missiles"===b.guns[i].name){b.guns[i].ammoPack*=this.ammoBonus,b.guns[i].ammo=Math.ceil(b.guns[i].ammo*this.ammoBonus),simulation.updateGunHUD();break}},remove(){if(tech.missileFireCD=45,this.count>0)for(i=0,len=b.guns.length;i<len;i++)if("missiles"===b.guns[i].name){b.guns[i].ammoPack/=this.ammoBonus,b.guns[i].ammo=Math.ceil(b.guns[i].ammo/this.ammoBonus),simulation.updateGunHUD();break}}},{name:"missile guidance",description:`while <strong>crouching</strong> your <strong>missiles</strong> target your mouse<br><strong>1.5x</strong> missile <strong class='color-ammo'>ammo</strong> per ${powerUps.orb.ammo(1)}`,isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("missiles"),requires:"missiles",ammoBonus:1.5,effect(){for(tech.isTargeting=!0,i=0,len=b.guns.length;i<len;i++)if("missiles"===b.guns[i].name){b.guns[i].ammoPack*=this.ammoBonus,b.guns[i].ammo=Math.ceil(b.guns[i].ammo*this.ammoBonus),simulation.updateGunHUD();break}},remove(){if(tech.isTargeting=!1,this.count>0)for(i=0,len=b.guns.length;i<len;i++)if("missiles"===b.guns[i].name){b.guns[i].ammoPack/=this.ammoBonus,b.guns[i].ammo=Math.ceil(b.guns[i].ammo/this.ammoBonus),simulation.updateGunHUD();break}}},{name:"iridium-192",description:"<strong class='color-e'>explosions</strong> release <strong class='color-p'>gamma radiation</strong><br><strong>2x</strong> <strong class='color-e'>explosion</strong> <strong class='color-d'>damage</strong> over <strong>4</strong> seconds",isGunTech:!0,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>!tech.isImmuneExplosion&&1===tech.explosiveRadius&&!tech.isSmallExplosion&&!tech.isBlockExplode&&!tech.fragments&&(tech.haveGunCheck("missiles")||tech.missileBotCount||tech.isIncendiary||tech.haveGunCheck("grenades")&&!tech.isNeutronBomb||tech.isPulseLaser||4===m.fieldMode&&1===simulation.molecularMode||tech.isBoomBotUpgrade||tech.isTokamak||tech.isExplodeContact),requires:"an explosive damage source, not ammonium nitrate, nitroglycerin, chain reaction, fragmentation, electric armor",effect(){tech.isExplodeRadio=!0},remove(){tech.isExplodeRadio=!1}},{name:"fragmentation",description:"some <strong class='color-e'>detonations</strong> and collisions eject <strong>nails</strong><br><em style = 'font-size: 90%'>blocks, grenades, missiles, rivets, harpoon</em>",isGunTech:!0,maxCount:9,count:0,frequency:1,frequencyDefault:1,allowed:()=>!tech.isExplodeRadio&&(tech.haveGunCheck("harpoon")&&!tech.isFoamBall||tech.haveGunCheck("grenades")&&!tech.isNeutronBomb||tech.haveGunCheck("missiles")||4===m.fieldMode&&1===simulation.molecularMode||tech.missileBotCount||tech.isRivets||tech.blockDamage>.075||tech.isHookDefense||tech.isExplodeContact),requires:"grenades, missiles, rivets, harpoon, or mass driver, not iridium-192, not polyurethane foam",effect(){tech.fragments++},remove(){tech.fragments=0}},{name:"ammonium nitrate",description:"<strong>1.25x</strong> <strong class='color-e'>explosive</strong> <strong class='color-d'>damage</strong>, radius",isGunTech:!0,maxCount:9,count:0,frequency:2,frequencyDefault:2,allowed:()=>!tech.isExplodeRadio&&tech.hasExplosiveDamageCheck(),requires:"an explosive damage source, not iridium-192",effect(){tech.explosiveRadius+=.25},remove(){tech.explosiveRadius=1}},{name:"nitroglycerin",description:"<strong>1.7x</strong> <strong class='color-e'>explosive</strong> <strong class='color-d'>damage</strong><br><strong>0.7x</strong> smaller <strong class='color-e'>explosive</strong> <strong>radius</strong>",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>!tech.isExplodeRadio&&tech.hasExplosiveDamageCheck()&&!tech.isExplosionHarm,requires:"an explosive damage source, not iridium-192, acetone peroxide",effect(){tech.isSmallExplosion=!0},remove(){tech.isSmallExplosion=!1}},{name:"acetone peroxide",description:"<strong>1.7x</strong> <strong class='color-e'>explosive</strong> <strong>radius</strong><br><strong>1.4x</strong> <strong class='color-e'>explosive</strong> <strong class='color-defense'>damage taken</strong>",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,isBadRandomOption:!0,allowed:()=>tech.hasExplosiveDamageCheck()&&!tech.isSmallExplosion,requires:"an explosive damage source, not nitroglycerin",effect(){tech.isExplosionHarm=!0},remove(){tech.isExplosionHarm=!1}},{name:"shock wave",description:"<strong>mines</strong> and <strong class='color-p' style='letter-spacing: 2px;'>sporangium</strong> <strong>stun</strong> for <strong>3-5</strong> seconds<br><strong class='color-e'>explosions</strong> <strong>stun</strong> for <strong>0.5</strong> seconds",isGunTech:!0,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>tech.haveGunCheck("spores")||tech.haveGunCheck("mine")||!tech.isExplodeRadio&&tech.hasExplosiveDamageCheck(),requires:"mine, spores, an explosive damage source, not iridium-192",effect(){tech.isStun=!0},remove(){tech.isStun=!1}},{name:"shaped charge",description:`prevent <strong class='color-h'>health</strong> loss by<span style ="float: right;"><span class="underline">expend</span> ${powerUps.orb.research(2)}</span><br>dynamically <strong>reducing</strong> your <strong class='color-e'>explosions</strong>`,isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>!tech.isImmuneExplosion&&(build.isExperimentSelection||powerUps.research.count>1)&&(tech.haveGunCheck("missiles")||4===m.fieldMode&&1===simulation.molecularMode||tech.missileBotCount>0||tech.isIncendiary||tech.isPulseLaser||tech.isTokamak||tech.haveGunCheck("grenades")&&!tech.isNeutronBomb),requires:"an explosive damage source, not rocket propelled grenade",effect(){tech.isSmartRadius=!0,powerUps.research.expend(2)},remove(){tech.isSmartRadius=!1,this.count>0&&powerUps.research.changeRerolls(3)}},{name:"MIRV",description:"fire <strong>+1</strong> <strong>missile</strong> or <strong>grenade</strong> per shot<br><strong>0.88x</strong> <strong class='color-e'>explosion</strong> <strong class='color-d'>damage</strong> and <strong>radius</strong>",isGunTech:!0,maxCount:9,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("missiles")||tech.missileBotCount||tech.haveGunCheck("grenades"),requires:"missiles, grenades",effect(){tech.missileCount++},remove(){tech.missileCount=1}},{name:"rocket-propelled grenade",description:"<strong>grenades</strong> <strong class='color-e'>explode</strong> on map <strong>collisions</strong><br><strong class='color-e'>explosions</strong> drain <strong class='color-f'>energy</strong>, not <strong class='color-h'>health</strong>",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("grenades")&&!tech.isVacuumBomb&&!tech.isSmartRadius&&!tech.isEnergyHealth,requires:"grenades, not vacuum bomb, shaped charges, mass-energy",effect(){tech.isImmuneExplosion=!0,tech.isRPG=!0,b.setGrenadeMode()},remove(){tech.isImmuneExplosion=!1,tech.isRPG=!1,b.setGrenadeMode()}},{name:"vacuum bomb",description:"<strong>grenades</strong> fire slower, <strong class='color-e'>explode</strong> bigger,<br>and <strong>suck</strong> everything towards them",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("grenades")&&!tech.isNeutronBomb&&!tech.isBlockExplode&&!tech.isRPG,requires:"grenades, not neutron bomb, chain reaction, RPG",effect(){tech.isVacuumBomb=!0,b.setGrenadeMode()},remove(){tech.isVacuumBomb=!1,b.setGrenadeMode()}},{name:"precision bombing",description:"if your <strong>grenades</strong> are directly <strong>above</strong> a mob<br>the <strong>grenade</strong> will <strong>fall</strong> on them",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("grenades"),requires:"grenades",effect(){tech.isPrecision=!0},remove(){tech.isPrecision=!1}},{name:"chain reaction",description:"<strong>1.3x</strong> <strong>grenade</strong> radius and <strong class='color-d'>damage</strong><br><strong class='color-block'>blocks</strong> caught in <strong class='color-e'>explosions</strong> also <strong class='color-e'>explode</strong>",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("grenades")&&!tech.isExplodeRadio&&!tech.isNeutronBomb&&!tech.isVacuumBomb,requires:"grenades, not iridium-192, neutron bomb, vacuum bomb",effect(){tech.isBlockExplode=!0},remove(){tech.isBlockExplode=!1}},{name:"flame test",description:"after <strong>grenades</strong> detonate they trigger<br>a colorful <strong>cluster</strong> of small <strong class='color-e'>explosions</strong>",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("grenades")&&!tech.isNeutronBomb&&!tech.isCircleExplode&&!tech.isPetalsExplode,requires:"grenades, not neutron bomb, pyrotechnics, fireworks",effect(){tech.isClusterExplode=!0},remove(){tech.isClusterExplode=!1}},{name:"pyrotechnics",description:"after <strong>grenades</strong> detonate they trigger<br>a colorful <strong>circle</strong> of <strong class='color-e'>explosions</strong>",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("grenades")&&!tech.isNeutronBomb&&!tech.isClusterExplode&&!tech.isPetalsExplode,requires:"grenades, not neutron bomb, flame test, fireworks",effect(){tech.isCircleExplode=!0},remove(){tech.isCircleExplode=!1}},{name:"fireworks",description:"after <strong>grenades</strong> detonate they trigger<br>colorful <strong>petals</strong> of <strong class='color-e'>explosions</strong>",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("grenades")&&!tech.isNeutronBomb&&!tech.isClusterExplode&&!tech.isCircleExplode,requires:"grenades, not neutron bomb, pyrotechnics, flame test",effect(){tech.isPetalsExplode=!0},remove(){tech.isPetalsExplode=!1}},{name:"neutron bomb",description:"<strong>grenades</strong> are <strong class='color-p'>irradiated</strong> with <strong class='color-p'>Cf-252</strong><br>does <strong class='color-p'>radioactive</strong> <strong class='color-d'>damage</strong> over time",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("grenades")&&!tech.fragments&&!tech.isVacuumBomb&&!tech.isExplodeRadio&&!tech.isBlockExplode&&!tech.isClusterExplode&&!tech.isPetalsExplode&&!tech.isCircleExplode,requires:"grenades, not fragmentation, vacuum bomb, iridium-192, pyrotechnics, fireworks, flame test, chain reaction",effect(){tech.isNeutronBomb=!0,b.setGrenadeMode()},remove(){tech.isNeutronBomb=!1,b.setGrenadeMode()}},{name:"vacuum permittivity",description:"<strong>1.2x</strong> <strong class='color-p'>radioactive</strong> range<br>objects in range of the bomb are <strong>slowed</strong>",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.isNeutronBomb,requires:"grenades, neutron bomb",effect(){tech.isNeutronSlow=!0},remove(){tech.isNeutronSlow=!1}},{name:"radioactive contamination",description:"after a mob or shield <strong>dies</strong>,<br>leftover <strong class='color-p'>radiation</strong> <strong>spreads</strong> to a nearby mob",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.isNailRadiation||tech.isWormholeDamage||tech.isNeutronBomb||tech.isExplodeRadio||tech.isBlockRadiation,requires:"radiation damage source",effect(){tech.isRadioactive=!0},remove(){tech.isRadioactive=!1}},{name:"nuclear transmutation",description:"<strong>1.5x</strong> <strong class='color-p'>radiation</strong> <strong class='color-d'>damage</strong><br><em style = 'font-size:93%;'>nail, drone, neutron bomb, iridium, cosmic string, deflect</em>",isGunTech:!0,maxCount:9,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.isNailRadiation||tech.isWormholeDamage||tech.isNeutronBomb||tech.isExplodeRadio||tech.isBlockRadiation||tech.isDroneRadioactive,requires:"radiation damage source",effect(){tech.radioactiveDamage+=1.5},remove(){tech.radioactiveDamage=1}},{name:"water shielding",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Radiation_protection#Radiation_shielding\' class="link">water shielding</a>',description:"reduce <strong class='color-p'>radioactive</strong> effects on you by <strong>0.2x</strong><br><em>neutron bomb, drones, explosions, slime</em>",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.isNeutronBomb&&tech.haveGunCheck("grenades")||tech.isDroneRadioactive&&tech.haveGunCheck("drones")||tech.isExplodeRadio,requires:"neutron bomb, irradiated drones, iridium-192",effect(){tech.isRadioactiveResistance=!0},remove(){tech.isRadioactiveResistance=!1}},{name:"ricochet",description:"after <strong>nails</strong> or <strong>super balls</strong> hit mobs they<br><strong>rebound</strong> towards a mob with <strong>2x</strong> <strong class='color-d'>damage</strong>",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.isMineDrop||tech.isNailBotUpgrade||tech.hookNails||tech.fragments||tech.nailsDeathMob||tech.haveGunCheck("mine")&&!(tech.isLaserMine||tech.isFoamMine)||tech.haveGunCheck("nail gun")&&!tech.isRivets&&!tech.isNeedles||tech.haveGunCheck("shotgun")&&(tech.isNeedles||tech.isNailShot)&&!tech.isRivets&&!tech.isNeedles||tech.haveGunCheck("super balls")&&!tech.isIncendiary,requires:"super balls, nail gun, not rotary cannon, rivets, or needles",effect(){tech.isRicochet=!0},remove(){tech.isRicochet=!1}},{name:"booby trap",description:"<strong>50%</strong> chance to drop a <strong>mine</strong> from <strong>power ups</strong><br><strong>+15%</strong> chance for <strong class='color-junk'>JUNK</strong> <strong class='color-choice'><span>ch</span><span>oi</span><span>ces</span></strong>",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("mine")&&tech.junkChance<1,requires:"mines",effect(){tech.isMineDrop=!0,tech.isMineDrop&&b.mine(m.pos,{x:0,y:0},0),this.refundAmount+=tech.addJunkTechToPool(.15)},refundAmount:0,remove(){tech.isMineDrop=!1,this.count>0&&this.refundAmount>0&&(tech.removeJunkTechFromPool(this.refundAmount),this.refundAmount=0)}},{name:"elephants toothpaste",description:"instead of nails <strong>mines</strong> catalyze a reaction<br>that yields <strong>foam</strong> bubbles",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("mine")&&!tech.isSuperMine&&!tech.isRicochet&&!tech.isNailRadiation&&!tech.isNailCrit,requires:"mines, not blast ball, ricochet, irradiated nails, supercritical fission",effect(){tech.isFoamMine=!0},remove(){tech.isFoamMine=!1}},{name:"blast ball",descriptionFunction:()=>"<strong>mines</strong> fire <strong>bouncy balls</strong> instead of nails",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("mine")&&!tech.isFoamMine&&!tech.isNailRadiation&&!tech.isNailCrit,requires:"mines, not elephants toothpaste, ricochet, irradiated nails, supercritical fission",effect(){tech.isSuperMine=!0},remove(){tech.isSuperMine=!1}},{name:"laser-mines",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Laser\' class="link">laser-mines</a>',description:"<strong>mines</strong> laid while you are <strong>crouched</strong><br>use <strong class='color-f'>energy</strong> to emit <strong>3</strong> unaimed <strong class='color-laser'>lasers</strong>",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("mine"),requires:"mines",effect(){tech.isLaserMine=!0},remove(){tech.isLaserMine=!1}},{name:"sentry",descriptionFunction:()=>`<strong>mines</strong> fire one ${b.guns[10].nameString()} at a time<br><strong>mines</strong> fire <strong>2x</strong> more ${b.guns[10].nameString("s")}`,isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("mine"),requires:"mines, not elephants toothpaste",effect(){tech.isMineSentry=!0},remove(){tech.isMineSentry=!1}},{name:"extended magazine",descriptionFunction:()=>`sentry <strong>mines</strong> fire <strong>2x</strong> more ${b.guns[10].nameString("s")}`,isGunTech:!0,maxCount:9,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("mine")&&tech.isMineSentry,requires:"mines, sentry",effect(){tech.sentryAmmo+=22},remove(){tech.sentryAmmo=44}},{name:"mycelial fragmentation",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Fungus\' class="link">mycelial fragmentation</a>',description:"during their <strong>growth</strong> phase<br><strong>1.7x</strong> <strong class='color-p' style='letter-spacing: 2px;'>sporangium</strong> discharge",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("spores"),requires:"spores",effect(){tech.isSporeGrowth=!0},remove(){tech.isSporeGrowth=!1}},{name:"cordyceps",description:"<strong class='color-p' style='letter-spacing: 2px;'>sporangium</strong> <strong>infect</strong> mobs they attach to<br><strong>infected</strong> mobs <strong>resurrect</strong> and attack other mobs",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("spores"),requires:"spores",effect(){tech.isZombieMobs=!0},remove(){tech.isZombieMobs=!1}},{name:"colony",description:"<strong>1.6x</strong> <strong class='color-p' style='letter-spacing: 2px;'>sporangium</strong> discharge<br><strong>33%</strong> chance to discharge something different",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Colony_(biology)\' class="link">colony</a>',isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("spores"),requires:"spores",effect(){tech.isSporeColony=!0},remove(){tech.isSporeColony=!1}},{name:"cryodesiccation",descriptionFunction:()=>`<strong>1.25x</strong> <strong class='color-p' style='letter-spacing: 2px;'>sporangium</strong> discharge<br> ${b.guns[6].nameString("s")} <strong class='color-s'>freeze</strong> mobs for <strong>1.5</strong> second`,isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("spores")||tech.sporesOnDeath>0||4===m.fieldMode&&0===simulation.molecularMode||tech.isSporeWorm||tech.isSporeFlea,requires:"spores",effect(){tech.isSporeFreeze=!0},remove(){tech.isSporeFreeze=!1}},{name:"flagella",descriptionFunction:()=>`<strong>2x</strong> ${b.guns[6].nameString()} acceleration<br>if they can't find a target ${b.guns[6].nameString("s")} follow you`,isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("spores")||tech.sporesOnDeath>0||4===m.fieldMode&&0===simulation.molecularMode||tech.isSporeWorm||tech.isSporeFlea,requires:"spores",effect(){tech.isSporeFollow=!0},remove(){tech.isSporeFollow=!1}},{name:"mutualism",descriptionFunction:()=>`<strong>3x</strong> ${b.guns[6].nameString()} <strong class='color-d'>damage</strong><br>${b.guns[6].nameString("s")} borrow <strong>1</strong> <strong class='color-h'>health</strong> until they <strong>die</strong>`,isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("spores")||tech.sporesOnDeath>0||4===m.fieldMode&&0===simulation.molecularMode||tech.isSporeWorm||tech.isSporeFlea,requires:"spores",effect(){tech.isMutualism=!0},remove(){tech.isMutualism=!1}},{name:"necrophage",description:"if <strong>foam</strong>, <strong class='color-p' style='letter-spacing: -0.8px;'>fleas</strong>, or <strong class='color-p' style='letter-spacing: -0.8px;'>worms</strong> <strong>kill</strong> their target<br>they grow 3 <strong>copies</strong>",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("foam")||tech.isFoamBall||tech.isFoamBotUpgrade||tech.isFoamShot||tech.isSporeWorm||tech.isSporeFlea||tech.isFoamMine,requires:"foam, spores, worms, fleas",effect(){tech.isSpawnBulletsOnDeath=!0},remove(){tech.isSpawnBulletsOnDeath=!1}},{name:"siphonaptera",description:"<strong class='color-p' style='letter-spacing: 2px;'>spores</strong> metamorphose into <strong class='color-p' style='letter-spacing: -0.8px;'>fleas</strong><br><strong>shotgun</strong> fires <strong class='color-p' style='letter-spacing: -0.8px;'>fleas</strong>",isGunTech:!0,maxCount:1,count:0,frequency:3,frequencyDefault:3,allowed:()=>(tech.haveGunCheck("spores")||tech.sporesOnDeath>0||4===m.fieldMode&&0===simulation.molecularMode||tech.haveGunCheck("shotgun")&&!tech.isIncendiary&&!tech.isRivets&&!tech.isIceShot&&!tech.isFoamShot&&!tech.isNeedles&&!tech.isNailShot)&&!tech.isSporeWorm,requires:"spores, not worms",effect(){tech.isSporeFlea=!0},remove(){tech.isSporeFlea=!1}},{name:"nematodes",description:"<strong class='color-p' style='letter-spacing: 2px;'>spores</strong> metamorphose into <strong class='color-p' style='letter-spacing: -0.8px;'>worms</strong><br><strong>shotgun</strong> fires <strong class='color-p' style='letter-spacing: -0.8px;'>worms</strong>",isGunTech:!0,maxCount:1,count:0,frequency:3,frequencyDefault:3,allowed:()=>(tech.haveGunCheck("spores")||tech.sporesOnDeath>0||4===m.fieldMode&&0===simulation.molecularMode||tech.haveGunCheck("shotgun")&&!tech.isIncendiary&&!tech.isRivets&&!tech.isIceShot&&!tech.isFoamShot&&!tech.isNeedles&&!tech.isNailShot)&&!tech.isSporeFlea,requires:"spores, not fleas",effect(){tech.isSporeWorm=!0},remove(){tech.isSporeWorm=!1}},{name:"K-selection",description:"<strong>1.37x</strong> <strong class='color-p' style='letter-spacing: -0.8px;'>worm</strong> and <strong class='color-p' style='letter-spacing: -0.8px;'>flea</strong> <strong class='color-d'>damage</strong>",isGunTech:!0,maxCount:3,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.isSporeWorm||tech.isSporeFlea,requires:"spores, shotgun, worms, fleas",effect(){tech.wormSize++},remove(){tech.wormSize=0}},{name:"path integration",descriptionFunction:()=>`<strong>drones</strong> and ${b.guns[6].nameString("s")}<br>travel with you through <strong>levels</strong>`,isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.isSporeFollow&&(tech.haveGunCheck("spores")||tech.haveGunCheck("shotgun")&&tech.isSporeWorm)||tech.haveGunCheck("drones")||4===m.fieldMode&&(0===simulation.molecularMode||3===simulation.molecularMode),requires:"spores, worms, flagella, drones",effect(){tech.isDronesTravel=!0},remove(){tech.isDronesTravel=!1}},{name:"exponential growth",descriptionFunction(){return`every second <strong>drones</strong> gain<span style ="float: right;"><span class="underline">expend</span> ${powerUps.orb.research(this.cost)}</span><br><strong>1.03x</strong> <strong>size</strong> and <strong class='color-d'>damage</strong>`},cost:2,isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed(){return!tech.isForeverDrones&&(tech.haveGunCheck("drones")||4===m.fieldMode&&3===simulation.molecularMode)&&(build.isExperimentSelection||powerUps.research.count>this.cost-1)},requires:"drones, not fault tolerance",effect(){tech.isExponential=!0,powerUps.research.expend(this.cost)},remove(){this.count>0&&powerUps.research.changeRerolls(this.cost),tech.isExponential=!1}},{name:"fault tolerance",description:`trade your <strong>drone</strong> ${powerUps.orb.gun()}<span style ="float: right;"><span class="underline">expend</span> ${powerUps.orb.research(2)}</span><br>for <strong>5</strong> <strong>drones</strong> that last <strong>forever</strong>`,isRemoveGun:!0,maxCount:1,count:0,frequency:1,frequencyDefault:1,isInstant:!0,allowed:()=>tech.haveGunCheck("drones",!1)&&!tech.isDroneRespawn&&!tech.isExponential&&1===tech.bulletsLastLonger&&!tech.isDronesTravel&&(build.isExperimentSelection||powerUps.research.count>1),requires:"drones, not exponential growth, drone repair, anti-shear topology, autonomous navigation, ",effect(){if(tech.isForeverDrones+=5,tech.haveGunCheck("drones",!1)&&b.removeGun("drones"),tech.isDroneRadioactive)for(let e=0;e<1.25;e++)b.droneRadioactive({x:m.pos.x+30*(Math.random()-.5),y:m.pos.y+30*(Math.random()-.5)},5),bullet[bullet.length-1].endCycle=1/0;else for(let e=0;e<5;e++)b.drone({x:m.pos.x+30*(Math.random()-.5),y:m.pos.y+30*(Math.random()-.5)},5),bullet[bullet.length-1].endCycle=1/0;powerUps.research.expend(2)},remove(){tech.isForeverDrones=0}},{name:"ablative drones",descriptionFunction:()=>`after losing ${tech.isEnergyHealth?"<strong class='color-f'>energy</strong>":"<strong class='color-h'>health</strong>"} there is a chance<br>to use your broken parts to <strong class='color-print'>print</strong> <strong>drones</strong>`,isGunTech:!0,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>tech.haveGunCheck("drones")&&!tech.isForeverDrones&&!tech.isDroneRadioactive||4===m.fieldMode&&3===simulation.molecularMode,requires:"drones, not fault tolerance, irradiated drones",effect(){tech.isDroneOnDamage=!0},remove(){tech.isDroneOnDamage=!1}},{name:"standardization",description:`<strong>2x</strong> <strong>drones</strong> per ${powerUps.orb.ammo()} and <strong class='color-f'>energy</strong><br><strong>0.6x</strong> drone <strong>duration</strong>`,isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>!tech.isDroneRadioactive&&(tech.haveGunCheck("drones")||4===m.fieldMode&&3===simulation.molecularMode),requires:"drones, not irradiated drones",effect(){for(tech.droneCycleReduction=.6,tech.droneEnergyReduction=.3,i=0,len=b.guns.length;i<len;i++)"drones"===b.guns[i].name&&(b.guns[i].ammoPack*=2)},remove(){if(tech.droneCycleReduction=1,tech.droneEnergyReduction=1,this.count>0)for(i=0,len=b.guns.length;i<len;i++)"drones"===b.guns[i].name&&(b.guns[i].ammoPack/=2)}},{name:"delivery drone",description:"after a <strong>drone</strong> picks up a <strong>power up</strong>,<br>it gains <strong>2.25x</strong> <strong>size</strong> and <strong>50</strong> seconds of <strong>durability</strong>",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("drones")||tech.isForeverDrones||4===m.fieldMode&&3===simulation.molecularMode,requires:"drones",effect(){tech.isDroneGrab=!0},remove(){tech.isDroneGrab=!1}},{name:"von Neumann probe",description:"after a <strong>drone</strong> expires it will use <strong>-4</strong> <strong class='color-f'>energy</strong><br>and a nearby <strong class='color-block'>block</strong> to <strong class='color-print'>reprint</strong> itself",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("drones")||4===m.fieldMode&&3===simulation.molecularMode,requires:"drones",effect(){tech.isDroneRespawn=!0},remove(){tech.isDroneRespawn=!1}},{name:"brushless motor",description:"<strong>drones</strong> rapidly <strong>rush</strong> towards their target<br><strong>1.33x</strong> <strong>drone</strong> collision <strong class='color-d'>damage</strong>",isGunTech:!0,maxCount:1,count:0,frequency:3,frequencyDefault:3,allowed:()=>(tech.haveGunCheck("drones")||tech.isForeverDrones||4===m.fieldMode&&3===simulation.molecularMode)&&!tech.isDroneRadioactive&&!tech.isIncendiary,requires:"drones, molecular assembler, not irradiated drones, incendiary",effect(){tech.isDroneTeleport=!0},remove(){tech.isDroneTeleport=!1}},{name:"axial flux motor",description:"<strong>1.66x</strong> <strong>drones</strong> <strong>rush</strong> frequency<br><strong>1.44x</strong> <strong>drone</strong> collision <strong class='color-d'>damage</strong>",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.isDroneTeleport&&(tech.haveGunCheck("drones")||tech.isForeverDrones||4===m.fieldMode&&3===simulation.molecularMode),requires:"drones, brushless motor",effect(){tech.isDroneFastLook=!0},remove(){tech.isDroneFastLook=!1}},{name:"irradiated drones",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Irradiation\' class="link">irradiated drones</a>',description:`the space around <strong>drones</strong> is <strong class='color-p'>irradiated</strong><br><strong>0.25x</strong> <strong>drones</strong> per ${powerUps.orb.ammo()} and <strong class='color-f'>energy</strong>`,isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>1===tech.droneCycleReduction&&!tech.isDroneOnDamage&&!tech.isIncendiary&&!tech.isDroneTeleport&&(tech.haveGunCheck("drones")||tech.isForeverDrones||4===m.fieldMode&&3===simulation.molecularMode),requires:"drones, not reduced tolerances, incendiary, torque bursts, ablative drones",effect(){for(tech.isDroneRadioactive=!0,i=0,len=b.guns.length;i<len;i++)"drones"===b.guns[i].name&&(b.guns[i].ammoPack*=.25,b.guns[i].ammo=Math.ceil(.25*b.guns[i].ammo),simulation.makeGunHUD())},remove(){if(tech.isDroneRadioactive=!1,this.count>0)for(i=0,len=b.guns.length;i<len;i++)"drones"===b.guns[i].name&&(b.guns[i].ammoPack/=.25,b.guns[i].ammo=4*b.guns[i].ammo,simulation.makeGunHUD())}},{name:"beta radiation",description:"<strong>0.5x</strong> <strong>drone</strong> duration<br><strong>2x</strong> <strong>drone</strong> <strong class='color-p'>radiation</strong> <strong class='color-d'>damage</strong>",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.isDroneRadioactive&&(tech.haveGunCheck("drones")||tech.isForeverDrones||4===m.fieldMode&&3===simulation.molecularMode),requires:"drones, irradiated drones",effect(){tech.droneRadioDamage=2},remove(){tech.droneRadioDamage=1}},{name:"orthocyclic winding",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Coil_winding_technology\' class="link">orthocyclic winding</a>',description:"<strong>1.66x</strong> <strong>drone</strong> acceleration<br><strong>1.33x</strong> <strong class='color-p'>radiation</strong> <strong class='color-d'>damage</strong>",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.isDroneRadioactive&&(tech.haveGunCheck("drones")||tech.isForeverDrones||4===m.fieldMode&&3===simulation.molecularMode),requires:"drones, irradiated drones",effect(){tech.isFastDrones=!0},remove(){tech.isFastDrones=!1}},{name:"electrostatic induction",description:"<strong>foam</strong> bubbles are electrically charged<br>causing <strong>attraction</strong> to nearby <strong>mobs</strong>",isGunTech:!0,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>tech.haveGunCheck("foam")||tech.isFoamBotUpgrade||tech.isFoamShot||tech.isFoamBall||tech.isFoamMine,requires:"foam",effect(){tech.isFoamAttract=!0},remove(){tech.isFoamAttract=!1}},{name:"uncertainty principle",description:"<strong>foam</strong>, <strong>wave</strong>, and <strong>super ball</strong> positions are erratic<br><strong>1.5x</strong> <strong>foam</strong>, <strong>wave</strong>, and <strong>super ball</strong> <strong class='color-d'>damage</strong>",isGunTech:!0,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>tech.haveGunCheck("foam")||tech.isFoamBotUpgrade||tech.isFoamShot||tech.isFoamBall||tech.isFoamMine||tech.haveGunCheck("wave")&&!tech.is360Longitudinal||tech.haveGunCheck("super balls")&&!tech.isSuperHarm||tech.isSoundBotUpgrade,requires:"foam, wave, super balls, not isotropic, Zectron",effect(){tech.isBulletTeleport=!0},remove(){tech.isBulletTeleport=!1}},{name:"surfactant",description:`trade your <strong>foam</strong> ${powerUps.orb.gun()}<span style ="float: right;"><span class="underline">expend</span> ${powerUps.orb.research(2)}</span><br>for <strong>2</strong> <strong class='color-bot'>foam-bots</strong> and <strong class='color-bot'>foam-bot upgrade</strong>`,isRemoveGun:!0,maxCount:1,count:0,frequency:1,frequencyDefault:1,isBot:!0,isBotTech:!0,isInstant:!0,requires:"foam gun, not bot upgrades, fractionation, pressure vessel",allowed:()=>tech.haveGunCheck("foam",!1)&&!b.hasBotUpgrade()&&!tech.isAmmoFoamSize&&!tech.isFoamPressure&&(build.isExperimentSelection||powerUps.research.count>1),effect(){requestAnimationFrame(()=>{tech.giveTech("foam-bot upgrade")});for(let e=0;e<2;e++)b.foamBot(),tech.foamBotCount++;simulation.inGameConsole("tech.isFoamBotUpgrade = true"),tech.haveGunCheck("foam",!1)&&b.removeGun("foam"),powerUps.research.expend(2)},remove(){}},{name:"aerogel",description:"<strong>foam</strong> bubbles <strong>float</strong> with <strong>0.5x</strong> <strong>foam</strong> duration<br><strong>2.8x</strong> <strong>foam</strong> <strong class='color-d'>damage</strong>",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("foam")||tech.isFoamBotUpgrade||tech.isFoamShot||tech.isFoamBall||tech.isFoamMine,requires:"foam",effect(){tech.isFastFoam=!0,tech.foamGravity=-3e-4},remove(){tech.isFastFoam=!1,tech.foamGravity=8e-5}},{name:"surface tension",description:"<strong>1.4x</strong> <strong>foam</strong> <strong class='color-d'>damage</strong>",isGunTech:!0,maxCount:9,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("foam")||tech.isFoamBotUpgrade||tech.isFoamShot||tech.isFoamBall||tech.isFoamMine,requires:"foam",effect(){tech.foamDamage+=.004},remove(){tech.foamDamage=.01}},{name:"cavitation",description:"<strong>25%</strong> chance to discharge a huge <strong>foam</strong> bubble<br><strong>2x</strong> <strong>foam</strong> gun <strong>recoil</strong>",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("foam")||tech.isFoamBotUpgrade||tech.isFoamShot||tech.isFoamBall||tech.isFoamMine,requires:"foam",effect(){tech.isFoamCavitation=!0,b.guns[8].knockBack=.001},remove(){tech.isFoamCavitation=!1,b.guns[8].knockBack=5e-4}},{name:"foam fractionation",description:"if you have below <strong>300</strong> <strong class='color-ammo'>ammo</strong><br><strong>2x</strong> <strong>foam</strong> bubble <strong>size</strong>",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("foam"),requires:"foam",effect(){tech.isAmmoFoamSize=!0},remove(){tech.isAmmoFoamSize=!1}},{name:"ideal gas law",description:`<strong>6x</strong> <strong>foam</strong> <strong class='color-ammo'>ammo</strong> per ${powerUps.orb.ammo(1)}`,isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("foam")&&!tech.isEnergyNoAmmo,requires:"foam, not non-renewables",effect(){b.guns[8].ammoPack*=6,simulation.updateGunHUD()},remove(){this.count&&(b.guns[8].ammoPack/=8,simulation.updateGunHUD())}},{name:"pressure vessel",description:"build up <strong>charge</strong> while firing <strong>foam</strong><br>after firing <strong>discharge</strong> <strong>foam</strong> bubbles",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("foam"),requires:"foam",effect(){tech.isFoamPressure=!0,b.guns[8].chooseFireMethod()},remove(){tech.isFoamPressure=!1,b.guns[8].chooseFireMethod()}},{name:"capacitor bank",descriptionFunction:()=>`<strong>charge</strong> effects build up almost <strong>instantly</strong><br><em style = 'font-size:93%;'><strong class='color-block'>blocks</strong>, ${tech.haveGunCheck("foam",!1)?"<strong>foam</strong>":"foam"}, ${tech.isPlasmaBall?"<strong>plasma ball</strong>":"plasma ball"}, ${tech.isRailGun?"<strong>railgun</strong>":"railgun"}, ${tech.isPulseLaser?"<strong>pulse</strong>":"pulse"}, ${tech.isTokamak?"<strong>tokamak</strong>":"tokamak"}</em>`,isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.blockDamage>.075||tech.isRailGun||tech.haveGunCheck("foam")&&tech.isFoamPressure||tech.isTokamak||tech.isPulseLaser||tech.isPlasmaBall,requires:"mass driver, railgun, foam, pressure vessel, pulse, tokamak, plasma ball",effect(){tech.isCapacitor=!0},remove(){tech.isCapacitor=!1}},{name:"Bitter electromagnet",descriptionFunction:()=>`<strong>0.66x</strong> <strong>railgun</strong> charge rate<br><strong>2x</strong> ${b.guns[9].harpoonName()} density and <strong class='color-d'>damage</strong>`,isGunTech:!0,maxCount:3,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("harpoon")&&tech.isRailGun,requires:"harpoon, railgun",effect(){tech.railChargeRate*=1.06,tech.harpoonDensity+=.007},remove(){tech.railChargeRate=.97,tech.harpoonDensity=tech.isRailGun?.007:.004}},{name:"railgun",descriptionFunction:()=>`<strong>hold</strong> and <strong>release</strong> fire to launch ${b.guns[9].harpoonName()}<br>but, ${b.guns[9].harpoonName()} can't <strong>retract</strong>`,isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("harpoon")&&!tech.isFilament&&!tech.isHarpoonPowerUp&&!tech.isBoostReplaceAmmo&&!tech.isBreakHarpoon,requires:"harpoon, not UHMWPE, induction furnace, quasiparticles, wear",ammoBonus:9,effect(){tech.isRailGun=!0,tech.harpoonDensity=tech.isRailGun?.007:.004,b.guns[9].chooseFireMethod(),b.guns[9].ammoPack*=3,b.guns[9].ammo=6*b.guns[9].ammo,simulation.updateGunHUD()},remove(){tech.isRailGun=!1,this.count>0&&(tech.harpoonDensity=tech.isRailGun?.007:.004,b.guns[9].chooseFireMethod(),b.guns[9].ammoPack/=3,b.guns[9].ammo=Math.ceil(b.guns[9].ammo/6),simulation.updateGunHUD())}},{name:"alternator",descriptionFunction:()=>`<strong>0.05x</strong> ${b.guns[9].harpoonName()} <strong class='color-f'>energy</strong> cost`,isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("harpoon"),requires:"harpoon",effect(){tech.isRailEnergy=!0},remove(){tech.isRailEnergy=!1}},{name:"autonomous defense",descriptionFunction:()=>`if you <strong>collide</strong> with a <strong>mob</strong><br>fire ${b.guns[9].harpoonName()} at nearby <strong>mobs</strong>`,isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("harpoon"),requires:"harpoon",effect(){tech.isHarpoonDefense=!0},remove(){tech.isHarpoonDefense=!1}},{name:"rebar",descriptionFunction(){return`use ${this.removeAmmo} <strong class='color-ammo'>ammo</strong> to forge your <strong>harpoon</strong> into <strong>rebar</strong><br><strong>2x</strong> <strong class='color-d'>damage</strong> and mass`},isGunTech:!0,maxCount:1,count:0,frequency:3,frequencyDefault:3,removeAmmo:30,allowed(){return tech.haveGunCheck("harpoon")&&(build.isExperimentSelection||b.guns[9].ammo>=this.removeAmmo)},requires:"harpoon",effect(){for(tech.isRebar=!0,i=0,len=b.guns.length;i<len;i++)if("harpoon"===b.guns[i].name){b.guns[i].ammo-=this.removeAmmo,b.guns[i].ammo<0&&(b.guns[i].ammo=0),simulation.updateGunHUD();break}},remove(){if(tech.isRebar=!1,this.count)for(i=0,len=b.guns.length;i<len;i++)if("harpoon"===b.guns[i].name){b.guns[i].ammo+=this.removeAmmo,simulation.updateGunHUD();break}}},{name:"maul",descriptionFunction(){return`use ${this.removeAmmo} <strong class='color-ammo'>ammo</strong> to forge <strong>rebar</strong> into a <strong>maul</strong><br><strong>2x</strong> <strong class='color-d'>damage</strong> and mass`},isGunTech:!0,maxCount:1,count:0,frequency:4,frequencyDefault:4,removeAmmo:30,allowed(){return tech.haveGunCheck("harpoon")&&(build.isExperimentSelection||b.guns[9].ammo>=this.removeAmmo)&&tech.isRebar},requires:"harpoon, rebar",effect(){for(tech.isMaul=!0,i=0,len=b.guns.length;i<len;i++)if("harpoon"===b.guns[i].name){b.guns[i].ammo-=this.removeAmmo,b.guns[i].ammo<0&&(b.guns[i].ammo=0),simulation.updateGunHUD();break}},remove(){if(tech.isMaul=!1,this.count)for(i=0,len=b.guns.length;i<len;i++)if("harpoon"===b.guns[i].name){b.guns[i].ammo+=this.removeAmmo,simulation.updateGunHUD();break}}},{name:"wear",descriptionFunction:()=>`<strong>2x</strong> ${b.guns[9].harpoonName()} <em>fire rate</em><br><strong>10%</strong> chance to <strong>break</strong> on hitting mobs, <strong>-1</strong> <strong class='color-ammo'>ammo</strong>`,isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("harpoon")&&!tech.isRailGun,requires:"harpoon, not railgun",effect(){tech.isBreakHarpoon=!0},remove(){tech.isBreakHarpoon=!1}},{name:"spalling",descriptionFunction:()=>`if your ${b.guns[9].harpoonName()} <strong>breaks</strong> after hitting mobs<br>spawn metal <strong>fragments</strong> and ${powerUps.orb.research(2)}${powerUps.orb.boost(1)}`,isGunTech:!0,maxCount:1,count:0,frequency:4,frequencyDefault:4,allowed:()=>tech.haveGunCheck("harpoon")&&tech.isBreakHarpoon,requires:"harpoon, wear",effect(){tech.isBreakHarpoonGain=!0},remove(){tech.isBreakHarpoonGain=!1}},{name:"Bessemer process",descriptionFunction:()=>`<strong>${(1+.1*Math.sqrt(b.guns[9].ammo)).toFixed(2)}x</strong> ${b.guns[9].harpoonName()} size and <strong class='color-d'>damage</strong><br><em>(effect scales by 1/10 √<strong class='color-ammo'>ammo</strong>)</em>`,isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("harpoon")&&!tech.isShieldPierce,requires:"harpoon, not ceramics",effect(){tech.isLargeHarpoon=!0},remove(){tech.isLargeHarpoon=!1}},{name:"smelting",descriptionFunction(){return`forge <strong>${this.removeAmmo()}</strong> <strong class='color-ammo'>ammo</strong> into a new ${b.guns[9].harpoonName()}<br>fire <strong>+1</strong> ${b.guns[9].harpoonName()} with each shot`},isGunTech:!0,maxCount:9,count:0,frequency:2,frequencyDefault:2,ammoRemoved:0,removeAmmo(){return(tech.isRailGun?5:1)*(2+2*this.count)},allowed(){return tech.haveGunCheck("harpoon")&&b.guns[9].ammo>=this.removeAmmo()},requires:"harpoon",effect(){for(i=0,len=b.guns.length;i<len;i++)if("harpoon"===b.guns[i].name){const e=this.removeAmmo();this.ammoRemoved+=e,b.guns[i].ammo-=e,b.guns[i].ammo<0&&(b.guns[i].ammo=0),simulation.updateGunHUD(),tech.extraHarpoons++;break}},remove(){if(tech.extraHarpoons)for(i=0,len=b.guns.length;i<len;i++)if("harpoon"===b.guns[i].name){b.guns[i].ammo+=this.ammoRemoved,simulation.updateGunHUD();break}this.ammoRemoved=0,tech.extraHarpoons=0}},{name:"UHMWPE",descriptionFunction:()=>`<strong>${(1+.0125*b.guns[9].ammo).toFixed(2)}x</strong> ${b.guns[9].harpoonName()} rope length<br><em>(effect scales by 1/80 of <strong class='color-ammo'>ammo</strong>)</em>`,isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("harpoon")&&!tech.isRailGun,requires:"harpoon, not railgun",effect(){tech.isFilament=!0},remove(){tech.isFilament=!1}},{name:"induction furnace",descriptionFunction:()=>`after using ${b.guns[9].harpoonName()}/<strong>grapple</strong> to collect <strong>power ups</strong><br><strong>1.8x</strong> ${b.guns[9].harpoonName()} or <strong>grapple</strong> <strong class='color-d'>damage</strong> for <strong>8</strong> seconds`,isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>(tech.haveGunCheck("harpoon")&&!tech.isRailGun||10===m.fieldMode)&&!tech.isHarpoonFullHealth,requires:"harpoon, grappling hook, not railgun, brittle",effect(){tech.isHarpoonPowerUp=!0},remove(){tech.isHarpoonPowerUp=!1,tech.harpoonPowerUpCycle=0}},{name:"brittle",descriptionFunction:()=>`<strong>2.2x</strong> ${b.guns[9].harpoonName()}/<strong>grapple</strong> <strong class='color-d'>damage</strong><br>to <strong>mobs</strong> at maximum <strong>durability</strong>`,isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>(tech.haveGunCheck("harpoon")||10===m.fieldMode)&&!tech.isHarpoonPowerUp,requires:"harpoon, grappling hook, not induction furnace",effect(){tech.isHarpoonFullHealth=!0},remove(){tech.isHarpoonFullHealth=!1}},{name:"quasiparticles",descriptionFunction:()=>`convert current and future ${powerUps.orb.ammo(1)} into ${powerUps.orb.boost(1)}<br>that give <strong>${(1+powerUps.boost.damage).toFixed(2)}x</strong> <strong class='color-d'>damage</strong> for <strong>${(powerUps.boost.duration/60).toFixed(0)}</strong> seconds</span>`,isGunTech:!0,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>tech.haveGunCheck("wave")&&tech.isInfiniteWaveAmmo||tech.haveGunCheck("laser")||tech.haveGunCheck("harpoon")&&!tech.isRailGun,requires:"harpoon, laser, wave, frequency, not railgun, non-renewables",effect(){tech.isBoostReplaceAmmo=!0;for(let e=powerUp.length-1;e>-1;e--)"ammo"===powerUp[e].name&&(powerUps.spawn(powerUp[e].position.x+50*(Math.random()-.5),powerUp[e].position.y+50*(Math.random()-.5),"boost"),Matter.Composite.remove(engine.world,powerUp[e]),powerUp.splice(e,1))},remove(){tech.isBoostReplaceAmmo=!1}},{name:"optical amplifier",description:`gain <strong>3</strong> random <strong class='color-laser'>laser</strong> ${powerUps.orb.tech()}<br><strong class='color-laser'>laser</strong> only turns <strong>off</strong> if you have no <strong class='color-f'>energy</strong>`,maxCount:1,count:0,frequency:2,frequencyDefault:2,isInstant:!0,allowed:()=>tech.haveGunCheck("laser")&&!tech.isPulseLaser,requires:"laser gun, not pulse",effect(){requestAnimationFrame(()=>{let e=0;for(let o=0;o<3;o++){const o=["quasiparticles","lens","compound lens","arc length","infrared diode","free-electron laser","dye laser","relativistic momentum","specular reflection","diffraction grating","diffuse beam","output coupler","slow light","laser-bot","laser-bot upgrade","collimator"],t=[];for(let e=0;e<o.length;e++)for(let n=0;n<tech.tech.length;n++)if(tech.tech[n].name===o[e]){t.push(n);break}for(let e=t.length-1;e>-1;e--){const o=t[e];tech.tech[o].count<tech.tech[o].maxCount&&tech.tech[o].allowed()||t.splice(e,1)}if(t.length){const o=t[Math.floor(Math.random()*t.length)];simulation.inGameConsole(`<span class='color-var'>tech</span>.giveTech("<span class='color-text'>${tech.tech[o].name}</span>") <em>//optical amplifier</em>`,360),tech.giveTech(o),e++}}if(e>0)tech.isStuckOn=!0;else{simulation.inGameConsole("0 <span class='color-var'>tech</span> found <em>//optical amplifier</em>");const e=()=>{if(simulation.paused||!m.alive)requestAnimationFrame(e);else for(let e=0;e<tech.tech.length;e++)tech.tech[e].name===this.name&&powerUps.ejectTech(e)};requestAnimationFrame(e)}})},remove(){tech.isStuckOn=!1}},{name:"relativistic momentum",description:"<strong class='color-laser'>lasers</strong> push <strong>mobs</strong> and <strong class='color-block'>blocks</strong>",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("laser")&&!tech.isPulseLaser||tech.isLaserBotUpgrade||tech.isLaserField,requires:"laser, not pulse",effect(){tech.isLaserPush=!0},remove(){tech.isLaserPush=!1}},{name:"iridescence",description:"if <strong class='color-laser'>laser</strong> beams hit mobs near their <strong>center</strong><br><strong>2x</strong> <strong class='color-laser'>laser</strong> <strong class='color-d'>damage</strong>",isGunTech:!0,maxCount:9,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("laser")&&!tech.isPulseLaser||tech.isLaserBotUpgrade||tech.isLaserMine,requires:"laser, not pulse",effect(){tech.laserCrit+=1},remove(){tech.laserCrit=0}},{name:"lens",description:"<strong>2.5x</strong> <strong class='color-laser'>laser</strong> <strong class='color-d'>damage</strong> if it passes<br>through a revolving <strong>90°</strong> arc circular lens",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("laser"),requires:"laser",effect(){tech.isLaserLens=!0,b.guns[11].chooseFireMethod()},remove(){tech.isLaserLens=!1,b.guns[11].chooseFireMethod()}},{name:"compound lens",description:"<strong>1.4x</strong> <strong class='color-laser'>laser</strong> lens <strong class='color-d'>damage</strong><br><strong>+30°</strong> lens arc",isGunTech:!0,maxCount:9,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("laser")&&tech.isLaserLens,requires:"lens",effect(){b.guns[11].arcRange+=30*Math.PI/180/2,b.guns[11].lensDamageOn+=.4},remove(){b.guns[11].arcRange=90*Math.PI/180/2,b.guns[11].lensDamageOn=2.5}},{name:"specular reflection",description:"<strong>+2</strong> <strong class='color-laser'>laser</strong> beam reflections",isGunTech:!0,maxCount:3,count:0,frequency:1,frequencyDefault:1,allowed:()=>(tech.haveGunCheck("laser")||tech.isLaserMine||tech.isLaserBotUpgrade||tech.isLaserField)&&!tech.isWideLaser&&!tech.isPulseLaser&&!tech.historyLaser,requires:"laser, not diffuse beam, pulse, slow light",effect(){tech.laserReflections+=2},remove(){tech.laserReflections=2}},{name:"diffraction grating",description:"<strong>+1</strong> diverging <strong class='color-laser'>laser</strong> beam",isGunTech:!0,maxCount:9,count:0,frequency:1,frequencyDefault:1,allowed:()=>tech.haveGunCheck("laser")&&!tech.isWideLaser&&!tech.historyLaser,requires:"laser gun, not diffuse beam, slow light",effect(){tech.beamSplitter++,b.guns[11].chooseFireMethod()},remove(){0!==tech.beamSplitter&&(tech.beamSplitter=0,b.guns[11].chooseFireMethod())}},{name:"collimator",description:"<strong>+1</strong> <strong class='color-laser'>laser</strong> beam<br>align your diverging <strong class='color-laser'>laser</strong> beams to be <strong>parallel</strong>",isGunTech:!0,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>tech.haveGunCheck("laser")&&!tech.isWideLaser&&!tech.historyLaser&&tech.beamSplitter>0&&!tech.isPulseLaser,requires:"laser gun, diffraction, not diffuse beam, slow light, pulse",effect(){tech.beamSplitter++,tech.beamCollimator=!0,b.guns[11].chooseFireMethod()},remove(){tech.beamCollimator=!1,tech.beamSplitter>0&&tech.beamSplitter--,b.guns[11].chooseFireMethod()}},{name:"diffuse beam",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Diffuser_(optics)\' class="link">diffuse beam</a>',description:"your <strong class='color-laser'>laser</strong> beam is <strong>wider</strong>, but it doesn't <strong>reflect</strong><br><strong>3.2x</strong> <strong class='color-laser'>laser</strong> <strong class='color-d'>damage</strong>",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("laser")&&tech.laserReflections<3&&!tech.beamSplitter&&!tech.isPulseLaser&&!tech.historyLaser,requires:"laser gun, not specular reflection, diffraction grating, slow light, pulse",effect(){0===tech.wideLaser&&(tech.wideLaser=3),tech.isWideLaser=!0,b.guns[11].chooseFireMethod()},remove(){tech.isWideLaser&&(tech.isWideLaser=!1,b.guns[11].chooseFireMethod())}},{name:"output coupler",description:"<strong>1.3x</strong> <strong class='color-laser'>laser</strong> beam <strong>width</strong><br><strong>1.3x</strong> <strong class='color-laser'>laser</strong> <strong class='color-d'>damage</strong>",isGunTech:!0,maxCount:9,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("laser")&&tech.isWideLaser,requires:"laser gun, diffuse beam",effect(){tech.wideLaser+=2,b.guns[11].chooseFireMethod()},remove(){tech.isWideLaser?tech.wideLaser=3:tech.wideLaser=0,b.guns[11].chooseFireMethod()}},{name:"delayed-choice",description:"your <strong class='color-laser'>laser</strong> fires a <strong>0.4</strong> second <strong>delayed</strong> beam<br>that does <strong>0.7x</strong> <strong class='color-d'>damage</strong>",isGunTech:!0,maxCount:9,count:0,frequency:1,frequencyDefault:1,allowed:()=>tech.haveGunCheck("laser")&&!tech.beamSplitter&&!tech.isWideLaser,requires:"laser gun, not diffraction grating, diffuse beam",effect(){tech.historyLaser++,b.guns[11].chooseFireMethod()},remove(){tech.historyLaser&&(tech.historyLaser=0,b.guns[11].chooseFireMethod())}},{name:"infrared diode",description:"<strong>0.4x</strong> <strong class='color-laser'>laser</strong> <strong class='color-f'>energy</strong> cost<br><em>infrared light is outside visual perception</em>",isGunTech:!0,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>(tech.haveGunCheck("laser")||tech.isLaserBotUpgrade||tech.isLaserMine||tech.isLaserField)&&!tech.isPulseLaser&&.003===tech.laserDrain,requires:"laser, not free-electron, pulse",effect(){tech.laserDrain*=.4,tech.laserColor="transparent"},remove(){tech.laserDrain=.003,tech.laserColor="#f02",tech.laserColorAlpha="rgba(255, 0, 0, 0.5)"}},{name:"dye laser",description:"<strong>0.75x</strong> <strong class='color-laser'>laser</strong> <strong class='color-f'>energy</strong> cost<br><strong>1.25x</strong> <strong class='color-laser'>laser</strong> <strong class='color-d'>damage</strong>",isGunTech:!0,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>(tech.haveGunCheck("laser")||tech.isLaserMine||tech.isLaserBotUpgrade||tech.isLaserField)&&!tech.isPulseLaser&&.003===tech.laserDrain,requires:"laser, not pulse, infrared diode",effect(){tech.laserDrain*=.75,tech.laserDamage*=1.25,tech.laserColor="rgb(0, 40, 255)",tech.laserColorAlpha="rgba(0, 40, 255,0.5)"},remove(){tech.laserDrain=.003,tech.laserDamage=.18,tech.laserColor="#f00",tech.laserColorAlpha="rgba(255, 0, 0, 0.5)"}},{name:"free-electron laser",description:"<strong>3x</strong> <strong class='color-laser'>laser</strong> <strong class='color-f'>energy</strong> cost<br><strong>3x</strong> <strong class='color-laser'>laser</strong> <strong class='color-d'>damage</strong>",isGunTech:!0,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>(tech.haveGunCheck("laser")||tech.isLaserMine||tech.isLaserBotUpgrade||tech.isLaserField)&&!tech.isPulseLaser&&.003===tech.laserDrain,requires:"laser, not pulse, infrared diode",effect(){tech.laserDrain*=3,tech.laserDamage*=3,tech.laserColor="#83f",tech.laserColorAlpha="rgba(136, 51, 255,0.5)"},remove(){tech.laserDrain=.003,tech.laserDamage=.18,tech.laserColor="#f00",tech.laserColorAlpha="rgba(255, 0, 0, 0.5)"}},{name:"pulse",description:"charge your <strong class='color-f'>energy</strong> and release it as a<br><strong class='color-laser'>laser</strong> pulse that initiates an <strong class='color-e'>explosion</strong> cluster",isGunTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.haveGunCheck("laser")&&tech.laserReflections<3&&!tech.isWideLaser&&.003===tech.laserDrain&&!tech.isStuckOn&&!tech.beamCollimator,requires:"laser gun, not specular reflection, diffuse, free-electron laser, optical amplifier, collimator",effect(){tech.isPulseLaser=!0,b.guns[11].chooseFireMethod()},remove(){tech.isPulseLaser&&(tech.isPulseLaser=!1,b.guns[11].chooseFireMethod())}},{name:"spherical harmonics",description:"<strong>1.5x</strong> <strong>standing wave</strong> deflection <strong class='color-f'>energy</strong> efficiency<br>shield deflection <strong>radius</strong> is stable",isFieldTech:!0,maxCount:9,count:0,frequency:2,frequencyDefault:2,allowed:()=>1===m.fieldMode&&!tech.isLaserField,requires:"standing wave, not surface plasmons",effect(){tech.harmonics++,m.fieldShieldingScale=1.6*Math.pow(.5,tech.harmonics-2),m.harmonicShield=m.harmonicAtomic},remove(){tech.harmonics=2,m.fieldShieldingScale=1.6*Math.pow(.5,tech.harmonics-2),m.harmonicShield=m.harmonic3Phase}},{name:"superposition",descriptionFunction:()=>"<strong>0.1x</strong> <strong class='color-defense'>damage taken</strong><br>while you have above <strong>200</strong> <strong class='color-f'>energy</strong>",isFieldTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>1===m.fieldMode,requires:"standing wave",effect(){tech.energyDefense=!0},remove(){tech.energyDefense=!1}},{name:"surface plasmons",description:"if <strong>deflecting</strong> drains all your <strong class='color-f'>energy</strong><br>emit <strong class='color-laser'>laser</strong> beams that scale with max <strong class='color-f'>energy</strong>",isFieldTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>1===m.fieldMode&&2===tech.harmonics,requires:"standing wave",effect(){tech.isLaserField=!0},remove(){tech.isLaserField=!1}},{name:"zero point energy",description:`<strong>+166</strong> maximum <strong class='color-f'>energy</strong><span style ="float: right;"><span class="underline">expend</span> ${powerUps.orb.research(2)}</span>`,isFieldTech:!0,maxCount:1,count:0,frequency:3,frequencyDefault:3,allowed:()=>(1===m.fieldMode||8===m.fieldMode)&&(build.isExperimentSelection||powerUps.research.count>1),requires:"standing wave, pilot wave",effect(){tech.harmonicEnergy=1.66,m.setMaxEnergy(),powerUps.research.expend(2)},remove(){tech.harmonicEnergy=0,m.setMaxEnergy(),this.count>0&&powerUps.research.changeRerolls(2)}},{name:"expansion",description:"using standing wave <strong>expands</strong> its <strong>radius</strong><br><strong>+77</strong> maximum <strong class='color-f'>energy</strong>",isFieldTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>1===m.fieldMode,requires:"standing wave",effect(){tech.isStandingWaveExpand=!0,m.setMaxEnergy()},remove(){tech.isStandingWaveExpand=!1,m.setMaxEnergy(),m.harmonicRadius=1}},{name:"electronegativity",descriptionFunction:()=>`<strong>1.0023x</strong> <strong class='color-d'>damage</strong> per <strong class='color-f'>energy</strong><br><em style ="float: right;">(${(1+.23*m.energy).toFixed(2)}x, ${(1+.23*m.maxEnergy).toFixed(2)}x at max energy)</em>`,isFieldTech:!0,maxCount:9,count:0,frequency:2,frequencyDefault:2,allowed:()=>1===m.fieldMode||9===m.fieldMode||8===m.fieldMode,requires:"standing wave, wormhole, pilot wave",effect(){tech.energyDamage++},remove(){tech.energyDamage=0}},{name:"bremsstrahlung",description:"<strong>deflecting</strong> with your <strong class='color-f'>field</strong> and thrown <strong class='color-block'>blocks</strong><br>do extra <strong class='color-d'>damage</strong> to mobs",isFieldTech:!0,maxCount:9,count:0,frequency:2,frequencyDefault:2,allowed:()=>1===m.fieldMode||2===m.fieldMode||8===m.fieldMode,requires:"standing wave, perfect diamagnetism, pilot wave",effect(){tech.blockDmg+=5},remove(){tech.blockDmg=0}},{name:"cherenkov radiation",description:"bremsstrahlung's effects are <strong class='color-p'>radioactive</strong><br><strong>3.5x</strong> <strong class='color-d'>damage</strong> over <strong>3</strong> seconds",isFieldTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>(1===m.fieldMode||2===m.fieldMode||8===m.fieldMode)&&tech.blockDmg,requires:"bremsstrahlung",effect(){tech.isBlockRadiation=!0},remove(){tech.isBlockRadiation=!1}},{name:"flux pinning",description:`mobs <strong>deflected</strong> by your ${powerUps.orb.field()}<br>are <strong>stunned</strong> for <strong>4</strong> seconds`,isFieldTech:!0,maxCount:9,count:0,frequency:2,frequencyDefault:2,allowed:()=>2===m.fieldMode||1===m.fieldMode||4===m.fieldMode,requires:"a field that can block",effect(){tech.isStunField+=240},remove(){tech.isStunField=0}},{name:"eddy current brake",description:"perfect diamagnetism <strong class='color-s'>slows</strong> nearby mobs<br>effect <strong>radius</strong> scales with stored <strong class='color-f'>energy</strong>",isFieldTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>2===m.fieldMode&&!tech.isHealBrake,requires:"perfect diamagnetism, not induction brake",effect(){tech.isPerfectBrake=!0},remove(){tech.isPerfectBrake=!1}},{name:"Meissner effect",description:"<strong>1.55x</strong> perfect diamagnetism <strong>radius</strong><br><strong>+22°</strong> perfect diamagnetism circular <strong>arc</strong>",isFieldTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>2===m.fieldMode,requires:"perfect diamagnetism",effect(){tech.isBigField=!0},remove(){tech.isBigField=!1}},{name:"radiative equilibrium",descriptionFunction:()=>`after losing ${tech.isEnergyHealth?"<strong class='color-f'>energy</strong> from collisions":"<strong class='color-h'>health</strong>"}<br><strong>4x</strong> <strong class='color-d'>damage</strong> for <strong>4</strong> seconds`,isFieldTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>8===m.fieldMode||3===m.fieldMode,requires:"negative mass, pilot wave",effect(){tech.isHarmDamage=!0},remove(){tech.isHarmDamage=!1}},{name:"dynamic equilibrium",descriptionFunction:()=>`increase <strong class='color-d'>damage</strong> by your most recent ${tech.isEnergyHealth?"<strong class='color-f'>energy</strong>":"<strong class='color-h'>health</strong>"} loss<br> <em style ="float: right;">(${(1+(0===tech.lastHitDamage?6:tech.lastHitDamage)*m.lastHit).toFixed(2)}x)</em>`,isFieldTech:!0,maxCount:3,count:0,frequency:2,frequencyDefault:2,allowed:()=>8===m.fieldMode||3===m.fieldMode,requires:"negative mass, pilot wave",effect(){tech.lastHitDamage+=8},remove(){tech.lastHitDamage=0}},{name:"neutronium",description:`<strong>0.8x</strong> <strong>move</strong> and <strong>jump</strong>, but <br>while your ${powerUps.orb.field()} is active <strong>0.05x</strong> <strong class='color-defense'>damage taken</strong>`,isFieldTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>3===m.fieldMode&&0!==tech.negativeMassCost,requires:"negative mass, not equivalence principle",effect(){tech.isNeutronium=!0,tech.baseFx*=.86,tech.baseJumpForce*=.87,m.setMovement()},remove(){tech.isNeutronium=!1,tech.isFreeWormHole||(tech.baseFx=.08,tech.baseJumpForce=10.5,m.setMovement())}},{name:"equivalence principle",description:"<strong>negative mass</strong> field doesn't cost <strong class='color-f'>energy</strong><br>",isFieldTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>3===m.fieldMode&&!tech.isNeutronium,requires:"negative mass, not neutronium",effect(){tech.negativeMassCost=0},remove(){tech.negativeMassCost=35e-5}},{name:"inertial mass",description:"<strong>negative mass</strong> is larger and <strong>faster</strong>",isFieldTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>3===m.fieldMode,requires:"negative mass",effect(){tech.isFlyFaster=!0},remove(){tech.isFlyFaster=!1}},{name:"annihilation",description:"<strong>mobs</strong> you <strong>collide</strong> with are <strong>annihilated</strong><br><strong>–8</strong> <strong class='color-f'>energy</strong> each time",isFieldTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>3===m.fieldMode&&!tech.isEnergyHealth,requires:"negative mass, not mass-energy",effect(){tech.isAnnihilation=!0},remove(){tech.isAnnihilation=!1}},{name:"Newtons 1st law",descriptionFunction:()=>`<strong class='color-defense'>damage taken</strong> reduces as your <strong class="color-speed">speed</strong> increases<br>up to <strong>0.05x</strong> <strong class='color-defense'>damage taken</strong> at <strong>60</strong> <strong class="color-speed">speed</strong> <em style ="float: right;">(${(1-Math.min(.01583*(tech.speedAdded+player.speed),.95)).toFixed(2)}x)</em>`,isFieldTech:!0,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>3===m.fieldMode||10===m.fieldMode,requires:"negative mass, grappling hook",effect(){tech.isSpeedHarm=!0},remove(){tech.isSpeedHarm=!1}},{name:"Newtons 2nd law",descriptionFunction:()=>`<strong class='color-d'>damage</strong> increases proportional to your <strong class="color-speed">speed</strong><br>up to <strong>3x</strong> <strong class='color-d'>damage</strong> at <strong>60</strong> <strong class="color-speed">speed</strong> <em style ="float: right;">(${(1+Math.min(2,.033*(tech.speedAdded+player.speed))).toFixed(2)}x)</em>`,isFieldTech:!0,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>3===m.fieldMode||10===m.fieldMode,requires:"negative mass, grappling hook",effect(){tech.isSpeedDamage=!0},remove(){tech.isSpeedDamage=!1}},{name:"MOND",descriptionFunction:()=>'your <strong class="color-speed">speed</strong> counts as <strong>+20</strong> higher<br><em>(for Newton\'s 1st and 2nd laws)</em>',isFieldTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>tech.isSpeedDamage||tech.isSpeedHarm,requires:"Newtons 1st or 2nd law",effect(){tech.speedAdded=20},remove(){tech.speedAdded=0}},{name:"additive manufacturing",description:`hold <strong>crouch</strong> and use ${powerUps.orb.field()} to <strong class='color-print'>print</strong> a <strong class='color-block'>block</strong><br> with <strong>1.8x</strong> density, <strong class='color-d'>damage</strong>, and launch speed`,isFieldTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>(4===m.fieldMode||8===m.fieldMode)&&!tech.isTokamak,requires:"molecular assembler, pilot wave, not tokamak",effect(){tech.isPrinter=!0},remove(){this.count>0&&(m.holdingTarget=null),tech.isPrinter=!1}},{name:"working mass",descriptionFunction(){m.fieldMode;return"pressing <strong>jump</strong> in <strong>midair</strong><br>will <strong class='color-print'>print</strong> a <strong class='color-block'>block</strong> to <strong>jump</strong> off"},isFieldTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>4===m.fieldMode||8===m.fieldMode,requires:"molecular assembler, pilot wave",effect(){simulation.ephemera.push({name:"blockJump",blockJumpPhase:0,do(){if(m.onGround&&m.buttonCD_jump+10<m.cycle&&!(m.lastOnGroundCycle+m.coyoteCycles>m.cycle)&&(this.blockJumpPhase=0),0===this.blockJumpPhase&&!m.onGround&&!input.up&&m.buttonCD_jump+10<m.cycle)this.blockJumpPhase=1;else if(1===this.blockJumpPhase&&input.up&&m.buttonCD_jump+10<m.cycle){this.blockJumpPhase=2;let e=8*(-input.left+input.right);const o=25+Math.floor(15*Math.random());body[body.length]=Matter.Bodies.polygon(m.pos.x,m.pos.y+60+o,4,o,{friction:.05,frictionAir:.001,collisionFilter:{category:cat.body,mask:cat.player|cat.map|cat.body|cat.bullet|cat.mob|cat.mobBullet},classType:"body"});const t=body[body.length-1];Composite.add(engine.world,t);const n=o*(1+.4*Math.random()),s=o*(1+.4*Math.random());let r=Math.PI/4;const a=[];for(let e=0,o=t.vertices.length;e<o;e++)r+=2*Math.PI/o,a.push({x:t.position.x+n*Math.cos(r),y:t.position.y+s*Math.sin(r)});if(Matter.Body.setVertices(t,a),Matter.Body.setVelocity(t,{x:.9*player.velocity.x-e,y:10}),Matter.Body.applyForce(t,m.pos,{x:0,y:.12*m.jumpForce*Math.min(m.standingOn.mass,5)}),tech.isBlockRestitution&&(t.restitution=.999,t.friction=t.frictionStatic=t.frictionAir=.001),tech.isAddBlockMass){const e=function(o,t){if(o.mass<t){const n=1.04;Matter.Body.scale(o,n,n),setTimeout(e,20,o,t)}};e(t,Math.min(20,3*t.mass))}m.lastOnGroundCycle=m.cycle,m.buttonCD_jump=m.cycle,Matter.Body.setVelocity(player,{x:player.velocity.x+e,y:.25*player.velocity.y-7.5}),player.force.y=-m.jumpForce,m.fieldUpgrades[4].endoThermic(.3)}}})},remove(){this.count&&simulation.removeEphemera("blockJump",!0)}},{name:"pair production",description:"after picking up a <strong>power up</strong><br><strong>+200</strong> <strong class='color-f'>energy</strong>",isFieldTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>4===m.fieldMode||1===m.fieldMode||8===m.fieldMode,requires:"molecular assembler, pilot wave, standing wave",effect(){tech.isMassEnergy=!0,m.energy+=2*level.isReducedRegen},remove(){tech.isMassEnergy=!1}},{name:"endothermic",description:"each time you <strong class='color-print'>print</strong> something also<br><strong class='color-print'>print</strong> <strong class='color-s'>ice IX</strong> crystals for <strong>0</strong> <strong class='color-f'>energy</strong>",isFieldTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>4===m.fieldMode,requires:"molecular assembler, pilot wave, standing wave",effect(){tech.isEndothermic=!0},remove(){tech.isEndothermic=!1}},{name:"electric generator",description:"after <strong>deflecting</strong> mobs<br><strong>molecular assembler</strong> generates <strong>+50</strong> <strong class='color-f'>energy</strong>",isFieldTech:!0,maxCount:9,count:0,frequency:2,frequencyDefault:2,allowed:()=>4===m.fieldMode,requires:"molecular assembler",effect(){tech.deflectEnergy+=.5},remove(){tech.deflectEnergy=0}},{name:"tokamak",description:"<strong class='color-tokamak'>tokamak</strong> converts thrown <strong class='color-block'>blocks</strong> into <strong class='color-f'>energy</strong><br>and a pulsed fusion <strong class='color-e'>explosion</strong>",isFieldTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>!(5!==m.fieldMode&&4!==m.fieldMode&&10!==m.fieldMode||tech.isPrinter||tech.isReel||tech.hookNails),requires:"plasma torch, molecular assembler, grappling hook, not printer, reel, swarf",effect(){tech.isTokamak=!0},remove(){tech.isTokamak=!1}},{name:"stellarator",descriptionFunction:()=>`the first <strong>5</strong> <strong class='color-block'>blocks</strong> detonated by <strong class='color-tokamak'>tokamak</strong><br>spawn ${powerUps.orb.heal(1)} proportional to <strong class='color-block'>block</strong> size`,isFieldTech:!0,maxCount:1,count:0,frequency:3,frequencyDefault:3,allowed:()=>tech.isTokamak&&(5===m.fieldMode||4===m.fieldMode||10===m.fieldMode),requires:"tokamak",effect(){tech.isTokamakHeal=!0,tech.tokamakHealCount=0},remove(){tech.isTokamakHeal=!1}},{name:"inertial confinement",description:"while holding a <strong class='color-block'>block</strong> charged with <strong class='color-tokamak'>tokamak</strong><br>you can use <strong class='color-f'>energy</strong> to <strong>fly</strong>",isFieldTech:!0,maxCount:1,count:0,frequency:3,frequencyDefault:3,allowed:()=>tech.isTokamak&&(5===m.fieldMode||4===m.fieldMode||10===m.fieldMode),requires:"tokamak",effect(){tech.isTokamakFly=!0},remove(){tech.isTokamakFly=!1}},{name:"degenerate matter",description:`if your ${powerUps.orb.field()} is active<br><strong>0.1x</strong> <strong class='color-defense'>damage taken</strong>`,isFieldTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>(10===m.fieldMode||5===m.fieldMode||8===m.fieldMode)&&!tech.isNoPilotCost,requires:"plasma torch, grappling hook, pilot wave, not Bells theorem",effect(){tech.isHarmReduce=!0},remove(){tech.isHarmReduce=!1}},{name:"plasma-bot",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Robot\' class="link">plasma-bot</a>',description:`trade your ${powerUps.orb.field()}<span style ="float: right;"><span class="underline">expend</span> ${powerUps.orb.research(2)}</span><br>for a <strong class='color-bot'>bot</strong> that uses <strong class='color-f'>energy</strong> to emit <strong class='color-plasma'>plasma</strong>`,isInstant:!0,maxCount:1,count:0,frequency:3,frequencyDefault:3,isBot:!0,isBotTech:!0,allowed:()=>5===m.fieldMode&&!tech.isPlasmaBall&&!tech.isExtruder&&(build.isExperimentSelection||powerUps.research.count>1),requires:"plasma torch, not extruder, plasma ball",effect(){tech.plasmaBotCount++,b.plasmaBot(),build.isExperimentSelection&&(document.getElementById("field-"+m.fieldMode).classList.remove("build-field-selected"),document.getElementById("field-0").classList.add("build-field-selected")),m.setField("field emitter"),powerUps.research.expend(2)},remove(){this.count>0&&(tech.plasmaBotCount=0,b.clearPermanentBots(),b.respawnBots(),0===m.fieldMode&&(m.setField("plasma torch"),build.isExperimentSelection&&(document.getElementById("field-0").classList.remove("build-field-selected"),document.getElementById("field-"+m.fieldMode).classList.add("build-field-selected"))),powerUps.research.changeRerolls(2))}},{name:"dielectric",descriptionFunction:()=>`while <strong class='color-plasma'>plasma</strong> ${powerUps.orb.field()} is active<span style ="float: right;"><span class="underline">expend</span> ${powerUps.orb.research(2)}</span><br>activate ${powerUps.orb.boost(1)} for ${(1+powerUps.boost.damage).toFixed(2)}x</strong> <strong class='color-d'>damage</strong>`,isFieldTech:!0,maxCount:1,count:0,frequency:3,frequencyDefault:3,allowed:()=>5===m.fieldMode&&(build.isExperimentSelection||powerUps.research.count>1),requires:"plasma torch",effect(){tech.isPlasmaBoost=!0,powerUps.research.expend(2)},remove(){tech.isPlasmaBoost=!1,this.count>0&&powerUps.research.changeRerolls(2)}},{name:"plasma jet",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Plasma_(physics)\' class="link">plasma jet</a>',descriptionFunction:()=>tech.isPlasmaBall?`<strong>1.5x</strong> <strong class='color-plasma'>plasma</strong> <strong>ball</strong> radius<span style ="float: right;"><span class="underline">expend</span> ${powerUps.orb.research(1)}</span>`:`<strong>1.5x</strong> <strong class='color-plasma'>plasma</strong> <strong>torch</strong> range<span style ="float: right;"><span class="underline">expend</span> ${powerUps.orb.research(1)}</span>`,isFieldTech:!0,maxCount:3,count:0,frequency:3,frequencyDefault:3,allowed:()=>(tech.plasmaBotCount||5===m.fieldMode)&&(build.isExperimentSelection||powerUps.research.count>0),requires:"plasma torch",effect(){tech.isPlasmaRange+=.5,powerUps.research.expend(1)},remove(){tech.isPlasmaRange=1,this.count>0&&powerUps.research.changeRerolls(this.count)}},{name:"extruder",description:"<strong>extrude</strong> a thin hot wire of <strong class='color-plasma'>plasma</strong><br>increases <strong class='color-d'>damage</strong> and <strong class='color-f'>energy</strong> cost",isFieldTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>5===m.fieldMode&&!tech.isPlasmaBall,requires:"plasma torch, not plasma ball",effect(){tech.isExtruder=!0,window.removeEventListener("keydown",m.fieldEvent),m.fieldUpgrades[m.fieldMode].set()},remove(){tech.isExtruder=!1,this.count&&5===m.fieldMode&&(window.removeEventListener("keydown",m.fieldEvent),m.fieldUpgrades[m.fieldMode].set())}},{name:"refractory metal",description:"<strong class='color-plasma'>extrude</strong> metals at a higher <strong class='color-plasma'>temperature</strong><br>increases effective <strong>radius</strong> and <strong class='color-d'>damage</strong>",isFieldTech:!0,maxCount:9,count:0,frequency:2,frequencyDefault:2,allowed:()=>5===m.fieldMode&&tech.isExtruder,requires:"extruder",effect(){tech.extruderRange+=55},remove(){tech.extruderRange=15}},{name:"plasma ball",description:"<strong>grow</strong> an expanding <strong>ball</strong> of <strong class='color-plasma'>plasma</strong><br>increases <strong>buoyancy</strong>, <strong class='color-d'>damage</strong>, and <strong class='color-f'>energy</strong> cost",isFieldTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>5===m.fieldMode&&!tech.isExtruder,requires:"plasma torch, not extruder",effect(){tech.isPlasmaBall=!0,window.removeEventListener("keydown",m.fieldEvent),m.fieldUpgrades[m.fieldMode].set()},remove(){tech.isPlasmaBall=!1,this.count&&5===m.fieldMode&&(window.removeEventListener("keydown",m.fieldEvent),m.fieldUpgrades[m.fieldMode].set())}},{name:"corona discharge",description:"increase the <strong>range</strong> and <strong>frequency</strong><br>of <strong class='color-plasma'>plasma</strong> ball's <strong>electric arc</strong> ",isFieldTech:!0,maxCount:9,count:0,frequency:2,frequencyDefault:2,allowed:()=>5===m.fieldMode&&tech.isPlasmaBall,requires:"plasma ball",effect(){tech.plasmaDischarge+=.03},remove(){tech.plasmaDischarge=.01}},{name:"cyclotron",description:"<strong class='color-plasma'>plasma</strong> ball curves towards your mouse<br><strong>2x</strong> <strong class='color-plasma'>plasma</strong> ball <strong class='color-d'>damage</strong> after you <strong>release</strong> it.",isFieldTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>5===m.fieldMode&&tech.isPlasmaBall,requires:"plasma ball",effect(){tech.isControlPlasma=!0},remove(){tech.isControlPlasma=!1}},{name:"frame-dragging",description:"when not <strong>moving</strong> time dilation <strong style='letter-spacing: 2px;'>stops time</strong><br><strong>0.6x</strong> <strong class='color-defense'>damage taken</strong>",isFieldTech:!0,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>6===m.fieldMode,requires:"time dilation",effect(){tech.isTimeStop=!0,m.fieldHarmReduction=.66},remove(){tech.isTimeStop=!1,6===m.fieldMode&&(m.fieldHarmReduction=1)}},{name:"Lorentz transformation",description:`<span style ="float: right;"><span class="underline">expend</span> ${powerUps.orb.research(3)}</span><strong>1.5x</strong> movement and jumping<br><strong>1.5x</strong> <em>fire rate</em>`,isFieldTech:!0,maxCount:1,count:0,frequency:3,frequencyDefault:3,allowed:()=>(6===m.fieldMode||8===m.fieldMode)&&(build.isExperimentSelection||powerUps.research.count>2),requires:"time dilation or pilot wave",effect(){tech.isFastTime=!0,m.setMovement(),b.setFireCD(),powerUps.research.expend(3)},remove(){tech.isFastTime=!1,m.setMovement(),b.setFireCD(),this.count>0&&powerUps.research.changeRerolls(3)}},{name:"time crystals",descriptionFunction:()=>`<strong>2.5x</strong> passive <strong class='color-f'>energy</strong> generation<br><em style ="float: right;">(+${(150*m.fieldRegen*60).toFixed(1)} energy per second)</em>`,isFieldTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>!tech.isGroundState&&(6===m.fieldMode||8===m.fieldMode),requires:"time dilation or pilot wave, not ground state",effect(){tech.isTimeCrystals=!0,m.setFieldRegen(),this.descriptionFunction=function(){return`<strong>2.5x</strong> passive <strong class='color-f'>energy</strong> generation<br><em style ="float: right;">(+${(60*m.fieldRegen*60).toFixed(1)} energy per second)</em>`}},remove(){tech.isTimeCrystals=!1,m.setFieldRegen(),this.descriptionFunction=function(){return`<strong>2.5x</strong> passive <strong class='color-f'>energy</strong> generation<br><em style ="float: right;">(+${(150*m.fieldRegen*60).toFixed(1)} energy per second)</em>`}}},{name:"no-cloning theorem",description:"<strong>+40%</strong> chance to <strong class='color-dup'>duplicate</strong> spawned <strong>power ups</strong><br>after a mob <strong>dies</strong> <strong>–1%</strong> <strong class='color-dup'>duplication</strong>",isFieldTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>6===m.fieldMode||7===m.fieldMode,requires:"cloaking, time dilation",effect(){tech.cloakDuplication=.4,powerUps.setPowerUpMode(),build.isExperimentSelection||simulation.isTextLogOpen||simulation.circleFlare(.4)},remove(){tech.cloakDuplication=0,this.count&&powerUps.setPowerUpMode()}},{name:"metamaterial absorber",descriptionFunction:()=>"for each mob left <strong>alive</strong> after you exit a <strong>level</strong><br>there is a <strong>40%</strong> chance to spawn a random <strong>power up</strong>",isFieldTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>7===m.fieldMode&&!tech.cloakDuplication,requires:"cloaking",effect(){tech.isQuantumEraser=!0},remove(){tech.isQuantumEraser=!1}},{name:"symbiosis",descriptionFunction:()=>`after a <strong>boss</strong> <strong>dies</strong> spawn ${powerUps.orb.research(4)}${powerUps.orb.heal(3)}${powerUps.orb.tech()}<br>after a <strong>mob</strong> <strong>dies</strong> <strong>–0.25</strong> maximum ${tech.isEnergyHealth?"<strong class='color-f'>energy</strong>":"<strong class='color-h'>health</strong>"}`,isFieldTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>7===m.fieldMode,requires:"cloaking",effect(){tech.isAddRemoveMaxHealth=!0},remove(){tech.isAddRemoveMaxHealth=!1}},{name:"boson composite",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Boson\' class="link">boson composite</a>',description:"while <strong class='color-cloaked'>cloaked</strong> you are <strong>intangible</strong><br>to <strong class='color-block'>blocks</strong> and mobs, but <strong>mobs</strong> drain <strong class='color-f'>energy</strong>",isFieldTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>7===m.fieldMode,requires:"metamaterial cloaking",effect(){tech.isIntangible=!0},remove(){tech.isIntangible&&(tech.isIntangible=!1,player.collisionFilter.mask=cat.body|cat.map|cat.mob|cat.mobBullet|cat.mobShield)}},{name:"patch",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Patch_(computing)\' class="link">patch</a>',description:"after <strong class='color-cloaked'>cloaking</strong> recover <strong>0.75x</strong><br>of your last <strong class='color-h'>health</strong> lost",isFieldTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>7===m.fieldMode&&!tech.isEnergyHealth,requires:"metamaterial cloaking, not mass-energy",effect(){tech.isCloakHealLastHit=!0},remove(){tech.isCloakHealLastHit=!1}},{name:"dazzler",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Dazzler_(weapon)\' class="link">dazzler</a>',description:"after <strong class='color-cloaked'>decloaking</strong><br><strong>stun</strong> nearby mobs for 2 seconds",isFieldTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>7===m.fieldMode,requires:"metamaterial cloaking",effect(){tech.isCloakStun=!0},remove(){tech.isCloakStun=!1}},{name:"topological defect",description:"<strong>2.1x</strong> <strong class='color-d'>damage</strong><br>to <strong>mobs</strong> at maximum <strong>durability</strong>",isFieldTech:!0,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>(8===m.fieldMode||7===m.fieldMode)&&0===tech.mobSpawnWithHealth,requires:"cloaking, pilot wave, not reaction inhibitor",effect(){tech.isMobFullHealthCloak=!0},remove(){tech.isMobFullHealthCloak=!1}},{name:"hidden-variable theory",description:`<strong>1.3x</strong> <strong class='color-d'>damage</strong> after you <strong class='color-choice'><span>ch</span><span>oo</span><span>se</span></strong> ${powerUps.orb.fieldTech()}`,isFieldTech:!0,maxCount:1,count:0,frequency:4,frequencyDefault:4,allowed:()=>8===m.fieldMode,requires:"pilot wave",effect(){tech.isDamageFieldTech=!0},remove(){tech.isDamageFieldTech=!1}},{name:"Bells theorem",description:"<strong>pilot wave</strong> is always <strong>on</strong><br>and has no <strong class='color-f'>energy</strong> cost",isFieldTech:!0,maxCount:1,count:0,frequency:4,frequencyDefault:4,allowed:()=>8===m.fieldMode&&!tech.isHarmReduce,requires:"pilot wave, not degenerate matter",effect(){tech.isNoPilotCost=!0,m.fieldUpgrades[8].drain=0,8===m.fieldMode&&(m.fieldFire=!0)},remove(){tech.isNoPilotCost=!1,m.fieldUpgrades[8].drain=1,8===m.fieldMode&&(m.fieldFire=!1)}},{name:"principle of locality",description:'<strong>0.1x</strong> <strong class=\'color-defense\'>damage taken</strong> while inside <strong>pilot wave</strong><br><div class="circle-grid tech"></div>, <div class="circle-grid gun"></div>, and <div class="circle-grid field"></div> have <strong>-2</strong> <strong class=\'color-choice\'><span>ch</span><span>oi</span><span>ces</span></strong>',isFieldTech:!0,maxCount:1,count:0,frequency:4,frequencyDefault:4,allowed:()=>8===m.fieldMode,requires:"pilot wave",effect(){tech.isInPilot=!0},remove(){tech.isInPilot=!1}},{name:"WIMPs",description:`at the exit to each <strong>level</strong> spawn ${powerUps.orb.research(7)}<br>and a dangerous particle that slowly <strong>chases</strong> you`,isFieldTech:!0,maxCount:9,count:0,frequency:2,frequencyDefault:2,allowed:()=>9===m.fieldMode||8===m.fieldMode,requires:"wormhole, pilot wave",effect(){tech.wimpCount++,spawn.WIMP();for(let e=0,o=7;e<o;e++)powerUps.spawn(level.exit.x+100*(Math.random()-.5),level.exit.y-100+100*(Math.random()-.5),"research",!1)},remove(){tech.wimpCount=0}},{name:"vacuum fluctuation",description:`<span style ="float: right;"><span class="underline">expend</span> ${powerUps.orb.research(2)}</span><strong>+11%</strong> chance to <strong class='color-dup'>duplicate</strong><br>spawned <strong>power ups</strong>`,isFieldTech:!0,maxCount:1,count:0,frequency:3,frequencyDefault:3,allowed:()=>(8===m.fieldMode||9===m.fieldMode)&&(build.isExperimentSelection||powerUps.research.count>2),requires:"wormhole, pilot wave",effect(){tech.fieldDuplicate=.11,powerUps.setPowerUpMode(),build.isExperimentSelection||simulation.isTextLogOpen||simulation.circleFlare(.11),powerUps.research.expend(2)},remove(){tech.fieldDuplicate=0,this.count&&(powerUps.setPowerUpMode(),powerUps.research.changeRerolls(2))}},{name:"anyon",descriptionFunction:()=>"<strong>+2%</strong> <strong class='color-dup'>duplication</strong> chance until you exit the <strong>level</strong><br>after a <strong class='color-block'>block</strong> falls into a <strong class='color-worm'>wormhole</strong> <em style =\"float: right;\">(up to 40%)</em>",isFieldTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>9===m.fieldMode,requires:"wormhole",effect(){tech.isBlockDup=!0,tech.blockDupCount=0},remove(){tech.isBlockDup=!1,tech.blockDupCount=0}},{name:"transdimensional worms",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Dimension\' class="link">transdimensional worms</a>',description:"after a <strong class='color-block'>block</strong> falls into a <strong class='color-worm'>wormhole</strong><br>spawn <strong>1-4</strong> <strong class='color-p' style='letter-spacing: 2px;'>worms</strong>",isFieldTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>9===m.fieldMode,requires:"wormhole",effect(){tech.isWormholeWorms=!0},remove(){tech.isWormholeWorms=!1}},{name:"Penrose process",descriptionFunction:()=>"<strong>2x</strong> stored <strong class='color-f'>energy</strong> after <strong class='color-dup'>duplicating</strong> power ups<br><strong>+6%</strong> chance to <strong class='color-dup'>duplicate</strong> spawned <strong>power ups</strong>",isFieldTech:!0,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>9===m.fieldMode||1===m.fieldMode,requires:"wormhole, standing wave",effect(){tech.isDupEnergy=!0,powerUps.setPowerUpMode(),build.isExperimentSelection||simulation.isTextLogOpen||simulation.circleFlare(.06)},remove(){tech.isDupEnergy=!1,this.count&&powerUps.setPowerUpMode()}},{name:"holographic principle",cost:2,descriptionFunction:()=>"making <strong class='color-worm'>wormholes</strong> costs <strong>2</strong> <strong class='color-f'>energy</strong><br><em style =\"float: right;\">(originally 16 energy)</em>",isFieldTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed(){return 9===m.fieldMode&&(build.isExperimentSelection||powerUps.research.count>this.cost-1)},requires:"wormhole",effect(){powerUps.research.expend(this.cost),tech.isFreeWormHole=!0},remove(){tech.isFreeWormHole=!1,this.count&&powerUps.research.changeRerolls(this.cost)}},{name:"manifold",descriptionFunction:()=>"after each new <strong class='color-worm'>wormhole</strong><br><strong>1.5x</strong> <strong class='color-d'>damage</strong> for <strong>5</strong> seconds",isFieldTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>9===m.fieldMode,requires:"wormhole",effect(){tech.isNewWormHoleDamage=!0},remove(){tech.isNewWormHoleDamage=!1}},{name:"geodesics",description:"your <strong>bullets</strong> can traverse <strong class='color-worm'>wormholes</strong><br><strong>1.5x</strong> <strong class='color-d'>damage</strong>",isFieldTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>9===m.fieldMode,requires:"wormhole",damage:1.5,effect(){m.damageDone*=this.damage,tech.isWormHoleBullets=!0},remove(){this.count&&m.alive&&(m.damageDone/=this.damage),tech.isWormHoleBullets=!1}},{name:"cosmic string",description:"after <strong>tunneling</strong> through mobs with a <strong class='color-worm'>wormhole</strong><br><strong>stun</strong> them and do <strong class='color-p'>radioactive</strong> <strong class='color-d'>damage</strong>",isFieldTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>9===m.fieldMode,requires:"wormhole",effect(){tech.isWormholeDamage=!0},remove(){tech.isWormholeDamage=!1}},{name:"invariant",cost:1,descriptionFunction(){return`<strong>pause</strong> time while<span style ="float: right;"><span class="underline">expend</span> ${powerUps.orb.research(this.cost)}</span><br>placing your <strong class='color-worm'>wormhole</strong>`},isFieldTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed(){return 9===m.fieldMode&&!tech.isNoDraftPause&&(build.isExperimentSelection||powerUps.research.count>this.cost-1)},requires:"wormhole, not eternalism",effect(){tech.isWormHolePause=!0,powerUps.research.expend(this.cost)},remove(){tech.isWormHolePause&&m.isTimeDilated&&m.wakeCheck(),tech.isWormHolePause=!1,this.count&&powerUps.research.changeRerolls(this.cost)}},{name:"affine connection",cost:2,descriptionFunction(){return`<span style ="float: right;"><span class="underline">expend</span> ${powerUps.orb.research(this.cost)}</span><strong class='color-worm'>wormholes</strong> can tunnel<br>through <strong>anything</strong>`},isFieldTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed(){return 9===m.fieldMode&&(build.isExperimentSelection||powerUps.research.count>this.cost-1)},requires:"wormhole",effect(){powerUps.research.expend(this.cost),tech.isWormholeMapIgnore=!0},remove(){tech.isWormholeMapIgnore=!1,this.count&&powerUps.research.changeRerolls(this.cost)}},{name:"CIWS",descriptionFunction:()=>`<strong>grappling hook</strong> uses <strong>10</strong> <strong class='color-f'>energy</strong><br> to fire ${b.guns[9].harpoonName()}<strong>s</strong> at nearby mobs`,isFieldTech:!0,maxCount:1,count:0,frequency:2,frequencyDefault:2,allowed:()=>10===m.fieldMode,requires:"grappling hook",effect(){tech.isHookDefense=!0},remove(){tech.isHookDefense=!1}},{name:"swarf",description:"after <strong>grappling hook</strong> impacts something<br>eject <strong>nails</strong> splinters towards nearby mobs",isFieldTech:!0,maxCount:3,count:0,frequency:2,frequencyDefault:2,allowed:()=>10===m.fieldMode&&!tech.isReel&&!tech.isTokamak,requires:"grappling hook, not reel, tokamak",effect(){tech.hookNails+=4},remove(){tech.hookNails=0}},{name:"reel",description:"<strong>5x</strong> <strong class='color-block'>block</strong> collision <strong class='color-d'>damage</strong><br>up to <strong>+100</strong> <strong class='color-f'>energy</strong> after reeling in <strong class='color-block'>blocks</strong>",isFieldTech:!0,maxCount:1,count:0,frequency:1,frequencyDefault:1,allowed:()=>10===m.fieldMode&&!tech.isTokamak&&.075===tech.blockDamage&&!tech.hookNails,requires:"grappling hook, not mass driver, swarf, tokamak",effect(){tech.blockDamage=.375,tech.isReel=!0},remove(){tech.blockDamage=.075,tech.isReel=!1}},{name:"swap meet",description:`normal ${powerUps.orb.tech()} become <strong class='color-junk'>JUNK</strong><br>and <strong class='color-junk'>JUNK</strong> become normal`,maxCount:1,count:0,frequency:0,isJunk:!0,isInstant:!0,allowed:()=>!0,requires:"",effect(){for(let e=0,o=tech.tech.length;e<o;e++)tech.tech[e].isJunk=!tech.tech[e].isJunk,tech.tech[e].isJunk,tech.tech[e].frequency>0?tech.tech[e].frequency=0:tech.tech[e].frequency=2},remove(){}},{name:"random",link:'<a target="_blank" href=\'https://en.wikipedia.org/wiki/Special:Random\' class="link">random</a>',delay:333,descriptionFunction(){const e=()=>{if(simulation.isChoosing&&m.alive&&!build.isExperimentSelection){const o=.01*Math.floor(27*Math.random());this.text=`<strong style = "font-family: 'Courier New', monospace;">+${(1+o).toFixed(2).padStart(2,"0")}x</strong> <strong class='color-d'>damage</strong>`,this.damage=1+o,document.getElementById(`damage-JUNK-id${this.id}`)&&(document.getElementById(`damage-JUNK-id${this.id}`).innerHTML=this.text),setTimeout(()=>{e()},333)}};return setTimeout(()=>{e()},333),this.id++,`<span id = "damage-JUNK-id${this.id}">${this.text}</span>`},maxCount:3,count:0,frequency:1,isJunk:!0,allowed:()=>!build.isExperimentSelection,requires:"NOT EXPERIMENT MODE",damage:0,effect(){m.damageDone*=this.damage},remove(){this.count&&m.alive&&(m.damageDone/=this.damage)}},{name:"boost",maxCount:1,count:0,frequency:0,isJunk:!0,isInstant:!0,allowed:()=>!build.isExperimentSelection,requires:"NOT EXPERIMENT MODE",effect(){powerUps.spawnDelay("boost",this.spawnCount)},remove(){},id:0,text:"",delay:100,spawnCount:0,descriptionFunction(){let e=9999*Math.random();const o=()=>{if(simulation.isChoosing&&m.alive&&!build.isExperimentSelection){e+=4.5;const t=2*Math.sin(.0133*e)+Math.sin(.013*e)+.5*Math.sin(.031*e)+.33*Math.sin(.03*e);this.spawnCount=Math.floor(100*Math.abs(t)),this.text=`spawn <strong style = "font-family: 'Courier New', monospace;">${this.spawnCount.toLocaleString(void 0,{minimumIntegerDigits:3})}</strong> ${powerUps.orb.boost(1)}<br>that give <strong>${(1+powerUps.boost.damage).toFixed(2)}x</strong> <strong class='color-d'>damage</strong> for <strong>${(powerUps.boost.duration/60).toFixed(0)}</strong> seconds</span>`,document.getElementById(`boost-JUNK-id${this.id}`)&&(document.getElementById(`boost-JUNK-id${this.id}`).innerHTML=this.text),setTimeout(()=>{o()},this.delay)}};return setTimeout(()=>{o()},this.delay),this.id++,`<span id = "boost-JUNK-id${this.id}">${this.text}</span>`}},{name:"placebo",description:"<strong>7.77x</strong> <strong class='color-d'>damage</strong>",maxCount:1,count:0,frequency:0,isJunk:!0,allowed:()=>!0,requires:"",effect(){Math.random()<.07&&(m.damageDone*=7.77)},remove(){}},{name:"universal healthcare",description:"make your <strong class='color-d'>damage</strong> negative",maxCount:1,count:0,frequency:0,isJunk:!0,allowed:()=>!0,requires:"",effect(){m.damageDone*=-1},remove(){}},{name:"defunct",description:"build <strong>100</strong> scrap <strong class='color-bot'>bots</strong><br><strong class='color-bot'>bots</strong> break after about <strong>30</strong> seconds",maxCount:1,count:0,frequency:0,isJunk:!0,allowed:()=>!0,requires:"",effect(){for(let e=0;e<100;e++)b.randomBot(m.pos,!1),bullet[bullet.length-1].endCycle=simulation.cycle+800+1e3*Math.random()},remove(){}},{name:"return",description:"return to the start of the game",maxCount:1,count:0,frequency:0,isJunk:!0,isInstant:!0,allowed:()=>!0,requires:"",effect(){level.onLevel=0,simulation.clearNow=!0},remove(){}},{name:"panpsychism",description:"awaken all <strong class='color-block'>blocks</strong><br><strong class='color-block'>blocks</strong> have a chance to spawn power ups",maxCount:1,count:0,frequency:0,isJunk:!0,isInstant:!0,allowed:()=>!0,requires:"",effect(){setInterval(()=>{for(let e=body.length-1;e>-1;e--)body[e].isNotHoldable||(Matter.Composite.remove(engine.world,body[e]),spawn.blockMob(body[e].position.x,body[e].position.y,body[e],0),body[e].isAboutToBeRemoved||(mob[mob.length-1].isDropPowerUp=!0),body.splice(e,1))},6e3)},remove(){}},{name:"meteor shower",description:"take a shower, but meteors instead of water",maxCount:1,count:0,frequency:0,isJunk:!0,isInstant:!0,allowed:()=>!0,requires:"",effect(){setInterval(()=>{fireBlock=function(e,o){const t=body.length;spawn.bodyRect(e,o,20+50*Math.random(),20+50*Math.random());const n=body[t];Matter.Body.setVelocity(n,{x:5*(Math.random()-.5),y:10*(Math.random()-.5)}),n.isAboutToBeRemoved=!0,setTimeout(()=>{for(let e=0;e<body.length;e++)body[e]===n&&(Matter.Composite.remove(engine.world,body[e]),body.splice(e,1))},4e3+Math.floor(9e3*Math.random()))},fireBlock(player.position.x+600*(Math.random()-.5),player.position.y-500-500*Math.random())},1e3)},remove(){}},{name:"reinforcement learning",description:`<strong>10x</strong> <em class='flicker'>frequency</em> for current ${powerUps.orb.tech()}`,maxCount:1,count:0,frequency:1,isJunk:!0,allowed:()=>tech.totalCount>9,requires:"at least 10 tech",effect(){for(let e=0,o=tech.tech.length;e<o;e++)tech.tech[e].count>0&&(tech.tech[e].frequency*=10)},remove(){if(this.count)for(let e=0,o=tech.tech.length;e<o;e++)tech.tech[e].count>0&&tech.tech[e].frequency>1&&(tech.tech[e].frequency/=10)}},{name:"closed timelike curve",description:`spawn ${powerUps.orb.field()}${powerUps.orb.field()}${powerUps.orb.field()}${powerUps.orb.field()}${powerUps.orb.field()}, but every 12 seconds<br>teleport a second into your future or past`,maxCount:1,count:0,frequency:0,isJunk:!0,isInstant:!0,allowed:()=>!0,requires:"",effect(){for(let e=0;e<5;e++)powerUps.spawn(m.pos.x+10*Math.random(),m.pos.y+10*Math.random(),"field");requestAnimationFrame(function e(){!simulation.paused&&m.alive&&(simulation.cycle%720||requestAnimationFrame(()=>{simulation.cycle%1440>720?(m.rewind(60),m.energy+=.4*level.isReducedRegen):simulation.timePlayerSkip(60)})),requestAnimationFrame(e)})},remove(){}},{name:"discount",description:`get 3 random <strong class='color-junk'>JUNK</strong>${powerUps.orb.tech()} for the price of 1!`,maxCount:1,count:0,frequency:0,isJunk:!0,isInstant:!0,allowed:()=>!0,requires:"",effect(){for(let e=0;e<3;e++){const e=[];for(let o=0;o<tech.tech.length;o++)tech.tech[o].isJunk&&e.push(tech.tech[o].name);let o=e[Math.floor(Math.random()*e.length)];simulation.inGameConsole(`<span class='color-var'>tech</span>.giveTech("<span class='color-text'>${o}</span>")`),tech.giveTech(o)}},remove(){}},{name:"Higgs phase transition",description:`instantly spawn ${powerUps.orb.tech()}${powerUps.orb.tech()}${powerUps.orb.tech()}${powerUps.orb.tech()}${powerUps.orb.tech()}, but add a chance to<br>remove everything with a 5 minute <strong>half-life</strong>`,maxCount:1,count:0,frequency:0,frequencyDefault:0,isJunk:!0,isInstant:!0,allowed:()=>!0,requires:"",effect(){powerUps.spawn(m.pos.x,m.pos.y,"tech"),powerUps.spawn(m.pos.x+30,m.pos.y,"tech"),powerUps.spawn(m.pos.x+60,m.pos.y,"tech"),powerUps.spawn(m.pos.x,m.pos.y-30,"tech"),powerUps.spawn(m.pos.x+30,m.pos.y-60,"tech"),requestAnimationFrame(function e(){if(!simulation.paused&&m.alive&&Math.random()<38e-6)return simulation.clearMap(),void simulation.draw.setPaths();requestAnimationFrame(e)})},remove(){}},{name:"harvest",description:"convert all the mobs on this level into <strong class='color-ammo'>ammo</strong>",maxCount:1,count:0,frequency:0,frequencyDefault:0,isJunk:!0,isInstant:!0,allowed:()=>!0,requires:"",effect(){for(let e=0,o=mob.length;e<o;e++)mob[e].isDropPowerUp&&(powerUps.spawn(mob[e].position.x,mob[e].position.y,"ammo"),mob[e].death())},remove(){}},{name:"brainstorm",description:`${powerUps.orb.tech()} <strong class='color-choice'><span>ch</span><span>oi</span><span>ces</span></strong> <strong>randomize</strong><br>every <strong>0.5</strong> seconds for <strong>10</strong> seconds`,maxCount:1,count:0,frequency:0,frequencyDefault:0,isJunk:!0,allowed:()=>!0,requires:"",effect(){tech.isBrainstorm=!0,tech.isBrainstormActive=!1,tech.brainStormDelay=500},remove(){tech.isBrainstorm=!1,tech.isBrainstormActive=!1}},{name:"eternalism",description:`<strong>1.3x</strong> <strong class='color-d'>damage</strong>, but <strong>time</strong> doesn't <strong>pause</strong><br>while <strong class='color-choice'><span>ch</span><span>oos</span><span>ing</span></strong> ${powerUps.orb.field()}, ${powerUps.orb.tech()}, or ${powerUps.orb.gun()}`,maxCount:1,count:0,frequency:0,frequencyDefault:0,isJunk:!0,allowed:()=>!(tech.isPauseSwitchField||tech.isPauseEjectTech||tech.isWormHolePause||document.fullscreenElement),requires:"not unified field theory, paradigm shift, invariant, fullscreen",damage:1.3,effect(){m.damageDone*=this.damage,tech.isNoDraftPause=!0},remove(){this.count&&m.alive&&(m.damageDone/=this.damage),tech.isNoDraftPause=!1}},{name:"catabolysis",description:"set your maximum <strong class='color-h'>health</strong> to <strong>1</strong><br><strong>double</strong> your current <strong class='color-ammo'>ammo</strong> <strong>10</strong> times",maxCount:1,count:0,frequency:0,isInstant:!0,isJunk:!0,allowed:()=>!tech.isFallingDamage&&!tech.isOverHeal&&!tech.isEnergyHealth,requires:"not quenching, tungsten carbide, mass-energy",effect(){m.baseHealth=.01,m.setMaxHealth();for(let e=0;e<b.guns.length;e++)b.guns[e].ammo=b.guns[e].ammo*Math.pow(2,10);simulation.updateGunHUD()},remove(){}},{name:"palantír",description:"see far away lands",maxCount:1,count:0,frequency:0,isJunk:!0,allowed:()=>!0,requires:"",effect(){m.look=()=>{m.angle=Math.atan2(simulation.mouseInGame.y-m.pos.y,simulation.mouseInGame.x-m.pos.x);m.transSmoothX=canvas.width2-m.pos.x-2*(simulation.mouse.x-canvas.width2),m.transSmoothY=canvas.height2-m.pos.y-2*(simulation.mouse.y-canvas.height2),m.transX+=(m.transSmoothX-m.transX)*m.lookSmoothing,m.transY+=(m.transSmoothY-m.transY)*m.lookSmoothing}},remove(){this.count&&(m.look=m.lookDefault)}},{name:"motion sickness",description:"disable camera smoothing",maxCount:1,count:0,frequency:0,isJunk:!0,allowed:()=>!0,requires:"",effect(){m.look=()=>{m.angle=Math.atan2(simulation.mouseInGame.y-m.pos.y,simulation.mouseInGame.x-m.pos.x);const e=1.2;m.transSmoothX=canvas.width2-m.pos.x-(simulation.mouse.x-canvas.width2)*e,m.transSmoothY=canvas.height2-m.pos.y-(simulation.mouse.y-canvas.height2)*e,m.transX=canvas.width2-m.pos.x-(simulation.mouse.x-canvas.width2)*e,m.transY=canvas.height2-m.pos.y-(simulation.mouse.y-canvas.height2)*e}},remove(){this.count&&(m.look=m.lookDefault)}},{name:"negative friction",description:"when you touch walls you speed up instead of slowing down. It's kinda fun.",maxCount:1,count:0,frequency:0,isJunk:!0,allowed:()=>!0,requires:"",effect(){player.friction=-.4},remove(){this.count&&(player.friction=.002)}},{name:"bounce",description:"you bounce off things.  It's annoying, but not that bad.",maxCount:1,count:0,frequency:0,isJunk:!0,allowed:()=>!0,requires:"",effect(){player.restitution=.9},remove(){this.count&&(player.restitution=0)}},{name:"mouth",description:"mobs have a non functional mouth",maxCount:1,count:0,frequency:0,isJunk:!0,allowed:()=>!0,requires:"",effect(){mobs.draw=()=>{ctx.lineWidth=2;let e=mob.length;for(;e--;){ctx.beginPath();const o=mob[e].vertices;ctx.moveTo(o[0].x,o[0].y);for(let e=1,t=o.length;e<t;++e)ctx.lineTo(o[e].x,o[e].y);ctx.quadraticCurveTo(mob[e].position.x,mob[e].position.y,o[0].x,o[0].y),ctx.fillStyle=mob[e].fill,ctx.strokeStyle=mob[e].stroke,ctx.fill(),ctx.stroke()}}},remove(){mobs.draw=mobs.drawDefault}},{name:"all-stars",description:"make all mobs look like stars",maxCount:1,count:0,frequency:0,isJunk:!0,allowed:()=>!0,requires:"",effect(){mobs.draw=()=>{ctx.lineWidth=2;let e=mob.length;for(;e--;){ctx.beginPath();const o=mob[e].vertices;ctx.moveTo(o[0].x,o[0].y);for(let t=1,n=o.length;t<n;++t)ctx.quadraticCurveTo(mob[e].position.x,mob[e].position.y,o[t].x,o[t].y);ctx.quadraticCurveTo(mob[e].position.x,mob[e].position.y,o[0].x,o[0].y),ctx.fillStyle=mob[e].fill,ctx.strokeStyle=mob[e].stroke,ctx.fill(),ctx.stroke()}}},remove(){mobs.draw=mobs.drawDefault}},{name:"true colors",description:"set all power ups to their real world colors",maxCount:1,count:0,frequency:0,isJunk:!0,isInstant:!0,allowed:()=>!0,requires:"",effect(){const e=[powerUps.research.color,powerUps.heal.color,powerUps.ammo.color,powerUps.ammo.color,powerUps.field.color,powerUps.gun.color];e.sort(()=>Math.random()-.5),powerUps.research.color=e[0],powerUps.heal.color=e[1],powerUps.ammo.color=e[2],powerUps.field.color=e[3],powerUps.tech.color=e[4],powerUps.gun.color=e[5];for(let o=0;o<powerUp.length;o++)switch(powerUp[o].name){case"research":powerUp[o].color=e[0];break;case"heal":powerUp[o].color=e[1];break;case"ammo":powerUp[o].color=e[2];break;case"field":powerUp[o].color=e[3];break;case"tech":powerUp[o].color=e[4];break;case"gun":powerUp[o].color=e[5]}},remove(){}},{name:"emergency broadcasting",description:"emit 2 sine waveforms at 853 Hz and 960 Hz<br><em>lower your volume</em>",maxCount:1,count:0,frequency:0,isJunk:!0,isInstant:!0,allowed:()=>!0,requires:"",effect:()=>{let e=function(){const e=new(window.AudioContext||window.webkitAudioContext),o=e.createOscillator(),t=e.createGain();t.gain.value=.3,o.connect(t),t.connect(e.destination),o.type="sine",o.frequency.value=850,o.start();const n=e.createOscillator(),s=e.createGain();return s.gain.value=.3,n.connect(s),s.connect(e.destination),n.type="sine",n.frequency.value=957,n.start(),e}();delay=1e3,setTimeout(()=>{e.suspend(),powerUps.spawn(m.pos.x+160*(Math.random()-.5),m.pos.y+160*(Math.random()-.5),"heal"),setTimeout(()=>{e.resume(),setTimeout(()=>{e.suspend(),powerUps.spawn(m.pos.x+160*(Math.random()-.5),m.pos.y+160*(Math.random()-.5),"heal"),setTimeout(()=>{e.resume(),setTimeout(()=>{e.suspend(),powerUps.spawn(m.pos.x+160*(Math.random()-.5),m.pos.y+160*(Math.random()-.5),"heal"),setTimeout(()=>{e.resume(),setTimeout(()=>{e.suspend(),powerUps.spawn(m.pos.x+160*(Math.random()-.5),m.pos.y+160*(Math.random()-.5),"heal"),setTimeout(()=>{e.resume(),setTimeout(()=>{e.suspend(),powerUps.spawn(m.pos.x+160*(Math.random()-.5),m.pos.y+160*(Math.random()-.5),"heal"),setTimeout(()=>{e.resume(),setTimeout(()=>{e.suspend(),e.close(),powerUps.spawn(m.pos.x+160*(Math.random()-.5),m.pos.y+160*(Math.random()-.5),"heal")},delay)},delay)},delay)},delay)},delay)},delay)},delay)},delay)},delay)},delay)},delay)},remove(){}},{name:"automatic",description:"you can't fire when moving<br>always <strong>fire</strong> when at <strong>rest</strong>",maxCount:1,count:0,frequency:0,isJunk:!0,allowed:()=>!tech.isFireMoveLock,requires:"not Higgs mechanism",effect(){tech.isAlwaysFire=!0,b.setFireMethod()},remove(){tech.isAlwaysFire&&(tech.isAlwaysFire=!1,b.setFireMethod())}},{name:"hidden variable",descriptionFunction:()=>`spawn ${powerUps.orb.heal(20)}<br>but hide your <strong class='color-h'>health</strong> bar`,maxCount:1,count:0,frequency:0,isInstant:!0,isJunk:!0,allowed:()=>!0,requires:"",effect(){document.getElementById("health").style.display="none",document.getElementById("health-bg").style.display="none",document.getElementById("defense-bar").style.display="none";for(let e=0;e<20;e++)powerUps.spawn(m.pos.x+160*(Math.random()-.5),m.pos.y+160*(Math.random()-.5),"heal")},remove(){}},{name:"not a bug",description:"initiate a totally safe game crash for 10 seconds",maxCount:1,count:0,frequency:0,isInstant:!0,isJunk:!0,allowed:()=>!0,requires:"",effect(){const e=simulation.drawCircle;simulation.drawCircle=()=>{mob[1/0].position},setTimeout(()=>{simulation.drawCircle=e,canvas.width=canvas.width,powerUps.spawn(m.pos.x,m.pos.y,"tech")},1e4)},remove(){}},{name:"what the block?",description:"throwing a <strong class='color-block'>block</strong> throws <strong>you</strong> instead",maxCount:1,count:0,frequency:0,isInstant:!0,isJunk:!0,allowed:()=>8!==m.fieldMode&&9!==m.fieldMode&&!tech.isTokamak,requires:"not pilot wave, tokamak, wormhole",effect(){m.throwBlock=m.throwSelf},remove(){m.throwBlock=m.throwBlockDefault}},{name:"stationary",description:"thrown <strong class='color-block'>blocks</strong> can't move,<br>but somehow they still have momentum...",maxCount:1,count:0,frequency:0,isJunk:!0,allowed:()=>8!==m.fieldMode&&9!==m.fieldMode&&!tech.isTokamak,requires:"not pilot wave, tokamak, wormhole",effect(){tech.isStaticBlock=!0},remove(){tech.isStaticBlock=!1}},{name:"spinor",description:"the direction you aim is determined by your position",maxCount:1,count:0,frequency:0,isInstant:!0,isJunk:!0,allowed:()=>!m.isShipMode,requires:"",effect(){m.look=function(){m.angle=((m.pos.x+m.pos.y)/100+Math.PI)%Math.PI*2-Math.PI;m.transSmoothX=canvas.width2-m.pos.x-.8*(simulation.mouse.x-canvas.width2),m.transSmoothY=canvas.height2-m.pos.y-.8*(simulation.mouse.y-canvas.height2),m.transX+=.07*(m.transSmoothX-m.transX),m.transY+=.07*(m.transSmoothY-m.transY)}},remove(){this.count&&(m.look=m.lookDefault)}},{name:"p-zombie",description:"set your <strong class='color-h'>health</strong> to <strong>1</strong><br>all mobs, not bosses, die and <strong>resurrect</strong> as zombies",maxCount:1,count:0,frequency:0,isInstant:!0,isJunk:!0,allowed:()=>!0,requires:"",effect(){m.health=.01,m.displayHealth();for(let e=mob.length-1;e>-1;e--)mob[e].isDropPowerUp&&!mob[e].isBoss&&mob[e].alive&&(mob[e].isSoonZombie=!0,mob[e].death())},remove(){}},{name:"decomposers",description:"after they die <strong>mobs</strong> leave behind <strong>spawns</strong>",maxCount:1,count:0,frequency:0,isInstant:!0,isJunk:!0,allowed:()=>0===tech.deathSpawns,requires:"",effect(){tech.deathSpawns=.2},remove(){tech.deathSpawns=0}},{name:"panopticon",description:"<strong>mobs</strong> can always see you",maxCount:1,count:0,frequency:0,isInstant:!0,isJunk:!0,allowed:()=>!0,requires:"",effect(){setInterval(()=>{for(let e=0;e<mob.length;e++)!mob[e].shield&&mob[e].isDropPowerUp&&(mob[e].locatePlayer(),mob[e].seePlayer.yes=!0)},1e3)},remove(){}},{name:"Fourier analysis",description:"your aiming is now controlled by this equation:<br><span style = 'font-size:80%;'>2sin(0.0133t) + sin(0.013t) + 0.5sin(0.031t)+ 0.33sin(0.03t)</span>",maxCount:1,count:0,frequency:0,isJunk:!0,allowed:()=>!m.isShipMode,requires:"not ship",effect(){m.look=()=>{m.angle=2*Math.sin(.0133*m.cycle)+Math.sin(.013*m.cycle)+.5*Math.sin(.031*m.cycle)+.33*Math.sin(.03*m.cycle);simulation.mouse.y,m.transSmoothX=canvas.width2-m.pos.x-.8*(simulation.mouse.x-canvas.width2),m.transSmoothY=canvas.height2-m.pos.y-.8*(simulation.mouse.y-canvas.height2),m.transX+=.07*(m.transSmoothX-m.transX),m.transY+=.07*(m.transSmoothY-m.transY)}},remove(){this.count&&(m.look=m.lookDefault)}},{name:"disintegrated armament",description:`spawn ${powerUps.orb.gun()}<br><strong>remove</strong> your active ${powerUps.orb.gun()}`,maxCount:1,count:0,frequency:0,isInstant:!0,isJunk:!0,allowed:()=>b.inventory.length>0,requires:"at least 1 gun",effect(){b.inventory.length>0&&b.removeGun(b.guns[b.activeGun].name),simulation.makeGunHUD(),powerUps.spawn(m.pos.x+60*(Math.random()-.5),m.pos.y+60*(Math.random()-.5),"gun")},remove(){}},{name:"probability",description:`<strong>100x</strong> <em class='flicker'>frequency</em> for<br>a random ${powerUps.orb.tech()}`,maxCount:1,count:0,frequency:0,isInstant:!0,isJunk:!0,allowed:()=>!0,requires:"",effect(){let e=[];for(let o=0,t=tech.tech.length;o<t;o++)tech.tech[o].count<tech.tech[o].maxCount&&tech.tech[o].allowed()&&!tech.tech[o].isJunk&&!tech.tech.isLore&&e.push(o);if(e.length){const o=e[Math.floor(Math.random()*e.length)];tech.tech[o].frequency=100}},remove(){}},{name:"encryption",description:"secure information",maxCount:1,count:0,frequency:0,isInstant:!0,isJunk:!0,allowed:()=>!0,requires:"",effect(){String.prototype.shuf=function(){for(var e=this.split(""),o=e.length-1;o>0;o--){var t=Math.floor(Math.random()*(o+1)),n=e[o];e[o]=e[t],e[t]=n}return e.join("")};for(let e=0,o=tech.tech.length;e<o;e++)tech.tech[e].name=tech.tech[e].name.shuf()},remove(){}},{name:"quantum leap",description:"become an <strong class='alt'>alternate</strong> version of yourself<br>every <strong>20</strong> seconds",maxCount:1,count:0,frequency:0,isInstant:!0,isJunk:!0,allowed:()=>!0,requires:"",effect(){setInterval(()=>{const e={x:1,y:0};for(let o=0;o<5;o++){const o=Vector.add(m.pos,Vector.mult(Vector.rotate(e,2*Math.random()*Math.PI),2e3+2e3*Math.random()));spawn.sucker(o.x,o.y,140);mob[mob.length-1].locatePlayer()}m.switchWorlds(),simulation.trails()},2e4)},remove(){}},{name:"score",description:"Add a score to n-gon!",maxCount:1,count:0,frequency:0,isInstant:!0,isJunk:!0,allowed:()=>!0,requires:"",effect(){setInterval(()=>{let e=Math.ceil(1e3*Math.random()*Math.random()*Math.random()*Math.random()*Math.random());simulation.inGameConsole(`simulation.score <span class='color-symbol'>=</span> ${e.toFixed(0)}`)},1e4)},remove(){}},{name:"aerodynamics",description:"reduce air friction for all power ups",maxCount:1,count:0,frequency:0,isInstant:!0,isJunk:!0,allowed:()=>!0,requires:"",effect(){const e=document.createElement("style");document.head.appendChild(e);e.sheet.insertRule(".choose-grid-no-images {border-radius: 50%;}",0)},remove(){}},{name:"pop-ups",description:"sign up to learn endless easy ways to win n-gon<br>that Landgreen doesn't want you to know!!!1!!",maxCount:1,count:0,frequency:0,isInstant:!0,isJunk:!0,allowed:()=>!0,requires:"",effect(){setInterval(()=>{alert(`The best combo is ${tech.tech[Math.floor(Math.random()*tech.tech.length)].name} with ${tech.tech[Math.floor(Math.random()*tech.tech.length)].name}!`)},3e4)},remove(){}},{name:"music",description:"add music to n-gon",maxCount:1,count:0,frequency:0,isInstant:!0,isJunk:!0,allowed:()=>!0,requires:"",effect(){window.open("https://www.youtube.com/watch?v=lEbHeSdmS-k&list=PL9Z5wjoBiPKEDhwCW2RN-VZoCpmhIojdn","_blank")},remove(){}},{name:"performance",description:"display performance stats to n-gon",maxCount:1,count:0,frequency:0,isInstant:!0,isJunk:!0,allowed:()=>!0,requires:"",effect(){var e;(e=document.createElement("script")).onload=function(){var e=new Stats;document.body.appendChild(e.dom),requestAnimationFrame(function o(){e.update(),requestAnimationFrame(o)})},e.src="https://unpkg.com/stats.js@0.17.0/build/stats.min.js",document.head.appendChild(e),document.getElementById("health").style.left="86px",document.getElementById("health-bg").style.left="86px",document.getElementById("defense-bar").style.left="86px",document.getElementById("damage-bar").style.left="86px"},remove(){}},{name:"repartitioning",description:`set the <strong class='color-junk'>JUNK</strong> chance to <strong>100%</strong><br>spawn ${powerUps.orb.tech()}${powerUps.orb.tech()}${powerUps.orb.tech()}${powerUps.orb.tech()}${powerUps.orb.tech()}`,maxCount:1,count:0,frequency:0,isInstant:!0,isJunk:!0,allowed:()=>!0,requires:"",effect(){tech.addJunkTechToPool(1);for(let e=0;e<5;e++)powerUps.spawn(m.pos.x,m.pos.y,"tech")},remove(){}},{name:"defragment",description:"set the <em class='flicker'>frequency</em> of finding <strong class='color-junk'>JUNK</strong> to zero",maxCount:1,count:0,frequency:0,isInstant:!0,isJunk:!0,allowed:()=>!0,requires:"",effect(){tech.junkChance=0},remove(){}},{name:"pitch",description:"oscillate the pitch of your world",maxCount:1,count:0,frequency:0,isInstant:!0,isJunk:!0,allowed:()=>!0,requires:"",effect(){setInterval(()=>{simulation.paused||ctx.rotate(.001*Math.sin(.01*simulation.cycle))},16)},remove(){}},{name:"grayscale",description:"make everything grayscale",maxCount:1,count:0,frequency:0,isInstant:!0,isJunk:!0,allowed:()=>!0,requires:"",effect(){document.documentElement.style.filter="grayscale(1)"},remove(){}},{name:"blur",description:"make everything blurry",maxCount:1,count:0,frequency:0,isInstant:!0,isJunk:!0,allowed:()=>!0,requires:"",effect(){simulation.ephemera.push({do(){simulation.cycle%180||(document.documentElement.style.filter=`blur(${Math.floor(4*Math.random())}px)`)}})},remove(){}},{name:"hue-rotate",description:"cycle colors around the color circle",maxCount:1,count:0,frequency:0,isInstant:!0,isJunk:!0,allowed:()=>!0,requires:"",effect(){simulation.ephemera.push({count:0,do(){document.documentElement.style.filter=`hue-rotate(${simulation.cycle}deg)`}})},remove(){}},{name:"brightness",description:"increase and decrease brightness",maxCount:1,count:0,frequency:0,isInstant:!0,isJunk:!0,allowed:()=>!0,requires:"",effect(){simulation.ephemera.push({count:0,do(){document.documentElement.style.filter=`brightness(${1+.5*Math.sin(.03*simulation.cycle)})`}})},remove(){}},{name:"umbra",description:"produce a blue glow around everything<br>and probably some simulation lag",maxCount:1,count:0,frequency:0,isInstant:!0,isJunk:!0,allowed:()=>!0,requires:"",effect(){ctx.shadowColor="#06f",ctx.shadowBlur=25},remove(){}},{name:"lighter",description:'ctx.globalCompositeOperation = "lighter"',maxCount:1,count:0,frequency:0,isInstant:!0,isJunk:!0,allowed:()=>!0,requires:"",effect(){ctx.globalCompositeOperation="lighter"},remove(){}},{name:"the upside down",description:"Flip the universe until the end of the level.<br>I'll give you 1.1x <strong class='color-d'>damage</strong> as well.",maxCount:1,count:0,frequency:0,isInstant:!0,isJunk:!0,allowed:()=>!0,requires:"",effect(){simulation.flipCameraVertical(900),m.damageDone*=1.1},remove(){}},{name:"rewind",description:"every 10 seconds <strong>rewind</strong> <strong>2</strong> seconds",maxCount:9,count:0,frequency:0,isInstant:!0,isJunk:!0,allowed:()=>!0,requires:"",effect(){setInterval(()=>{m.rewind(120),m.energy+=.4*level.isReducedRegen},1e4)},remove(){}},{name:"undo",description:"every 4 seconds <strong>rewind</strong> <strong>1/2</strong> a second",maxCount:9,count:0,frequency:0,isInstant:!0,isJunk:!0,allowed:()=>!0,requires:"",effect(){setInterval(()=>{m.rewind(30),m.energy+=.2*level.isReducedRegen},4e3)},remove(){}},{name:"energy to mass conversion",description:"convert your <strong class='color-f'>energy</strong> into <strong class='color-block'>blocks</strong>",maxCount:9,count:0,frequency:0,isInstant:!0,isJunk:!0,allowed:()=>!0,requires:"",effect(){for(let e=0,o=40;e<o;e++)setTimeout(()=>{m.energy-=1/o,where=Vector.add(m.pos,{x:400*(Math.random()-.5),y:400*(Math.random()-.5)}),spawn.bodyRect(where.x,where.y,Math.floor(15+100*Math.random()),Math.floor(15+100*Math.random()))},100*e)},remove(){}},{name:"level.nextLevel()",description:"advance to the next level",maxCount:9,count:0,frequency:0,isInstant:!0,isJunk:!0,allowed:()=>!0,requires:"",effect(){level.nextLevel()},remove(){}},{name:"reincarnation",description:"kill all mobs and spawn new ones<br>(also spawn a few extra mobs for fun)",maxCount:3,count:0,frequency:0,isInstant:!0,isJunk:!0,allowed:()=>!0,requires:"",effect(){for(let e=0,o=mob.length;e<o;e++)!mob[e].alive||mob[e].shield||mob[e].isBadTarget||(spawn.randomMobByLevelsCleared(mob[e].position.x,mob[e].position.y),Math.random()<.5&&spawn.randomMobByLevelsCleared(mob[e].position.x,mob[e].position.y),mob[e].death())},remove(){}},{name:"expert system",description:`spawn ${powerUps.orb.tech()}<br><strong>+50%</strong> chance for <strong class='color-junk'>JUNK</strong> <strong class='color-choice'><span>ch</span><span>oi</span><span>ces</span></strong>`,maxCount:9,count:0,frequency:0,isInstant:!0,isJunk:!0,allowed:()=>tech.junkChance<1,requires:"",effect(){powerUps.spawn(m.pos.x,m.pos.y,"tech"),tech.addJunkTechToPool(.5)},remove(){}},{name:"energy investment",description:"every 10 seconds drain your <strong class='color-f'>energy</strong><br>return it doubled 5 seconds later",maxCount:9,count:0,frequency:0,isInstant:!0,isJunk:!0,allowed:()=>!0,requires:"",effect(){setInterval(()=>{if(!simulation.paused){const e=m.energy;m.energy=0,setTimeout(()=>{m.energy+=2*e},5e3)}},1e4)},remove(){}},{name:"missile launching system",description:"fire missiles for the next 120 seconds",maxCount:9,count:0,frequency:0,isInstant:!0,isJunk:!0,allowed:()=>!0,requires:"",effect(){for(let e=0;e<120;e++)setTimeout(()=>{const e={x:m.pos.x,y:m.pos.y-40};b.missile(e,-Math.PI/2+.2*(Math.random()-.5)*Math.sqrt(tech.missileCount),-2)},1e3*e)},remove(){}},{name:"grenade production",description:"drop a grenade every 2 seconds",maxCount:9,count:0,frequency:0,isInstant:!0,isJunk:!0,allowed:()=>!0,requires:"",effect(){setInterval(()=>{if(!simulation.paused&&"hidden"!==document.visibilityState){b.grenade(Vector.add(m.pos,{x:10*(Math.random()-.5),y:10*(Math.random()-.5)}),-Math.PI/2);const e=bullet[bullet.length-1];Matter.Body.setVelocity(e,{x:.1*e.velocity.x,y:.1*e.velocity.y})}},2e3)},remove(){}},{name:"wall jump",description:"no knees or toes are drawn on the player<br>you can wall climb though",maxCount:1,count:0,frequency:0,isJunk:!0,isInstant:!0,allowed:()=>!m.isShipMode,requires:"",effect(){m.skin.stubs(),jumpSensor.vertices[0].x+=-22,jumpSensor.vertices[3].x+=-22,jumpSensor.vertices[1].x+=22,jumpSensor.vertices[2].x+=22},remove(){}},{name:"Sleipnir",description:"grow more legs",maxCount:1,count:0,frequency:0,isJunk:!0,allowed:()=>!m.isShipMode,requires:"",effect(){m.skin.Sleipnir()},remove(){this.count&&m.resetSkin()}},{name:"diegesis",description:"indicate fire cooldown</strong><br>through a rotation of your head",maxCount:1,count:0,frequency:0,isJunk:!0,allowed:()=>!m.isShipMode,requires:"",effect(){m.skin.diegesis()},remove(){this.count&&m.resetSkin()}},{name:"🐱",description:"🐈",maxCount:1,count:0,frequency:0,isJunk:!0,allowed:()=>!m.isShipMode,requires:"",effect(){m.skin.cat()},remove(){this.count&&m.resetSkin()}},{name:"n-gone",description:"become invisible to yourself<br><em>mobs can still see you</em>",maxCount:1,count:0,frequency:0,isJunk:!0,allowed:()=>!0,requires:"",effect(){m.draw=()=>{}},remove(){this.count&&m.resetSkin()}},{name:"pareidolia",description:"don't",maxCount:1,count:0,frequency:0,isInstant:!0,isJunk:!0,allowed:()=>!m.isShipMode,requires:"",effect(){m.skin.pareidolia()},remove(){this.count&&m.resetSkin()}},{name:"posture",description:"stand a bit taller",maxCount:1,count:0,frequency:0,isJunk:!0,allowed:()=>!m.isShipMode,requires:"",effect(){m.yOffWhen.stand=70},remove(){m.yOffWhen.stand=49}},{name:"rhythm",description:"you oscillate up and down<br>also you look like an egg",maxCount:1,count:0,frequency:0,isJunk:!0,isInstant:!0,allowed:()=>!m.isShipMode,requires:"",effect(){m.skin.egg(),setInterval(()=>{m.yOffWhen.stand=53+28*Math.sin(.2*simulation.cycle),m.onGround&&!m.crouch&&(m.yOffGoal=m.yOffWhen.stand)},100)},remove(){}},{name:"prism",description:"you cycle through different <strong>colors</strong>",maxCount:1,count:0,frequency:0,isInstant:!0,isJunk:!0,allowed:()=>!0,requires:"",effect(){m.color={hue:0,sat:100,light:50},setInterval(function(){m.color.hue++,m.setFillColors()},10)},remove(){}},{name:"ship",description:"fly around with no legs",maxCount:1,count:0,frequency:0,isInstant:!0,isJunk:!0,allowed:()=>!m.isShipMode&&!m.isAltSkin&&"negative mass"!==m.fieldUpgrades[m.fieldMode].name,requires:"",effect(){m.isAltSkin=!0,m.shipMode();for(let e=0;e<tech.tech.length;e++)"relativistic rotation"===tech.tech[e].name&&(tech.tech[e].frequency=10)},remove(){}},{name:"circular symmetry",description:"turning the ship rotates the universe instead<br><strong>2x</strong> <strong class='color-d'>damage</strong>",maxCount:1,count:0,frequency:0,isInstant:!0,isJunk:!0,allowed:()=>m.isShipMode,requires:"",effect(){m.damageDone*=3,m.look=()=>{m.transSmoothX=canvas.width2-m.pos.x,m.transSmoothY=canvas.height2-m.pos.y,m.transX+=(m.transSmoothX-m.transX)*m.lookSmoothing,m.transY+=(m.transSmoothY-m.transY)*m.lookSmoothing,ctx.restore(),ctx.save(),ctx.translate(canvas.width2,canvas.height2),ctx.rotate(-m.angle),ctx.translate(-canvas.width2,-canvas.height2)}},remove(){}},{name:"pet bots",description:"pet your <strong class='color-bot'>bots</strong>",maxCount:1,count:0,frequency:0,isJunk:!0,isInstant:!0,allowed:()=>b.totalBots(),requires:"",effect(){simulation.ephemera.push({count:0,do(){if(this.count++,!(this.count%420))for(let e=0;e<bullet.length&&!(bullet[e].botType&&Math.random()<.3&&(simulation.inGameConsole(`${bullet[e].botType}<span class='color-symbol'>-</span>bot.pet<span class='color-symbol'>()</span>`),m.onGround&&!m.crouch&&(m.yOffGoal=m.yOffWhen.crouch,setTimeout(()=>{m.crouch||(m.yOffGoal=m.yOffWhen.stand)},1e3),m.immuneCycle<m.cycle+90&&(m.immuneCycle=m.cycle+90)),Math.random()<.3));e++);}})},remove(){}},{name:"assimilation",description:"all your <strong class='color-bot'>bots</strong> are converted to the <strong>same</strong> random model",maxCount:1,count:0,frequency:0,isBotTech:!0,isInstant:!0,isJunk:!0,allowed:()=>b.totalBots()>2,requires:"at least 3 bots",effect(){const e=b.totalBots();tech.dynamoBotCount=0,tech.nailBotCount=0,tech.laserBotCount=0,tech.orbitBotCount=0,tech.foamBotCount=0,tech.soundBotCount=0,tech.boomBotCount=0,tech.plasmaBotCount=0,tech.missileBotCount=0;for(let e=0;e<bullet.length;e++)bullet[e].botType&&(bullet[e].endCycle=0);const o=[()=>{b.nailBot(),tech.nailBotCount++},()=>{b.foamBot(),tech.foamBotCount++},()=>{b.soundBot(),tech.soundBotCount++},()=>{b.boomBot(),tech.boomBotCount++},()=>{b.laserBot(),tech.laserBotCount++},()=>{b.orbitBot(),tech.orbitBotCount++},()=>{b.dynamoBot(),tech.dynamoBotCount++}],t=Math.floor(Math.random()*o.length);for(let n=0;n<e;n++)o[t]()},remove(){}},{name:"stun",description:"<strong>stun</strong> all mobs for up to <strong>8</strong> seconds",maxCount:9,count:0,frequency:0,isInstant:!0,isJunk:!0,allowed:()=>!0,requires:"",effect(){for(let e=0;e<mob.length;e++)mobs.statusStun(mob[e],480)},remove(){}},{name:"translucent",description:`spawn ${powerUps.orb.gun()}${powerUps.orb.gun()}${powerUps.orb.gun()}<br>your <strong class='color-g'>bullets</strong> and <strong class='color-bot'>bots</strong> are transparent`,maxCount:1,count:0,frequency:0,isInstant:!0,isJunk:!0,allowed:()=>!0,requires:"",effect(){for(let e=0;e<3;e++)powerUps.spawn(m.pos.x+60*(Math.random()-.5),m.pos.y+60*(Math.random()-.5),"gun");b.bulletDraw=()=>{}},remove(){}},{name:"difficulty",description:"spawn a power up that lets you<br>adjust the simulation <strong>difficulty</strong> parameters",maxCount:1,count:0,frequency:0,isInstant:!0,isJunk:!0,allowed:()=>level.levelsCleared<5,requires:"before level 5",effect(){powerUps.spawn(m.pos.x,m.pos.y,"difficulty")},remove(){}},{name:"re-research",description:`<strong>eject</strong> all your ${powerUps.orb.research(1)}`,maxCount:9,count:0,frequency:0,isInstant:!0,isJunk:!0,allowed:()=>powerUps.research.count>3,requires:"at least 4 research",effect(){powerUps.spawnDelay("research",powerUps.research.count),powerUps.research.count=0},remove(){}},{name:"black hole",description:`use your <strong class='color-f'>energy</strong> and ${powerUps.orb.research(4)} to <strong>spawn</strong><br>inside the event horizon of a huge <strong>black hole</strong>`,maxCount:1,count:0,frequency:0,isInstant:!0,isJunk:!0,allowed:()=>powerUps.research.count>3,requires:"at least 4 research",effect(){m.energy=0,spawn.suckerBoss(m.pos.x,m.pos.y-700),powerUps.research.changeRerolls(-4),simulation.inGameConsole(`<span class='color-var'>m</span>.<span class='color-r'>research</span> <span class='color-symbol'>--</span><br>${powerUps.research.count}`)},remove(){}},{name:"apomixis",description:"spawn <strong>11 bosses</strong>",maxCount:1,count:0,frequency:2,frequencyDefault:2,isInstant:!0,isJunk:!0,allowed:()=>tech.duplicationChance()>.99,requires:"duplication chance above 99%",effect(){for(let e=0,o=9;e<o;e++){const t=2*Math.PI*e/o;spawn.randomLevelBoss(m.pos.x+1300*Math.cos(t),m.pos.y+1300*Math.sin(t),["cellBossCulture","bomberBoss","powerUpBoss","growBossCulture","snakeBoss"])}spawn.historyBoss(0,0),spawn.pulsarBoss(level.exit.x,level.exit.y,70,!0),spawn.blockBoss(level.enter.x,level.enter.y)},remove(){}},{name:"mobs!",descriptionFunction(){return""===this.mobType&&(this.mobType=spawn.fullPickList[Math.floor(Math.random()*spawn.fullPickList.length)]),`spawn 20 <strong>${this.mobType}</strong> mobs`},maxCount:1,count:0,frequency:0,isInstant:!0,isJunk:!0,allowed:()=>!0,requires:"",mobType:"",effect(){""===this.mobType&&(this.mobType=spawn.fullPickList[Math.floor(Math.random()*spawn.fullPickList.length)]);for(let e=0;e<20;e++)spawn[this.mobType](m.pos.x,m.pos.y-700);simulation.inGameConsole(`spawn<span class='color-symbol'>.</span>${this.mobType}<span class='color-symbol'>(</span>x<span class='color-symbol'>,</span>y<span class='color-symbol'>)</span>`)},remove(){}},{name:"black hole cluster",description:"spawn <strong>30</strong> nearby <strong>black holes</strong>",maxCount:1,count:0,frequency:0,isInstant:!0,isJunk:!0,allowed:()=>!0,requires:"",effect(){const e={x:1,y:0};for(let o=0;o<30;o++){const o=Vector.add(m.pos,Vector.mult(Vector.rotate(e,2*Math.random()*Math.PI),2e3+1200*Math.random()));spawn.sucker(o.x,o.y,140);mob[mob.length-1].locatePlayer()}},remove(){}},{name:"rule 30",maxCount:1,count:0,frequency:0,isJunk:!0,allowed:()=>!build.isExperimentSelection,requires:"NOT EXPERIMENT MODE",effect(){},remove(){},state:[[!1,!1,!1,Math.random()>.8,!1,!1,!1,Math.random()>.8,!1,!1,!1,!1,!1,!1,!1,!1,!1,!0,!1,!1,!1,Math.random()>.8,!1,!1,!1,Math.random()>.8,!1,!1,!1,!1,Math.random()>.8,!1,Math.random()>.8,!1,!1,!1,Math.random()>.8,!1,!1,!1,!1,!1,!1,!1,!1,!1]],rule:(e,o,t,n)=>!(e[o]&&e[t]&&e[n])&&(!(e[o]&&e[t]&&!e[n])&&(!(e[o]&&!e[t]&&e[n])&&(!(!e[o]||e[t]||e[n])||(!(e[o]||!e[t]||!e[n])||(!(e[o]||!e[t]||e[n])||(!(e[o]||e[t]||!e[n])||!!(e[o]||e[t]||e[n])&&void 0)))))),id:0,researchSpawned:0,descriptionFunction(){const e=()=>{if((simulation.paused||simulation.isChoosing)&&m.alive&&!build.isExperimentSelection){let o=[];o.push(this.rule(this.state[this.state.length-1],this.state[this.state.length-1].length-1,0,1));for(let e=1;e<this.state[this.state.length-1].length-1;e++)o.push(this.rule(this.state[this.state.length-1],e-1,e,e+1));o.push(this.rule(this.state[this.state.length-1],this.state[this.state.length-1].length-2,this.state[this.state.length-1].length-1,0)),this.state.push(o),document.getElementById(`cellular-rule-id${this.id}`)&&(document.getElementById(`cellular-rule-id${this.id}`).innerHTML=this.outputText()),this.count&&this.researchSpawned<12&&!(this.state.length%10)&&(this.researchSpawned++,powerUps.spawn(m.pos.x-50+100*(Math.random()-.5),m.pos.y+100*(Math.random()-.5),"research"),sound.portamento(300,600,100,.03)),setTimeout(()=>{e()},300+5*this.state.length)}};return setTimeout(()=>{e()},300),this.id++,`<span id = "cellular-rule-id${this.id}" style = "letter-spacing: -0.5px;font-size: 100%;line-height: normal;font-family: 'Courier New', monospace;">${this.outputText()}</span>`},outputText(){let e="<pre>";for(let o=0;o<this.state.length;o++){e+="<p style = 'margin-top: -7px;margin-bottom: -7px;'>";for(let t=0;t<this.state[o].length;t++)this.state[o][t]?e+="■":e+=" ";e+="</p>"}return e+="</pre>",e}},{name:"rule 90",maxCount:1,count:0,frequency:0,isJunk:!0,allowed:()=>!build.isExperimentSelection,requires:"NOT EXPERIMENT MODE",effect(){},remove(){},state:[[!1,!1,!1,Math.random()>.8,!1,!1,!1,Math.random()>.8,!1,!1,!1,!1,!1,!1,!1,!1,!1,!0,!0,!1,!1,!1,Math.random()>.8,!1,!1,!1,Math.random()>.8,!1,!1,!1,!1,Math.random()>.8,!1,Math.random()>.8,!1,!1,!1,Math.random()>.8,!1,!1,!1,!1,!1,!1,!1,!1]],rule:(e,o,t,n)=>!(e[o]&&e[t]&&e[n])&&(!(!e[o]||!e[t]||e[n])||!(e[o]&&!e[t]&&e[n])&&(!(!e[o]||e[t]||e[n])||(!(e[o]||!e[t]||!e[n])||!(!e[o]&&e[t]&&!e[n])&&(!(e[o]||e[t]||!e[n])||!!(e[o]||e[t]||e[n])&&void 0)))),id:90,researchSpawned:0,descriptionFunction(){const e=()=>{if((simulation.paused||simulation.isChoosing)&&m.alive&&!build.isExperimentSelection){let o=[];o.push(this.rule(this.state[this.state.length-1],this.state[this.state.length-1].length-1,0,1));for(let e=1;e<this.state[this.state.length-1].length-1;e++)o.push(this.rule(this.state[this.state.length-1],e-1,e,e+1));o.push(this.rule(this.state[this.state.length-1],this.state[this.state.length-1].length-2,this.state[this.state.length-1].length-1,0)),this.state.push(o),document.getElementById(`cellular-rule-id${this.id}`)&&(document.getElementById(`cellular-rule-id${this.id}`).innerHTML=this.outputText()),this.count&&this.researchSpawned<12&&!(this.state.length%10)&&(this.researchSpawned++,powerUps.spawn(m.pos.x-50+100*(Math.random()-.5),m.pos.y+100*(Math.random()-.5),"research"),sound.portamento(300,600,100,.03)),setTimeout(()=>{e()},300+5*this.state.length)}};return setTimeout(()=>{e()},300),this.id++,`<span id = "cellular-rule-id${this.id}" style = "letter-spacing: -0.5px;font-size: 100%;line-height: normal;font-family: 'Courier New', monospace;">${this.outputText()}</span>`},outputText(){let e="<pre>";for(let o=0;o<this.state.length;o++){e+="<p style = 'margin-top: -7px;margin-bottom: -7px;'>";for(let t=0;t<this.state[o].length;t++)this.state[o][t]?e+="■":e+=" ";e+="</p>"}return e+="</pre>",e}},{name:"wikipedia",description:`After you get ${powerUps.orb.tech()} you have 7 seconds to study for a quiz.  If you ace the quiz you get ${powerUps.orb.research(4)}`,maxCount:1,count:0,frequency:0,isJunk:!0,allowed:()=>!0,requires:"",effect(){tech.isWiki=!0},remove(){tech.isWiki=!1}},{name:"cosmogonic myth",description:'<span style = "opacity: 9%;">open a portal to a primordial version of reality<br>in 5 minutes close the portal, spawn 1 of each power up</span>',maxCount:1,count:0,frequency:0,isInstant:!0,isJunk:!0,allowed:()=>!0,requires:"",effect(){const e=["https://scratch.mit.edu/projects/14005697/fullscreen/","https://scratch.mit.edu/projects/22573757/fullscreen/","https://scratch.mit.edu/projects/41429974/fullscreen/","https://scratch.mit.edu/projects/43690666/fullscreen/","https://codepen.io/lilgreenland/full/ozXNWZ","https://codepen.io/lilgreenland/full/wzARJY","classic/7-1-2017/","classic/4-15-2018/","classic/7-11-2019/","classic/9-8-2019/","classic/7-15-2020/","classic/6-1-2021/"],o=e[Math.floor(Math.random()*e.length)];console.log(`opening new tab" ${o}`);let t=window.open(o,"_blank");setTimeout(()=>{t.close(),powerUps.spawn(m.pos.x,m.pos.y,"gun"),setTimeout(()=>{powerUps.spawn(m.pos.x,m.pos.y-50,"ammo")},250),setTimeout(()=>{powerUps.spawn(m.pos.x+50,m.pos.y,"field")},500),setTimeout(()=>{powerUps.spawn(m.pos.x+50,m.pos.y-50,"heal")},750),setTimeout(()=>{powerUps.spawn(m.pos.x-50,m.pos.y,"tech")},1e3),setTimeout(()=>{powerUps.spawn(m.pos.x-50,m.pos.y-50,"research")},1250)},3e5)},remove(){}},{name:"beforeunload",description:"<strong>75%</strong> of the time when you attempt to <strong>exit</strong> n-gon<br>you are prompted to <strong>cancel</strong> or continue.<br>Each time you <strong>cancel</strong> gain <strong>1.25x</strong> <strong class='color-d'>damage</strong>.",maxCount:1,count:0,frequency:1,isJunk:!0,allowed:()=>tech.totalCount>9,requires:"at least 10 tech",effect(){tech.isExitPrompt=!0,addEventListener("beforeunload",beforeUnloadEventListener)},remove(){tech.isExitPrompt=!1,this.count>0&&removeEventListener("beforeunload",beforeUnloadEventListener)}},{name:"planetesimals",description:`play <strong>planetesimals</strong> <em style = 'font-size:80%;'>(an asteroids-like game)</em><br>clear <strong>levels</strong> in <strong>planetesimals</strong> to spawn ${powerUps.orb.tech()}<br>if you <strong style="color:red;">die</strong> in <strong>planetesimals</strong> you <strong style="color:red;">die</strong> in <strong>n-gon</strong>`,maxCount:1,count:0,frequency:0,isInstant:!0,isJunk:!0,allowed:()=>!0,requires:"",effect(){window.open("../../planetesimals/index.html","_blank");const e=new BroadcastChannel("planetesimals");e.activated=!1,e.onmessage=function(o){"tech"===o.data&&powerUps.spawn(m.pos.x,m.pos.y,"tech"),"death"===o.data&&(m.death(),e.close()),"ready"!==o.data||e.activated||(e.activated=!0,e.postMessage("activate"))}},remove(){}},{name:"tinker",description:`<strong>permanently</strong> unlock <strong class='color-junk'>JUNK</strong>${powerUps.orb.tech()} in experiment mode<br><em>this effect is stored for future visits</em>`,maxCount:1,count:0,frequency:0,frequencyDefault:0,isJunk:!0,isInstant:!0,allowed:()=>!localSettings.isJunkExperiment,requires:"",effect(){localSettings.isJunkExperiment=!0,localSettings.isAllowed&&localStorage.setItem("localSettings",JSON.stringify(localSettings))},remove(){}},{name:"NFT",descriptionFunction:()=>`buy your current game seed: <strong style = 'font-size:120%;'>${Math.initialSeed}</strong><br><em>no one is allowed to use your seeds<br>if they use them they are gonna get in trouble</em><br>your seeds: <span style = 'font-size:80%;'>${localSettings.personalSeeds.join(", ")}</span>`,maxCount:1,count:0,frequency:0,isJunk:!0,isInstant:!0,allowed:()=>!0,requires:"",effect(){localSettings.personalSeeds.push(Math.initialSeed),localSettings.isAllowed&&localStorage.setItem("localSettings",JSON.stringify(localSettings))},remove(){}},{name:"undefined",description:'<strong class="lore-text">this</strong><br> &nbsp;',maxCount:1,count:0,frequency:2,frequencyDefault:2,isLore:!0,allowed:()=>!build.isExperimentSelection,requires:"NOT EXPERIMENT MODE",effect(){if(localSettings.loreCount>lore.conversation.length-1)for(let e=mob.length-1;e>-1;e--)!mob[e].isBoss&&mob[e].isDropPowerUp&&mob[e].alive&&(spawn.starter(mob[e].position.x,mob[e].position.y),mob[e].leaveBody=!1,mob[e].isDropPowerUp=!1,mob[e].death(),Math.random()<1/4?powerUps.spawn(mob[e].position.x,mob[e].position.y,"ammo"):Math.random()<1/3?powerUps.spawn(mob[e].position.x,mob[e].position.y,"heal"):Math.random()<.5?powerUps.spawn(mob[e].position.x,mob[e].position.y,"boost"):powerUps.spawn(mob[e].position.x,mob[e].position.y,"coupling"));setTimeout(()=>{lore.techCount++,lore.techCount===lore.techGoal?(this.frequency=0,this.description='<strong class="lore-text">null</strong> is open at level.final() <br> &nbsp;'):(this.frequency+=2*lore.techGoal,this.description=`<em>uncaught error:</em><br><strong>${Math.max(0,lore.techGoal-lore.techCount)}</strong> more required for access to <strong class="lore-text">null</strong>`)},1)},remove(){lore.techCount=0,this.maxCount=lore.techGoal,this.description='<strong class="lore-text">this</strong> <br> &nbsp;'}}],fireRate:1,bulletSize:null,energySiphon:null,healSpawn:null,crouchAmmoCount:null,bulletsLastLonger:null,isImmortal:null,sporesOnDeath:null,isImmuneExplosion:null,isExplodeMob:null,isDroneOnDamage:null,isAcidDmg:null,isAnnihilation:null,largerHeals:null,isCrit:null,isLowHealthDmg:null,isLowHealthDefense:null,isLowHealthFireRate:null,isFarAwayDmg:null,isFirstDer:null,isMassEnergy:null,extraChoices:null,laserBotCount:null,dynamoBotCount:null,nailBotCount:null,foamBotCount:null,soundBotCount:null,boomBotCount:null,plasmaBotCount:null,missileBotCount:null,orbitBotCount:null,blockDmg:null,isBlockRadiation:null,isPiezo:null,isFastDrones:null,oneSuperBall:null,laserReflections:null,laserDamage:null,isAmmoFromHealth:null,mobSpawnWithHealth:null,isEnergyRecovery:null,isHealthRecovery:null,isEnergyLoss:null,isDeathAvoid:null,isDeathAvoidedThisLevel:null,isPlasmaRange:null,isFreezeMobs:null,isIceCrystals:null,blockDamage:null,isBlockStun:null,isStunField:null,isHarmDamage:null,isVacuumBomb:null,renormalization:null,fragments:null,energyDamage:null,botSpawner:null,isBotSpawnerReset:null,isSporeFollow:null,isNailRadiation:null,isEnergyHealth:null,isStun:null,restDamage:null,isRPG:null,missileCount:null,isDeterminism:null,isSuperDeterminism:null,isHarmReduce:null,nailsDeathMob:null,isSlowFPS:null,isNeutronStun:null,isAnsatz:null,isDamageFromBulletCount:null,laserDrain:null,isNailShot:null,slowFire:null,fastTime:null,isFastRadiation:null,isAmmoForGun:null,isRapidPulse:null,isSporeFreeze:null,isShotgunRecoil:null,isHealLowHealth:null,isAoESlow:null,isHarmArmor:null,isTurret:null,isRerollDamage:null,isHarmFreeze:null,isBotArmor:null,isRerollHaste:null,researchHaste:null,isMineDrop:null,isRerollBots:null,isNailBotUpgrade:null,isFoamBotUpgrade:null,isSoundBotUpgrade:null,isLaserBotUpgrade:null,isBoomBotUpgrade:null,isOrbitBotUpgrade:null,isDroneGrab:null,isOneGun:null,isDamageForGuns:null,isGunCycle:null,isFastFoam:null,isSporeGrowth:null,isStimulatedEmission:null,nailInstantFireRate:null,isCapacitor:null,isEnergyNoAmmo:null,isSmallExplosion:null,isExplosionHarm:null,extraMaxHealth:null,isIntangible:null,isCloakStun:null,bonusEnergy:null,healMaxEnergyBonus:0,slowFireDamage:null,isNoFireDefense:null,isNoFireDamage:null,duplicateChance:null,beamSplitter:null,iceEnergy:null,isPerfectBrake:null,explosiveRadius:null,isWormholeDamage:null,isNailCrit:null,isFlechetteExplode:null,isWormholeWorms:null,isWormHoleBullets:null,isWideLaser:null,wideLaser:null,isPulseLaser:null,isRadioactive:null,radioactiveDamage:null,isRailEnergy:null,isMineSentry:null,isIncendiary:null,overfillDrain:null,isNeutronSlow:null,historyLaser:null,isSpeedHarm:null,isSpeedDamage:null,speedAdded:null,isTimeSkip:null,isCancelDuplication:null,duplication:null,isCancelRerolls:null,isCancelTech:null,cancelTechCount:null,isBotDamage:null,isBanish:null,isRetain:null,isMaxEnergyTech:null,isLowEnergyDamage:null,isRewindBot:null,isRewindGrenade:null,isExtruder:null,isEndLevelPowerUp:null,isMissileBig:null,isMissileBiggest:null,isMissileFast:null,isMissile2ndExplode:null,isLaserMine:null,isFoamMine:null,isAmmoFoamSize:null,isIceIX:null,isDupDamage:null,isDupEnergy:null,isFireRateForGuns:null,cyclicImmunity:null,isTechDamage:null,isRestHarm:null,isFireMoveLock:null,isRivets:null,isNeedles:null,isExplodeRadio:null,isPauseSwitchField:null,isPauseEjectTech:null,pauseEjectTech:null,isShieldPierce:null,isDuplicateMobs:null,isDynamoBotUpgrade:null,isBlockPowerUps:null,isHarmReduceNoKill:null,isSwitchReality:null,isResearchReality:null,isAnthropicDamage:null,isMetaAnalysis:null,isFoamAttract:null,droneCycleReduction:null,droneEnergyReduction:null,isHalfHeals:null,isAlwaysFire:null,isDroneRespawn:null,deathSpawns:null,isMobBlockFling:null,isPhaseVelocity:null,waveBeamSpeed:null,wavePacketAmplitude:null,isCollisionRealitySwitch:null,iceIXOnDeath:null,wimpCount:null,isAddBlockMass:null,isDarkMatter:null,isHarmDarkMatter:null,isMoveDarkMatter:null,isNotDarkMatter:null,isSneakAttack:null,isFallingDamage:null,harmonics:null,isStandingWaveExpand:null,isTokamak:null,isTokamakHeal:null,tokamakHealCount:null,isTokamakFly:null,deflectEnergy:null,superBallDelay:null,isBlockExplode:null,isOverHeal:null,isDroneRadioactive:null,droneRadioDamage:null,isDroneTeleport:null,isDroneFastLook:null,isBulletTeleport:null,isJunkResearch:null,laserColor:null,laserColorAlpha:null,isLongitudinal:null,is360Longitudinal:null,isShotgunReversed:null,fieldDuplicate:null,isCloakingDamage:null,harmonicEnergy:null,isFieldHarmReduction:null,isFastTime:null,isAnthropicTech:null,isSporeWorm:null,isSporeFlea:null,isFoamShot:null,isIceShot:null,isBlockRestitution:null,isZeno:null,isFieldFree:null,isExtraGunField:null,isBigField:null,isSmartRadius:null,isFilament:null,isLargeHarpoon:null,extraHarpoons:null,ammoCap:null,isHarpoonPowerUp:null,harpoonDensity:null,isAddRemoveMaxHealth:null,cloakDuplication:null,extruderRange:null,isForeverDrones:null,nailRecoil:null,baseJumpForce:null,baseFx:null,isNeutronium:null,isFreeWormHole:null,isCrouchRegen:null,isAxion:null,isDarkEnergy:null,isDarkStar:null,isWormholeMapIgnore:null,isLessDamageReduction:null,needleTunnel:null,isBrainstorm:null,isBrainstormActive:null,brainStormDelay:null,wormSize:null,extraSuperBalls:null,isTimeCrystals:null,isGroundState:null,isRailGun:null,isDronesTravel:null,isTechDebt:null,isPlasmaBall:null,plasmaDischarge:null,missileFireCD:null,isBotField:null,isFoamBall:null,isNoDraftPause:null,isFoamPressure:null,foamDamage:null,isClusterExplode:null,isCircleExplode:null,isPetalsExplode:null,isVerlet:null,isIceMaxHealthLoss:null,isIceKill:null,isCritKill:null,isQuantumEraser:null,isPhononBlock:null,isPhononWave:null,isLaserLens:null,laserCrit:null,isSporeColony:null,isExtraBotOption:null,isLastHitDamage:null,isCloakHealLastHit:null,isRicochet:null,isCancelCouple:null,isCouplingPowerUps:null,isBoostPowerUps:null,isBoostReplaceAmmo:null,isInfiniteWaveAmmo:null,isJunkDNA:null,buffedGun:0,isGunChoice:null,railChargeRate:null,isSuperHarm:null,isZombieMobs:null,isSuperMine:null,sentryAmmo:null,collidePowerUps:null,isDilate:null,isDiaphragm:null,isOffGroundDamage:null,isSuperBounce:null,isDivisor:null,isFoamCavitation:null,isHealAttract:null,isLaserField:null,isHealBrake:null,isMassProduction:null,isPrinter:null,isHookDefense:null,hookNails:null,isHarpoonDefense:null,isReel:null,harpoonPowerUpCycle:null,isHarpoonFullHealth:null,isMobFullHealthCloak:null,isMobLowHealth:null,isDamageCooldown:null,isDamageCooldownTime:null,isPowerUpDamage:null,isExitPrompt:null,isResearchDamage:null,isResearchHeal:null,interestRate:null,isImmunityDamage:null,isMobDeathImmunity:null,isMaxHealthDefense:null,noDefenseSettingDamage:null,isMaxHealthDamage:null,isEjectOld:null,isWiki:null,isStaticBlock:null,isDamageFieldTech:null,isRemineralize:null,mineralDamageReduction:null,isDemineralize:null,mineralDamage:null,negativeMassCost:null,beamCollimator:null,isInPilot:null,isNoPilotCost:null,isPlasmaBoost:null,isControlPlasma:null,energyDefense:null,isNewWormHoleDamage:null,isNoDeath:null,isDeathTech:null,isDeathTechTriggered:null,isRebar:null,isMaul:null,isTargeting:null,isBreakHarpoon:null,isBreakHarpoonGain:null,isExponential:null,isCoyote:null,isNitinol:null,isEndothermic:null,isPrecision:null,isExtraGunTech:null,isExplodeContact:null};