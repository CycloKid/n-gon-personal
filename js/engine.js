const Engine=Matter.Engine,Events=Matter.Events,Composites=Matter.Composites,Composite=Matter.Composite,Constraint=Matter.Constraint,Vertices=Matter.Vertices,Query=Matter.Query,Body=Matter.Body,Bodies=Matter.Bodies,Vector=Matter.Vector,engine=Engine.create();function playerOnGroundCheck(e){function o(){if(m.numTouching++,!m.onGround)if(m.onGround=!0,m.crouch)m.checkHeadClear()?m.undoCrouch():m.yOffGoal=m.yOffWhen.crouch;else{const e=player.velocity.y*player.mass;e>m.hardLanding?(m.doCrouch(),m.yOff=m.yOffWhen.jump,m.hardLandCD=m.cycle+m.hardLandCDScale*Math.min(e/6.5-6,40)):m.yOffGoal=m.yOffWhen.stand,tech.isFallingDamage&&m.immuneCycle<m.cycle&&e>150&&(m.takeDamage(Math.min(.03*Math.sqrt(e-100),.6)),m.immuneCycle<m.cycle+m.collisionImmuneCycles&&(m.immuneCycle=m.cycle+m.collisionImmuneCycles))}}const t=e.pairs;for(let e=0,i=t.length;e!=i;++e){let i=t[e];i.bodyA===jumpSensor?(m.standingOn=i.bodyB,(!0!==m.standingOn.alive||m.immuneCycle>m.cycle)&&o()):i.bodyB===jumpSensor&&(m.standingOn=i.bodyA,(!0!==m.standingOn.alive||m.immuneCycle>m.cycle)&&o())}m.numTouching=0}function playerOffGroundCheck(e){const o=e.pairs;for(let e=0,t=o.length;e!=t;++e)o[e].bodyA!==jumpSensor&&o[e].bodyB!==jumpSensor||m.onGround&&0===m.numTouching&&(m.onGround=!1,m.lastOnGroundCycle=m.cycle,m.hardLandCD=0,m.checkHeadClear()&&(m.crouch&&m.undoCrouch(),m.yOffGoal=m.yOffWhen.jump))}function collisionChecks(e){const o=e.pairs;for(let i=0,a=o.length;i!=a;i++)for(let n=0;n<mob.length;n++)if(mob[n].alive){if(o[i].bodyA===mob[n]){t(o[i].bodyB);break}if(o[i].bodyB===mob[n]){t(o[i].bodyA);break}function t(e){if(!(m.immuneCycle<m.cycle)||e!==playerBody&&e!==playerHead||mob[n].isSlowed||mob[n].isStunned){if("bullet"===e.classType&&e.speed>e.minDmgSpeed){e.beforeDmg(mob[n]);let t=e.dmg+.15*e.mass*Vector.magnitude(Vector.sub(mob[n].velocity,e.velocity));return tech.isCrit&&mob[n].isStunned&&(t*=4),mob[n].damage(t),mob[n].alive&&mob[n].foundPlayer(),mob[n].damageReduction&&simulation.drawList.push({x:o[i].activeContacts[0].vertex.x,y:o[i].activeContacts[0].vertex.y,radius:40*Math.log(t+1.1)*mob[n].damageReduction+3,color:simulation.playerDmgColor,time:simulation.drawTime}),void(tech.isLessDamageReduction&&!mob[n].shield&&(mob[n].damageReduction*=mob[n].isBoss?mob[n].isFinalBoss?1.0005:1.0025:1.05))}if("body"===e.classType&&e.speed>9){const t=Vector.magnitude(Vector.sub(mob[n].velocity,e.velocity));if(t>11){tech.blockDmg&&(Matter.Body.setVelocity(mob[n],{x:.5*mob[n].velocity.x,y:.5*mob[n].velocity.y}),!tech.isBlockRadiation||mob[n].isShielded||mob[n].isMobBullet?(mob[n].damage(tech.blockDmg),simulation.drawList.push({x:o[i].activeContacts[0].vertex.x,y:o[i].activeContacts[0].vertex.y,radius:28*mob[n].damageReduction+3,color:"rgba(255,0,255,0.8)",time:4})):mobs.statusDoT(mob[n],.42*tech.blockDmg,180));let a=tech.blockDamage*t*e.mass*(tech.isMobBlockFling?2.5:1)*(tech.isBlockRestitution?2.5:1)*(0===m.fieldMode||8===m.fieldMode?1+.05*m.coupling:1);mob[n].isShielded&&(a*=.7),mob[n].damage(a,!0),tech.isBlockPowerUps&&!mob[n].alive&&mob[n].isDropPowerUp&&Math.random()<.5&&(options=["coupling","boost","heal","research","ammo"],powerUps.spawn(mob[n].position.x,mob[n].position.y,options[Math.floor(Math.random()*options.length)]));const s=a/Math.sqrt(e.mass);return s>.5&&mob[n].memory!==1/0&&mobs.statusStun(mob[n],60+60*Math.sqrt(s)),mob[n].alive&&mob[n].distanceToPlayer2()<1e6&&!m.isCloak&&mob[n].foundPlayer(),tech.fragments&&e.speed>10&&!e.hasFragmented&&(e.hasFragmented=!0,b.targetedNail(e.position,4*tech.fragments)),void(mob[n].damageReduction&&simulation.drawList.push({x:o[i].activeContacts[0].vertex.x,y:o[i].activeContacts[0].vertex.y,radius:40*Math.log(a+1.1)*mob[n].damageReduction+3,color:simulation.playerDmgColor,time:simulation.drawTime}))}}}else{let e=Math.min(Math.max(.025*Math.sqrt(mob[n].mass),.05),.3)*mob[n].damageScale();if(mob[n].foundPlayer(),tech.isRewindAvoidDeath&&m.energy>.85*Math.min(1,m.maxEnergy)&&e>.01)return void m.takeDamage(e);if(m.takeDamage(e),tech.isCollisionRealitySwitch&&m.alive&&(m.switchWorlds("Hilbert space"),simulation.trails(90),simulation.inGameConsole(`simulation.amplitude <span class='color-symbol'>=</span> ${Math.random()}`)),tech.isPiezo&&(m.energy+=20.48*level.isReducedRegen),tech.isExplodeContact&&b.explosion(m.pos,450),tech.isCouplingNoHit&&m.coupling>0){m.couplingChange(-3);const e=Vector.rotate({x:1,y:0},6.28*Math.random());let o=Vector.add(m.pos,Vector.mult(e,17));simulation.drawList.push({x:o.x,y:o.y,radius:22,color:"rgba(0, 171, 238, 0.33)",time:8}),o=Vector.add(m.pos,Vector.mult(e,60)),simulation.drawList.push({x:o.x,y:o.y,radius:18,color:"rgba(0, 171, 238, 0.5)",time:16}),o=Vector.add(m.pos,Vector.mult(e,100)),simulation.drawList.push({x:o.x,y:o.y,radius:14,color:"rgba(0, 171, 238, 0.6)",time:24}),o=Vector.add(m.pos,Vector.mult(e,135)),simulation.drawList.push({x:o.x,y:o.y,radius:10,color:"rgba(0, 171, 238, 0.7)",time:32})}if(tech.isHarpoonDefense){const e=10+3*tech.extraHarpoons;let o=e-1;const t=Math.atan2(mob[n].position.y-player.position.y,mob[n].position.x-player.position.x),i=.75*(tech.isLargeHarpoon?1+Math.min(.05*Math.sqrt(b.guns[9].ammo),10):1);for(b.harpoon(m.pos,mob[n],t,i,!0,7,!1),bullet[bullet.length-1].drain=0;o>0;o--)b.harpoon(m.pos,mob[n],t+2*o*Math.PI/e,i,!0,7,!1),bullet[bullet.length-1].drain=0}tech.isStimulatedEmission&&powerUps.ejectTech(),mob[n].onHit&&mob[n].onHit(),m.immuneCycle<m.cycle+m.collisionImmuneCycles&&(m.immuneCycle=m.cycle+m.collisionImmuneCycles);let t=Math.atan2(player.position.y-mob[n].position.y,player.position.x-mob[n].position.x);Matter.Body.setVelocity(player,{x:player.velocity.x+8*Math.cos(t),y:player.velocity.y+8*Math.sin(t)}),Matter.Body.setVelocity(mob[n],{x:mob[n].velocity.x-8*Math.cos(t),y:mob[n].velocity.y-8*Math.sin(t)}),tech.isAnnihilation&&!mob[n].shield&&!mob[n].isShielded&&!mob[n].isBoss&&mob[n].isDropPowerUp&&m.energy>.08&&mob[n].damageReduction>0?(m.energy-=.08,m.immuneCycle===m.cycle+m.collisionImmuneCycles&&(m.immuneCycle=0),mob[n].death(),simulation.drawList.push({x:o[i].activeContacts[0].vertex.x,y:o[i].activeContacts[0].vertex.y,radius:500*Math.sqrt(e),color:"rgba(255,0,255,0.2)",time:simulation.drawTime})):simulation.drawList.push({x:o[i].activeContacts[0].vertex.x,y:o[i].activeContacts[0].vertex.y,radius:200*Math.sqrt(e),color:simulation.mobDmgColor,time:simulation.drawTime})}}}}engine.world.gravity.scale=0,Events.on(engine,"collisionStart",function(e){playerOnGroundCheck(e),collisionChecks(e)}),Events.on(engine,"collisionActive",function(e){playerOnGroundCheck(e)}),Events.on(engine,"collisionEnd",function(e){playerOffGroundCheck(e)});